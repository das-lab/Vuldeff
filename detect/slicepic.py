# -*- coding:utf-8 -*-
import matplotlib
matplotlib.rc("font",family='DengXian')
import matplotlib.pyplot as plt
from matplotlib.pyplot import MultipleLocator
import numpy as np
'''
# 构建数据
"rpi-5.15.y"
TP1_8 = [18, 18, 18, 18, 16, 10, 6, 2, 2, 2]
FP1_8 = [10016, 910, 10, 2, 2, 1, 1, 0, 0, 0]
FN1_8 = [0, 0, 0, 0, 2, 8, 12, 16, 16, 16]

TP2_8 = [6, 6, 7, 9, 12, 18, 18, 18, 18, 18]
FP2_8 = [0, 0, 0, 0, 0, 0, 2, 4, 6, 8]
FN2_8 = [12, 12, 11, 9, 6, 0, 0, 0, 0, 0]

TP3_8 = [18, 18, 18, 18, 17, 16, 10, 9, 9, 8]
FP3_8 = [5, 4, 4, 2, 2, 2, 2, 2, 2, 2]
FN3_8 = [0, 0, 0, 0, 1, 2, 8, 9, 9, 10]
"ImageMagick-main 3"
TP1_1 = [36, 36, 36, 34, 30, 27, 22, 16, 10, 3]
FP1_1 = [8016, 910, 33, 0, 0, 0, 0, 0, 0, 0]
FN1_1 = [4, 4, 4, 6, 10, 13, 18, 24, 30, 37]

TP2_1 = [27, 28, 28, 28, 29, 30, 34, 35, 36, 38]
FP2_1 = [0, 0, 0, 0, 0, 0, 0, 2, 4, 6]
FN2_1 = [13, 12, 12, 12, 11, 10, 6, 5, 4, 2]

TP3_1 = [34, 34, 34, 34, 30, 30, 30, 30, 29, 29]
FP3_1 = [1, 1, 1, 0, 0, 0, 0, 0, 0, 0]
FN3_1 = [6, 6, 6, 6, 10, 10, 10, 10, 11, 11]
"tcpdump-master 75-30-80 1 70-30 +1 "
TP1_2 = [3, 3, 3, 3, 1, 1, 1, 1, 1, 1]
FP1_2 = [150, 12, 1, 0, 0, 0, 0, 0, 0, 0]
FN1_2 = [0, 0, 0, 0, 2, 2, 2, 2, 2, 2]
TP2_2 = [1, 1, 1, 1, 1, 2, 3, 3, 3, 3]
FP2_2 = [0, 0, 0, 0, 0, 0, 0, 1, 1, 1]
FN2_2 = [2, 2, 2, 2, 2, 1, 0, 0, 0, 0]
TP3_2 = [3, 3, 3, 3, 3, 3, 3, 3, 1, 1]
FP3_2 = [1, 1, 1, 0, 0, 0, 0, 0, 0, 0]
FN3_2 = [0, 0, 0, 0, 0, 0, 0, 0, 2, 2]
"radare2-master 75-30-80 3 70:+1 4"
TP1_3 = [4, 4, 4, 4, 3, 2, 1, 1, 1, 1]
FP1_3 = [5166, 973, 70, 3, 2, 2, 1, 1, 0, 0]
FN1_3 = [0, 0, 0, 0, 1, 2, 3, 3, 3, 3]
TP2_3 = [3, 3, 3, 3, 3, 3, 4, 4, 4, 4]
FP2_3 = [1, 1, 1, 1, 1, 2, 3, 4, 5, 6]
FN2_3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TP3_3 = [4, 4, 4, 4, 3, 3, 3, 3, 3, 3]
FP3_3 = [3, 3, 3, 3, 2, 2, 2, 2, 2, 2]
FN3_3 = [0, 0, 0, 0, 1, 1, 1, 1, 1, 1]
"hhvm 75-80-30 11 60:+3 14 45:+3 75:+1 18"
TP1_4 = [13, 13, 12, 11, 10, 10, 9, 9, 6, 3]
FP1_4 = [7795, 748, 23, 1, 0, 0, 0, 0, 0, 0]
FN1_4 = [5, 5, 6, 7, 8, 8, 9, 9, 12, 15]

TP2_4 = [9, 9, 11, 11, 11, 11, 11, 11, 11, 11]
FP2_4 = [0, 0, 1, 1, 1, 1, 1, 2, 3, 5]
FN2_4 = [9, 9, 7, 7, 7, 7, 7, 7, 7, 7]

TP3_4 = [12, 12, 12, 11, 11, 10, 10, 9, 8, 7]
FP3_4 = [2, 1, 1, 1, 0, 0, 0, 0, 0, 0]
FN3_4 = [6, 6, 6, 7, 7, 8, 8, 9, 10, 11]
"libarchive-master"
TP1_5 = [2, 2, 2, 2, 2, 2, 1, 1, 1, 1]
FP1_5 = [1224, 320, 73, 0, 0, 0, 0, 0, 0, 0]
FN1_5 = [0, 0, 0, 0, 0, 0, 1, 1, 1, 1]
TP2_5 = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
FP2_5 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FN2_5 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TP3_5 = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
FP3_5 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FN3_5 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
"libgit2-main 75-80-30 2 "
TP1_6 = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
FP1_6 = [5040, 1211, 84, 5, 0, 0, 0, 0, 0, 0]
FN1_6 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TP2_6 = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
FP2_6 = [0, 0, 0, 1, 2, 3, 5, 5, 6, 7]
FN2_6 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TP3_6 = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
FP3_6 = [7, 7, 6, 5, 3, 2, 0, 0, 0, 0]
FN3_6 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
"libav 70-80-30 36 75-80-35 34 36+4=40"
TP1_7 = [36, 36, 36, 34, 30, 27, 22, 16, 10, 3]
FP1_7 = [8016, 910, 33, 0, 0, 0, 0, 0, 0, 0]
FN1_7 = [4, 4, 4, 6, 10, 13, 18, 24, 30, 37]
TP2_7 = [27, 28, 28, 28, 29, 30, 34, 34, 34, 34]
FP2_7 = [0, 0, 0, 0, 0, 0, 0, 1, 1, 1]
FN2_7 = [13, 12, 12, 12, 11, 10, 6, 6, 6, 6]
TP3_7 = [34, 34, 34, 34, 30, 30, 30, 30, 29, 29]
FP3_7 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FN3_7 = [6, 6, 6, 6, 10, 10, 10, 10, 11, 11]
'''
"rpi-5.15.y"
TP1_8 = [18, 18, 18, 18, 16, 10, 6, 2, 2, 2]
FP1_8 = [10016, 910, 10, 2, 2, 1, 1, 0, 0, 0]
FN1_8 = [0, 0, 0, 0, 2, 8, 12, 16, 16, 16]

TP2_8 = [6, 6, 7, 9, 12, 18, 18, 18, 18, 18]
FP2_8 = [0, 0, 0, 0, 0, 0, 2, 4, 6, 8]
FN2_8 = [12, 12, 11, 9, 6, 0, 0, 0, 0, 0]

TP3_8 = [18, 18, 18, 18, 17, 16, 10, 9, 9, 8]
FP3_8 = [5, 4, 4, 2, 2, 2, 2, 2, 2, 2]
FN3_8 = [0, 0, 0, 0, 1, 2, 8, 9, 9, 10]
"ImageMagick-main 3"
TP1_1 = [36, 36, 36, 34, 30, 27, 22, 16, 10, 3]
FP1_1 = [8016, 910, 33, 0, 0, 0, 0, 0, 0, 0]
FN1_1 = [4, 4, 4, 6, 10, 13, 18, 24, 30, 37]

TP2_1 = [27, 28, 28, 28, 29, 30, 34, 35, 36, 38]
FP2_1 = [0, 0, 0, 0, 0, 0, 0, 2, 4, 6]
FN2_1 = [13, 12, 12, 12, 11, 10, 6, 5, 4, 2]

TP3_1 = [34, 34, 34, 34, 30, 30, 30, 30, 29, 29]
FP3_1 = [1, 1, 1, 0, 0, 0, 0, 0, 0, 0]
FN3_1 = [6, 6, 6, 6, 10, 10, 10, 10, 11, 11]
"tcpdump-master 75-30-80 1 70-30 +1 "
TP1_2 = [3, 3, 3, 3, 1, 1, 1, 1, 1, 1]
FP1_2 = [150, 12, 1, 0, 0, 0, 0, 0, 0, 0]
FN1_2 = [0, 0, 0, 0, 2, 2, 2, 2, 2, 2]
TP2_2 = [1, 1, 1, 1, 1, 2, 3, 3, 3, 3]
FP2_2 = [0, 0, 0, 0, 0, 0, 0, 1, 1, 1]
FN2_2 = [2, 2, 2, 2, 2, 1, 0, 0, 0, 0]
TP3_2 = [3, 3, 3, 3, 3, 3, 3, 3, 1, 1]
FP3_2 = [1, 1, 1, 0, 0, 0, 0, 0, 0, 0]
FN3_2 = [0, 0, 0, 0, 0, 0, 0, 0, 2, 2]
"radare2-master 75-30-80 3 70:+1 4"
TP1_3 = [4, 4, 4, 4, 3, 2, 1, 1, 1, 1]
FP1_3 = [5166, 973, 70, 3, 2, 2, 1, 1, 0, 0]
FN1_3 = [0, 0, 0, 0, 1, 2, 3, 3, 3, 3]
TP2_3 = [3, 3, 3, 3, 3, 3, 4, 4, 4, 4]
FP2_3 = [1, 1, 1, 1, 1, 2, 3, 4, 5, 6]
FN2_3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TP3_3 = [4, 4, 4, 4, 3, 3, 3, 3, 3, 3]
FP3_3 = [3, 3, 3, 3, 2, 2, 2, 2, 2, 2]
FN3_3 = [0, 0, 0, 0, 1, 1, 1, 1, 1, 1]
"hhvm 75-80-30 11 60:+3 14 45:+3 75:+1 18"
TP1_4 = [13, 13, 12, 11, 10, 10, 9, 9, 6, 3]
FP1_4 = [7795, 748, 23, 1, 0, 0, 0, 0, 0, 0]
FN1_4 = [5, 5, 6, 7, 8, 8, 9, 9, 12, 15]

TP2_4 = [9, 9, 11, 11, 11, 11, 11, 11, 11, 11]
FP2_4 = [0, 0, 1, 1, 1, 1, 1, 2, 3, 5]
FN2_4 = [9, 9, 7, 7, 7, 7, 7, 7, 7, 7]

TP3_4 = [12, 12, 12, 11, 11, 10, 10, 9, 8, 7]
FP3_4 = [2, 1, 1, 1, 0, 0, 0, 0, 0, 0]
FN3_4 = [6, 6, 6, 7, 7, 8, 8, 9, 10, 11]
"libarchive-master"
TP1_5 = [2, 2, 2, 2, 2, 2, 1, 1, 1, 1]
FP1_5 = [1224, 320, 73, 0, 0, 0, 0, 0, 0, 0]
FN1_5 = [0, 0, 0, 0, 0, 0, 1, 1, 1, 1]
TP2_5 = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
FP2_5 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FN2_5 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TP3_5 = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
FP3_5 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FN3_5 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
"libgit2-main 75-80-30 2 "
TP1_6 = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
FP1_6 = [5040, 1211, 84, 5, 0, 0, 0, 0, 0, 0]
FN1_6 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TP2_6 = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
FP2_6 = [0, 0, 0, 1, 2, 3, 5, 5, 6, 7]
FN2_6 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TP3_6 = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
FP3_6 = [7, 7, 6, 5, 3, 2, 0, 0, 0, 0]
FN3_6 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
"libav 70-80-30 36 75-80-35 34 36+4=40"
TP1_7 = [36, 36, 36, 34, 30, 27, 22, 16, 10, 3]
FP1_7 = [8016, 910, 33, 0, 0, 0, 0, 0, 0, 0]
FN1_7 = [4, 4, 4, 6, 10, 13, 18, 24, 30, 37]
TP2_7 = [27, 28, 28, 28, 29, 30, 34, 34, 34, 34]
FP2_7 = [0, 0, 0, 0, 0, 0, 0, 1, 1, 1]
FN2_7 = [13, 12, 12, 12, 11, 10, 6, 6, 6, 6]
TP3_7 = [34, 34, 34, 34, 30, 30, 30, 30, 29, 29]
FP3_7 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
FN3_7 = [6, 6, 6, 6, 10, 10, 10, 10, 11, 11]
TP1 = []
FP1 = []
FN1 = []
TP2 = []
FP2 = []
FN2 = []
TP3 = []
FP3 = []
FN3 = []
TP1_FP1 = []
TP2_FP2 = []
TP3_FP3 = []
TP1_FN1 = []
TP2_FN2 = []
TP3_FN3 = []
precision1 = []
precision2 = []
precision3 = []
recall1 = []
recall2 = []
recall3 = []
F11 = []
F12 = []
F13 = []
for item in range(0,10):
    TP1.append(TP1_1[item] +  TP1_2[item] +  TP1_2[item] + TP1_3[item] + TP1_4[item] + TP1_5[item] + TP1_6[item] + TP1_7[item] + TP1_8[item])
    FP1.append(FP1_1[item] +  FP1_2[item] +  FP1_2[item] + FP1_3[item] + FP1_4[item] + FP1_5[item] + FP1_6[item] + FP1_7[item] + FP1_8[item])
    FN1.append(FN1_1[item] +  FN1_2[item] +  FN1_2[item] + FN1_3[item] + FN1_4[item] + FN1_5[item] + FN1_6[item] + FN1_7[item] + FN1_8[item])
    TP2.append(TP2_1[item] +  TP2_2[item] +  TP2_2[item] + TP2_3[item] + TP2_4[item] + TP2_5[item] + TP2_6[item] + TP2_7[item] + TP2_8[item])
    FP2.append(FP2_1[item] +  FP2_2[item] +  FP2_2[item] + FP2_3[item] + FP2_4[item] + FP2_5[item] + FP2_6[item] + FP2_7[item] + FP2_8[item])
    FN2.append(FN2_1[item] +  FN2_2[item] +  FN2_2[item] + FN2_3[item] + FN2_4[item] + FN2_5[item] + FN2_6[item] + FN2_7[item] + FN2_8[item])
    TP3.append(TP3_1[item] +  TP3_2[item] +  TP3_2[item] + TP3_3[item] + TP3_4[item] + TP3_5[item] + TP3_6[item] + TP3_7[item] + TP3_8[item])
    FP3.append(FP3_1[item] +  FP3_2[item] +  FP3_2[item] + FP3_3[item] + FP3_4[item] + FP3_5[item] + FP3_6[item] + FP3_7[item] + FP3_8[item])
    FN3.append(FN3_1[item] +  FN3_2[item] +  FN3_2[item] + FN3_3[item] + FN3_4[item] + FN3_5[item] + FN3_6[item] + FN3_7[item] + FN3_8[item])
for item in range(0,10):
    TP1_FP1.append(TP1[item] + FP1[item])
    TP2_FP2.append(TP2[item] + FP2[item])
    TP3_FP3.append(TP3[item] + FP3[item])
    TP1_FN1.append(TP1[item] + FN1[item])
    TP2_FN2.append(TP2[item] + FN2[item])
    TP3_FN3.append(TP3[item] + FN3[item])
for item in range(0,10):
    precision1.append(round(TP1[item] / TP1_FP1[item], 3))
    precision2.append(round(TP2[item] / TP2_FP2[item], 3))
    precision3.append(round(TP3[item] / TP3_FP3[item], 3))
    recall1.append(round(TP1[item] / TP1_FN1[item], 3))
    recall2.append(round(TP2[item] / TP2_FN2[item], 3))
    recall3.append(round(TP3[item] / TP3_FN3[item], 3))
    F11.append(round((2*precision1[item]*recall1[item]) / (precision1[item]+recall1[item]), 3))
    F12.append(round((2*precision2[item]*recall2[item]) / (precision2[item]+recall2[item]), 3))
    F13.append(round((2*precision3[item]*recall3[item]) / (precision3[item]+recall3[item]), 3))

print(TP1)
print(TP1_FP1)
print(TP1)
print(TP1_FN1)
print(TP2)
print(TP2_FP2)
print(TP3)
print(TP3_FP3)
print(TP3)
print(TP3_FN3)
print(F11,F12, F13 )
print(precision1, precision2, precision3)
print(recall1, recall2, recall3)
print(recall1, recall2, recall3)
x = [55, 60, 65, 70, 75, 80, 85, 90]
x_label1 = ['Linux kernel', 'ImageMagick', 'Tcpdump', 'Radare2', 'HHVM', 'Libarchive', 'Libgit2', 'Libav']
x_label2 = ['0.00', '0.05', '0.10', '0.15', '0.20', '0.25', '0.30', '0.35', '0.40', '0.45']
y = [0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7]
z = [16, 34, 23, 19, 14, 19, 13, 24]
u = [22, 78, 49, 28, 18, 30, 18, 37]
z2 = [3828015, 7237, 6438, 6407, 11932, 9265, 9515, 9110]
u2 = [73474379, 311960, 335357, 405548, 701910, 467940, 647317, 514734]
y = list(map(lambda x,y:round(x/y,2),z,u))
y2 = list(map(lambda x,y:round(x/y,3),z2,u2))
plt.axes(yscale = "log")
# 设置标题
# plt.title("Detection results")
# 为两条坐标轴设置名称
font = {'size': 15}
#plt.xlabel("\u03BE\u2083", font)
plt.ylabel("切片对数量", font)
plt.xticks(x, x_label1,rotation=45)
# 绘柱状图
bar_width = 0.4
plt.bar(x=x, width = 3, height=u2, label='过滤前', color='LemonChiffon', alpha=0.8)
plt.bar(x=x, width = 3, height=z2,  label='过滤后', color='Coral',  alpha=0.3)
# 在左侧显示图例
plt.legend(loc="center right")


# 画折线图
ax2 = plt.twinx()
ax2.set_ylabel("过滤比例", font)
# 设置坐标轴范围
ax2.set_ylim([0, 1])
ax2.set_yticks([0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])
plt.plot(x, y2, "r", marker='.', c='crimson', ms=5, linewidth='1')
# 显示数字
for a, b in zip(x, y2):
    plt.text(a, b, b, ha='center', va='bottom', fontsize=8)
# 在右侧显示图例
#plt.legend(loc="upper right")

plt.show()