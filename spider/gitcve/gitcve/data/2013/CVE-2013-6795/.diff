diff --git a/Properties.rb b/Properties.rb
index 451f86e..1e56338 100644
--- a/Properties.rb
+++ b/Properties.rb
@@ -6,7 +6,7 @@
 COMPANY = "Rackspace Cloud"
 DESCRIPTION = "C#.NET Agent for Windows Virtual Machines"
 CLR_VERSION = 'v3.5'
-RELEASE_BUILD_NUMBER = "1.2.5.0"
+RELEASE_BUILD_NUMBER = "1.2.6.0"
 
 #Paths
 SLN_FILE = File.join(ABSOLUTE_PATH,'src','WindowsConfigurationAgent.sln')
diff --git a/README.txt b/README.txt
index 3413839..983fff7 100644
--- a/README.txt
+++ b/README.txt
@@ -6,4 +6,6 @@ C#.NET Agent for Windows Virtual Machines
 Gems needed to run rake:
 
 rake (version 0.8.6+)
-albacore (version 0.2.2)
\ No newline at end of file
+albacore (version 0.2.2)
+fileutils
+rubyzip (version 0.9.8)
\ No newline at end of file
diff --git a/src/Rackspace.Cloud.Server.Agent.DiffieHellman/Properties/AssemblyInfo.cs b/src/Rackspace.Cloud.Server.Agent.DiffieHellman/Properties/AssemblyInfo.cs
index 232b9fc..445d16c 100644
--- a/src/Rackspace.Cloud.Server.Agent.DiffieHellman/Properties/AssemblyInfo.cs
+++ b/src/Rackspace.Cloud.Server.Agent.DiffieHellman/Properties/AssemblyInfo.cs
@@ -4,4 +4,4 @@
 [assembly: AssemblyCompany("Rackspace Cloud")]
 [assembly: AssemblyProduct("Rackspace Cloud Server Agent")]
 [assembly: AssemblyCopyright("Copyright (c) 2009 2010 2011, Rackspace Cloud.  All Rights Reserved")]
-[assembly: AssemblyVersion("1.2.5.0")]
+[assembly: AssemblyVersion("1.2.6.0")]
diff --git a/src/Rackspace.Cloud.Server.Agent.Service/Properties/AssemblyInfo.cs b/src/Rackspace.Cloud.Server.Agent.Service/Properties/AssemblyInfo.cs
index 6d20450..aeeb7c9 100644
--- a/src/Rackspace.Cloud.Server.Agent.Service/Properties/AssemblyInfo.cs
+++ b/src/Rackspace.Cloud.Server.Agent.Service/Properties/AssemblyInfo.cs
@@ -4,4 +4,4 @@
 [assembly: AssemblyCompany("Rackspace Cloud")]
 [assembly: AssemblyProduct("Rackspace Cloud Server Agent")]
 [assembly: AssemblyCopyright("Copyright (c) 2009 2010 2011, Rackspace Cloud.  All Rights Reserved")]
-[assembly: AssemblyVersion("1.2.5.0")]
+[assembly: AssemblyVersion("1.2.6.0")]
diff --git a/src/Rackspace.Cloud.Server.Agent.Service/Rackspace.Cloud.Server.Agent.Service.csproj b/src/Rackspace.Cloud.Server.Agent.Service/Rackspace.Cloud.Server.Agent.Service.csproj
index 25effb6..73498a5 100644
--- a/src/Rackspace.Cloud.Server.Agent.Service/Rackspace.Cloud.Server.Agent.Service.csproj
+++ b/src/Rackspace.Cloud.Server.Agent.Service/Rackspace.Cloud.Server.Agent.Service.csproj
@@ -42,6 +42,7 @@
     <WarningLevel>4</WarningLevel>
     <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
     <CodeAnalysisRuleSet>AllRules.ruleset</CodeAnalysisRuleSet>
+    <PlatformTarget>AnyCPU</PlatformTarget>
   </PropertyGroup>
   <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
     <DebugType>pdbonly</DebugType>
@@ -52,6 +53,7 @@
     <WarningLevel>4</WarningLevel>
     <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
     <CodeAnalysisRuleSet>AllRules.ruleset</CodeAnalysisRuleSet>
+    <PlatformTarget>AnyCPU</PlatformTarget>
   </PropertyGroup>
   <ItemGroup>
     <Reference Include="StructureMap, Version=1.0.0.0, Culture=neutral, processorArchitecture=MSIL">
diff --git a/src/Rackspace.Cloud.Server.Agent.Service/ServerClass.cs b/src/Rackspace.Cloud.Server.Agent.Service/ServerClass.cs
index 6857a6d..1294493 100644
--- a/src/Rackspace.Cloud.Server.Agent.Service/ServerClass.cs
+++ b/src/Rackspace.Cloud.Server.Agent.Service/ServerClass.cs
@@ -14,8 +14,10 @@
 //    under the License.
 
 using System;
-using System.Reflection;
-using System.Timers;
+using System.Reflection;
+using System.Text;
+using System.Timers;
+using Rackspace.Cloud.Server.Agent.Commands;
 using Rackspace.Cloud.Server.Agent.Interfaces;
 using Rackspace.Cloud.Server.Common.Logging;
 using StructureMap;
@@ -38,11 +40,15 @@ public class ServerClass {
 
             _timer = new ProdTimer { Interval = TIMER_INTERVAL_IS_SIX_SECONDS };
             _timer.Elapsed(TimerElapsed);
-            _timer.Enabled = true;
+            
 
             StructureMapConfiguration.UseDefaultStructureMapConfigFile = false;
             StructureMapConfiguration.BuildInstancesOf<ITimer>().TheDefaultIs(Registry.Object(_timer));
-            IoC.Register();
+            IoC.Register();
+
+            CheckAgentUpdater();
+
+            _timer.Enabled = true;
         }
 
         public void Onstop() {
@@ -57,6 +63,32 @@ public class ServerClass {
             } catch (Exception ex) {
                 _logger.Log("Exception was : " + ex.Message + "\nStackTrace Was: " + ex.StackTrace);
             }
-        }
+        }
+
+        private void CheckAgentUpdater()
+        {
+            try
+            {
+                var minAgentUpdater = new CommandFactory().CreateCommand(Utilities.Commands.ensureminagentupdater.ToString());
+                var result = minAgentUpdater.Execute(string.Empty);
+                if (result.ExitCode == "1")
+                {
+                    var sb = new StringBuilder();
+                    if (result.Error != null)
+                    {
+                        foreach (var error in result.Error)
+                        {
+                            sb.AppendLine(error);
+                        }
+                    }
+                    
+                    throw new Exception(sb.ToString());
+                }
+            }
+            catch (Exception ex)
+            {
+                _logger.Log(string.Format("Error checking the min version of the updater and updating: {0}", ex));
+            }
+        }
     }
 }
\ No newline at end of file
diff --git a/src/Rackspace.Cloud.Server.Agent.Service/app.config b/src/Rackspace.Cloud.Server.Agent.Service/app.config
index 2c850cf..0b2ce70 100644
--- a/src/Rackspace.Cloud.Server.Agent.Service/app.config
+++ b/src/Rackspace.Cloud.Server.Agent.Service/app.config
@@ -8,6 +8,8 @@
 		<add key="RemotingUri" value="AgentUpdater"/>
 		<add key="RemotingPort" value="1984"/>
 		<add key="AgentVersionUpdatesPath" value="C:\Program Files\Rackspace\Cloud Servers\Updates\"/>
+    <add key="IpcUriHost" value="RackspaceAgentUpdaterService"/>
+    <add key="IpcUriName" value="RackspaceAgentUpdater"/>
     <!-- | separated values -->
     <add key="FirewallRoleNames" value="rax_managed|rack_connect"/>
 	</appSettings>
diff --git a/src/Rackspace.Cloud.Server.Agent.Specs/Properties/AssemblyInfo.cs b/src/Rackspace.Cloud.Server.Agent.Specs/Properties/AssemblyInfo.cs
index 232b9fc..445d16c 100644
--- a/src/Rackspace.Cloud.Server.Agent.Specs/Properties/AssemblyInfo.cs
+++ b/src/Rackspace.Cloud.Server.Agent.Specs/Properties/AssemblyInfo.cs
@@ -4,4 +4,4 @@
 [assembly: AssemblyCompany("Rackspace Cloud")]
 [assembly: AssemblyProduct("Rackspace Cloud Server Agent")]
 [assembly: AssemblyCopyright("Copyright (c) 2009 2010 2011, Rackspace Cloud.  All Rights Reserved")]
-[assembly: AssemblyVersion("1.2.5.0")]
+[assembly: AssemblyVersion("1.2.6.0")]
diff --git a/src/Rackspace.Cloud.Server.Agent.Specs/UpdaterUpdateSpec.cs b/src/Rackspace.Cloud.Server.Agent.Specs/UpdaterUpdateSpec.cs
index 4046c97..cf29e6c 100644
--- a/src/Rackspace.Cloud.Server.Agent.Specs/UpdaterUpdateSpec.cs
+++ b/src/Rackspace.Cloud.Server.Agent.Specs/UpdaterUpdateSpec.cs
@@ -4,6 +4,7 @@
 using Rackspace.Cloud.Server.Agent.Actions;
 using Rackspace.Cloud.Server.Agent.Commands;
 using Rackspace.Cloud.Server.Agent.Configuration;
+using Rackspace.Cloud.Server.Common.Configuration;
 using Rackspace.Cloud.Server.Common.Logging;
 using Rhino.Mocks;
 
@@ -25,6 +26,7 @@ public class UpdaterUpdateSpec
         private IServiceStopper _serviceStopper;
         private IServiceStarter _serviceStarter;
         private ILogger _logger;
+        private IBackupUpdater _backupUpdater;
 
         [SetUp]
         public void Setup()
@@ -41,11 +43,12 @@ public void Setup()
             _logger = MockRepository.GenerateMock<ILogger>();
             _serviceStopper = MockRepository.GenerateMock<IServiceStopper>();
             _serviceStarter = MockRepository.GenerateMock<IServiceStarter>();
+            _backupUpdater = MockRepository.GenerateMock<IBackupUpdater>();
             _agentUpdateMessageHandler = new AgentUpdateMessageHandler();
 
             _logger.Stub(x => x.Log(Arg<string>.Is.Anything));
 
-            _updaterUpdate = new UpdaterUpdate(_sleeper, _downloader, _checksumValidator, _unzipper, _fileCopier, _finalizer, _serviceStopper, _serviceStarter, _connectionChecker, _agentUpdateMessageHandler, _logger);
+            _updaterUpdate = new UpdaterUpdate(_sleeper, _downloader, _checksumValidator, _unzipper, _fileCopier, _finalizer, _serviceStopper, _serviceStarter, _connectionChecker, _agentUpdateMessageHandler, _logger, _backupUpdater);
 
         }
 
@@ -70,15 +73,29 @@ public void should_update_xentools()
             _updaterUpdate.Execute(_agentUpdateInfo);
         }
 
-        [Test]
-        public void should_throw_UnsuccessfulCommandExecutionException_if_connection_to_updater_service_fails()
-        {
-            _sleeper.Expect(x => x.Sleep(Arg<int>.Is.Anything));
-            _connectionChecker.Stub(x => x.Check())
-                .Throw(new UnsuccessfulCommandExecutionException("error message", new ExecutableResult { ExitCode = "1" }));
-            var result = _updaterUpdate.Execute(_agentUpdateInfo);
-            Assert.That(result.ExitCode, Is.EqualTo("1"));
-            Assert.That(result.Error[0], Is.EqualTo("Update failed"));
-        }
+        //[Test]
+        //public void should_throw_UnsuccessfulCommandExecutionException_if_connection_to_updater_service_fails()
+        //{
+        //    _sleeper.Expect(x => x.Sleep(Arg<int>.Is.Anything));
+        //    _connectionChecker.Stub(x => x.Check())
+        //        .Throw(new UnsuccessfulCommandExecutionException("error message", new ExecutableResult { ExitCode = "1" }));
+        //    var result = _updaterUpdate.Execute(_agentUpdateInfo);
+        //    Assert.That(result.ExitCode, Is.EqualTo("1"));
+        //    Assert.That(result.Error[0], Is.EqualTo("Update failed"));
+        //}
+
+        //[Test]
+        //public void GetChecksum()
+        //{
+        //    ChecksumValidator val = new ChecksumValidator(_logger);
+        //    val.Validate("", @"C:\Agent Services\Single Deploy 1.2.6.0\AgentService.zip");
+        //}
+
+        //[Test]
+        //public void ExtractFile()
+        //{
+        //    new ExtractEmbededResource().Extract(@"C:\Agent Services\Testing\", Constants.UpdaterEmbeddedReleasePackagePath, Constants.UpdaterReleasePackageName);
+        //    new Unzipper(_logger).Unzip( @"C:\Agent Services\Testing\" + Constants.UpdaterReleasePackageName, @"C:\Agent Services\Testing\updater", "");
+        //}
     }
 }
diff --git a/src/Rackspace.Cloud.Server.Agent.Specs/XentoolsUpdateSpec.cs b/src/Rackspace.Cloud.Server.Agent.Specs/XentoolsUpdateSpec.cs
index b3505b8..d51c259 100644
--- a/src/Rackspace.Cloud.Server.Agent.Specs/XentoolsUpdateSpec.cs
+++ b/src/Rackspace.Cloud.Server.Agent.Specs/XentoolsUpdateSpec.cs
@@ -90,15 +90,15 @@ public void should_not_restart_vss_provider_if_service_does_not_exist()
             _mockRepo.VerifyAll();
         }
 
-        [Test]
-        public void should_throw_UnsuccessfulCommandExecutionException_if_connection_to_updater_service_fails()
-        {
-            _sleeper.Expect(x => x.Sleep(Arg<int>.Is.Anything));
-            _connectionChecker.Stub(x => x.Check())
-                .Throw(new UnsuccessfulCommandExecutionException("error message", new ExecutableResult { ExitCode = "1" }));
-            var result = _xentoolsUpdate.Execute(_agentUpdateInfo);
-            Assert.That(result.ExitCode, Is.EqualTo("1"));
-            Assert.That(result.Error[0], Is.EqualTo("Update failed"));
-        }
+        //[Test]
+        //public void should_throw_UnsuccessfulCommandExecutionException_if_connection_to_updater_service_fails()
+        //{
+        //    _sleeper.Expect(x => x.Sleep(Arg<int>.Is.Anything));
+        //    _connectionChecker.Stub(x => x.Check())
+        //        .Throw(new UnsuccessfulCommandExecutionException("error message", new ExecutableResult { ExitCode = "1" }));
+        //    var result = _xentoolsUpdate.Execute(_agentUpdateInfo);
+        //    Assert.That(result.ExitCode, Is.EqualTo("1"));
+        //    Assert.That(result.Error[0], Is.EqualTo("Update failed"));
+        //}
     }
 }
\ No newline at end of file
diff --git a/src/Rackspace.Cloud.Server.Agent.UpdaterService/AgentUpdater.cs b/src/Rackspace.Cloud.Server.Agent.UpdaterService/AgentUpdater.cs
index 78f9c20..3a04dc0 100644
--- a/src/Rackspace.Cloud.Server.Agent.UpdaterService/AgentUpdater.cs
+++ b/src/Rackspace.Cloud.Server.Agent.UpdaterService/AgentUpdater.cs
@@ -35,7 +35,7 @@ public class AgentUpdater : MarshalByRefObject, IAgentUpdater {
             _agentUpdateInfo = agentUpdateInfo;
             _logger.Log(String.Format("Received from Agent the following data:\r\nURL:{0}\r\nCHECKSUM:{1}, will resume in a minute", _agentUpdateInfo.url, _agentUpdateInfo.signature));
 
-            new Timer(TimerElapsed,null,60000,0);
+            new Timer(TimerElapsed,null,10000,0);
         }
 
         private void TimerElapsed(object sender) {
diff --git a/src/Rackspace.Cloud.Server.Agent.UpdaterService/App.config b/src/Rackspace.Cloud.Server.Agent.UpdaterService/App.config
index 24077c2..d453ab4 100644
--- a/src/Rackspace.Cloud.Server.Agent.UpdaterService/App.config
+++ b/src/Rackspace.Cloud.Server.Agent.UpdaterService/App.config
@@ -9,6 +9,8 @@
     <add key="AgentVersionUpdatesPath" value="C:\Program Files\Rackspace\Cloud Servers\Updates\"/>
     <add key="RemotingPort" value="1984"/>
     <add key="RemotingUri" value="AgentUpdater"/>
+    <add key="IpcUriHost" value="RackspaceAgentUpdaterService"/>
+    <add key="IpcUriName" value="RackspaceAgentUpdater"/>
   </appSettings>
   <log4net>
     <appender name="FileAppender" type="log4net.Appender.RollingFileAppender">
diff --git a/src/Rackspace.Cloud.Server.Agent.UpdaterService/HostUpdater.cs b/src/Rackspace.Cloud.Server.Agent.UpdaterService/HostUpdater.cs
index c09ede3..479eef2 100644
--- a/src/Rackspace.Cloud.Server.Agent.UpdaterService/HostUpdater.cs
+++ b/src/Rackspace.Cloud.Server.Agent.UpdaterService/HostUpdater.cs
@@ -13,10 +13,13 @@
 //    License for the specific language governing permissions and limitations
 //    under the License.
 
+using System.Collections;
 using System.Reflection;
 using System.Runtime.Remoting;
-using System.Runtime.Remoting.Channels;
-using System.Runtime.Remoting.Channels.Tcp;
+using System.Runtime.Remoting.Channels;
+using System.Runtime.Remoting.Channels.Ipc;
+using System.Runtime.Remoting.Channels.Tcp;
+using System.Security.Principal;
 using Rackspace.Cloud.Server.Common.Configuration;
 using Rackspace.Cloud.Server.Common.Logging;
 using StructureMap;
@@ -40,17 +43,30 @@ public class HostUpdater {
         }
 
         private void ConfigureRemotingHost() {
-            SetTcpChannel();
+            SetIpcChannel();
             SetRemotingType();
         }
 
-        private void SetTcpChannel() {
-            ChannelServices.RegisterChannel(new TcpChannel(SvcConfiguration.RemotingPort), false);
+        private void SetIpcChannel() {
+            // Get SID code for the Built in Administrators group
+            SecurityIdentifier sid = new SecurityIdentifier(WellKnownSidType.LocalSystemSid, null);
+            // Get the NT account related to the SID
+            NTAccount account = sid.Translate(typeof(NTAccount)) as NTAccount;
+
+            IDictionary sProperties = new Hashtable();
+            sProperties["portName"] = SvcConfiguration.IpcUriHost;
+            sProperties["authorizedGroup"] = account.Value;
+
+            BinaryServerFormatterSinkProvider serverProvider = new BinaryServerFormatterSinkProvider();
+
+            IpcServerChannel channel = new IpcServerChannel(sProperties, serverProvider);
+            ChannelServices.RegisterChannel(channel, true);
+
         }
 
         private void SetRemotingType() {
             RemotingConfiguration.RegisterWellKnownServiceType(
-                typeof(AgentUpdater), SvcConfiguration.RemotingUri, WellKnownObjectMode.SingleCall);
+                typeof(AgentUpdater), SvcConfiguration.IpcUriName, WellKnownObjectMode.SingleCall);
         }
 
         public void OnStop() {
diff --git a/src/Rackspace.Cloud.Server.Agent.UpdaterService/Properties/AssemblyInfo.cs b/src/Rackspace.Cloud.Server.Agent.UpdaterService/Properties/AssemblyInfo.cs
index 6d20450..aeeb7c9 100644
--- a/src/Rackspace.Cloud.Server.Agent.UpdaterService/Properties/AssemblyInfo.cs
+++ b/src/Rackspace.Cloud.Server.Agent.UpdaterService/Properties/AssemblyInfo.cs
@@ -4,4 +4,4 @@
 [assembly: AssemblyCompany("Rackspace Cloud")]
 [assembly: AssemblyProduct("Rackspace Cloud Server Agent")]
 [assembly: AssemblyCopyright("Copyright (c) 2009 2010 2011, Rackspace Cloud.  All Rights Reserved")]
-[assembly: AssemblyVersion("1.2.5.0")]
+[assembly: AssemblyVersion("1.2.6.0")]
diff --git a/src/Rackspace.Cloud.Server.Agent.UpdaterService/Rackspace.Cloud.Server.Agent.UpdaterService.csproj b/src/Rackspace.Cloud.Server.Agent.UpdaterService/Rackspace.Cloud.Server.Agent.UpdaterService.csproj
index 8e3fa31..2e6ed0d 100644
--- a/src/Rackspace.Cloud.Server.Agent.UpdaterService/Rackspace.Cloud.Server.Agent.UpdaterService.csproj
+++ b/src/Rackspace.Cloud.Server.Agent.UpdaterService/Rackspace.Cloud.Server.Agent.UpdaterService.csproj
@@ -42,6 +42,7 @@
     <WarningLevel>4</WarningLevel>
     <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
     <CodeAnalysisRuleSet>AllRules.ruleset</CodeAnalysisRuleSet>
+    <PlatformTarget>AnyCPU</PlatformTarget>
   </PropertyGroup>
   <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
     <DebugType>pdbonly</DebugType>
@@ -52,6 +53,7 @@
     <WarningLevel>4</WarningLevel>
     <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
     <CodeAnalysisRuleSet>AllRules.ruleset</CodeAnalysisRuleSet>
+    <PlatformTarget>AnyCPU</PlatformTarget>
   </PropertyGroup>
   <ItemGroup>
     <Reference Include="ICSharpCode.SharpZipLib, Version=0.85.5.452, Culture=neutral, PublicKeyToken=1b03e6acf1164f73, processorArchitecture=MSIL">
diff --git a/src/Rackspace.Cloud.Server.Agent/Actions/BackupUpdater.cs b/src/Rackspace.Cloud.Server.Agent/Actions/BackupUpdater.cs
new file mode 100644
index 0000000..b895971
--- /dev/null
+++ b/src/Rackspace.Cloud.Server.Agent/Actions/BackupUpdater.cs
@@ -0,0 +1,60 @@
+﻿// Copyright 2011 OpenStack LLC.
+// All Rights Reserved.
+//
+//    Licensed under the Apache License, Version 2.0 (the "License"); you may
+//    not use this file except in compliance with the License. You may obtain
+//    a copy of the License at
+//
+//         http://www.apache.org/licenses/LICENSE-2.0
+//
+//    Unless required by applicable law or agreed to in writing, software
+//    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+//    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+//    License for the specific language governing permissions and limitations
+//    under the License.
+
+
+using System;
+using System.Collections.Generic;
+using System.IO;
+using System.Text;
+using Rackspace.Cloud.Server.Common.AgentUpdate;
+using Rackspace.Cloud.Server.Common.Configuration;
+using Rackspace.Cloud.Server.Common.Logging;
+
+namespace Rackspace.Cloud.Server.Agent.Actions
+{
+    public interface IBackupUpdater
+    {
+        void Backup(string sourcePath, string backupPath);
+        void Restore(string targetPath, string backupPath);
+    }
+
+    public class BackupUpdater : IBackupUpdater
+    {
+        private readonly ILogger _logger;
+        private readonly IFileCopier _fileCopier;
+
+        public BackupUpdater(ILogger logger, IFileCopier fileCopier)
+        {
+            _logger = logger;
+            _fileCopier = fileCopier;
+        }
+
+        public void Backup(string sourcePath, string backupPath)
+        {
+            if (Directory.Exists(backupPath))
+            {
+                Directory.Delete(backupPath, true);
+            }
+            Directory.CreateDirectory(backupPath);
+
+            _fileCopier.CopyFiles(sourcePath, backupPath, _logger);
+        }
+
+        public void Restore(string targetPath, string backupPath)
+        {
+            _fileCopier.CopyFiles(backupPath, targetPath, _logger);
+        }
+    }
+}
diff --git a/src/Rackspace.Cloud.Server.Agent/Actions/ExtractEmbededResource.cs b/src/Rackspace.Cloud.Server.Agent/Actions/ExtractEmbededResource.cs
new file mode 100644
index 0000000..5380fcc
--- /dev/null
+++ b/src/Rackspace.Cloud.Server.Agent/Actions/ExtractEmbededResource.cs
@@ -0,0 +1,48 @@
+﻿// Copyright 2011 OpenStack LLC.
+// All Rights Reserved.
+//
+//    Licensed under the Apache License, Version 2.0 (the "License"); you may
+//    not use this file except in compliance with the License. You may obtain
+//    a copy of the License at
+//
+//         http://www.apache.org/licenses/LICENSE-2.0
+//
+//    Unless required by applicable law or agreed to in writing, software
+//    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+//    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+//    License for the specific language governing permissions and limitations
+//    under the License.
+
+
+using System.IO;
+
+namespace Rackspace.Cloud.Server.Agent.Actions
+{
+    public interface IExtractEmbededResource
+    {
+        void Extract(string outputDir, string resourceLocation, string fileName);
+    }
+
+    public class ExtractEmbededResource : IExtractEmbededResource
+    {
+        public void Extract(string outputDir, string resourceLocation, string fileName)
+        {
+            if (!Directory.Exists(outputDir))
+            {
+                Directory.CreateDirectory(outputDir);
+            }
+
+            using (System.IO.Stream stream = System.Reflection.Assembly.GetExecutingAssembly().GetManifestResourceStream(resourceLocation))
+            {
+                using (System.IO.FileStream fileStream = new System.IO.FileStream(System.IO.Path.Combine(outputDir, fileName), System.IO.FileMode.Create))
+                {
+                    for (int i = 0; i < stream.Length; i++)
+                    {
+                        fileStream.WriteByte((byte)stream.ReadByte());
+                    }
+                    fileStream.Close();
+                }
+            }
+        }
+    }
+}
diff --git a/src/Rackspace.Cloud.Server.Agent/Actions/ServiceStarter.cs b/src/Rackspace.Cloud.Server.Agent/Actions/ServiceStarter.cs
index 559a80f..816cd36 100644
--- a/src/Rackspace.Cloud.Server.Agent/Actions/ServiceStarter.cs
+++ b/src/Rackspace.Cloud.Server.Agent/Actions/ServiceStarter.cs
@@ -34,20 +34,27 @@ public ServiceStarter(ILogger logger)
         }
 
         public void Start(string serviceName)
-        {
-            _logger.Log(String.Format("Starting '{0}' Service ...", serviceName));
-            var serviceController = new ServiceController(serviceName);
-            if (serviceController.Status == ServiceControllerStatus.Running)
-            {
-                _logger.Log(String.Format("'{0}' service already started.", serviceName));
-                return;
+        {
+            try
+            {
+                _logger.Log(String.Format("Starting '{0}' Service ...", serviceName));
+                var serviceController = new ServiceController(serviceName);
+                if (serviceController.Status == ServiceControllerStatus.Running)
+                {
+                    _logger.Log(String.Format("'{0}' service already started.", serviceName));
+                    return;
+                }
+
+                serviceController.Start();
+                serviceController.WaitForStatus(ServiceControllerStatus.Running);
+
+                serviceController.Close();
+                _logger.Log(String.Format("Service '{0}' started and now running ...", serviceName));
+            }
+            catch (Exception ex)
+            {
+                _logger.Log(string.Format("An error occured trying to start the {0} service: {1}", serviceName, ex));
             }
-
-            serviceController.Start();
-            serviceController.WaitForStatus(ServiceControllerStatus.Running);
-
-            serviceController.Close();
-            _logger.Log(String.Format("Service '{0}' started and now running ...", serviceName));
         }
     }
 }
\ No newline at end of file
diff --git a/src/Rackspace.Cloud.Server.Agent/AgentUpdateMessageSender.cs b/src/Rackspace.Cloud.Server.Agent/AgentUpdateMessageSender.cs
index fe614bb..f36f700 100644
--- a/src/Rackspace.Cloud.Server.Agent/AgentUpdateMessageSender.cs
+++ b/src/Rackspace.Cloud.Server.Agent/AgentUpdateMessageSender.cs
@@ -13,38 +13,74 @@
 //    License for the specific language governing permissions and limitations
 //    under the License.
 
-using System;
-using Rackspace.Cloud.Server.Agent.Configuration;
-using Rackspace.Cloud.Server.Agent.Interfaces;
-using Rackspace.Cloud.Server.Common.AgentUpdate;
-using Rackspace.Cloud.Server.Common.Communication;
-using Rackspace.Cloud.Server.Common.Configuration;
-
-namespace Rackspace.Cloud.Server.Agent {
-    public class AgentUpdateMessageSender : IAgentUpdateMessageSender {
-        public void Send(AgentUpdateInfo agentUpdateInfo) {
-            IAgentUpdater agentUpdater;
-            try {
-                ConnectToRemotingHost(out agentUpdater);
-                agentUpdater.DoUpdate(agentUpdateInfo);
-            }
-            catch (Exception ex) {
-                throw new UnsuccessfulCommandExecutionException(
-                    String.Format("UPDATE FAILED: {0}", ex.Message),
-                    new ExecutableResult { ExitCode = "1" });
-            }
-        }
-
-        private void ConnectToRemotingHost(out IAgentUpdater agentUpdater) {
-            agentUpdater = (IAgentUpdater)Activator.GetObject(typeof(IAgentUpdater), BuildRemotingUri());
-        }
-
-        private string BuildRemotingUri()
-        {
-            return String.Format("tcp://{0}:{1}/{2}",
-                                 SvcConfiguration.RemotingUriHost,
-                                 SvcConfiguration.RemotingPort,
-                                 SvcConfiguration.RemotingUri);
-        }
-    }
-}
+using System;
+using System.Runtime.Remoting;
+using System.Runtime.Remoting.Channels;
+using System.Runtime.Remoting.Channels.Ipc;
+using Rackspace.Cloud.Server.Agent.Configuration;
+using Rackspace.Cloud.Server.Agent.Interfaces;
+using Rackspace.Cloud.Server.Common.AgentUpdate;
+using Rackspace.Cloud.Server.Common.Communication;
+using Rackspace.Cloud.Server.Common.Configuration;
+using Rackspace.Cloud.Server.Common.Logging;
+
+namespace Rackspace.Cloud.Server.Agent
+{
+    public class AgentUpdateMessageSender : IAgentUpdateMessageSender
+    {
+        private readonly ILogger _logger;
+        public AgentUpdateMessageSender(ILogger logger)
+        {
+            _logger = logger;
+        }
+
+        public void Send(AgentUpdateInfo agentUpdateInfo)
+        {
+            IAgentUpdater agentUpdater;
+            try
+            {
+                ConnectToRemotingHost(out agentUpdater);
+                agentUpdater.DoUpdate(agentUpdateInfo);
+            }
+            catch (Exception ex)
+            {
+                _logger.Log(string.Format("Error connecting to the Updater service: {0}", ex));
+                throw new UnsuccessfulCommandExecutionException(
+                    String.Format("UPDATE FAILED: {0}", ex.Message),
+                    new ExecutableResult { ExitCode = "1" });
+            }
+        }
+
+        private void ConnectToRemotingHost(out IAgentUpdater agentUpdater)
+        {
+            try
+            {
+                //Try connecting to the IPC server
+                IpcClientChannel clientChannel = new IpcClientChannel();
+                clientChannel.IsSecured = true;
+                ChannelServices.RegisterChannel(clientChannel);
+
+                agentUpdater = (IAgentUpdater)Activator.GetObject(typeof(IAgentUpdater), BuildIpcRemotingUri());
+                agentUpdater.Equals(null);
+            }
+            catch (RemotingException rex)
+            {
+                _logger.Log(string.Format("Error connecting to the Updater service via IPC: {0}", rex));
+
+                //IPC Server connection failed, try connecting to the TCP server if it exists, allow the exception to bubble up if it fails.
+                agentUpdater = (IAgentUpdater)Activator.GetObject(typeof(IAgentUpdater), BuildTcpRemotingUri());
+                agentUpdater.Equals(null);
+            }
+        }
+
+        private string BuildIpcRemotingUri()
+        {
+            return String.Format("ipc://{0}/{1}", SvcConfiguration.IpcUriHost, SvcConfiguration.IpcUriName);
+        }
+
+        private string BuildTcpRemotingUri()
+        {
+            return string.Format("tcp://{0}:{1}/{2}", SvcConfiguration.RemotingUriHost, SvcConfiguration.RemotingPort, SvcConfiguration.RemotingUri);
+        }
+    }
+}
diff --git a/src/Rackspace.Cloud.Server.Agent/Commands/AgentUpdate.cs b/src/Rackspace.Cloud.Server.Agent/Commands/AgentUpdate.cs
index 979e36b..36e4bcb 100644
--- a/src/Rackspace.Cloud.Server.Agent/Commands/AgentUpdate.cs
+++ b/src/Rackspace.Cloud.Server.Agent/Commands/AgentUpdate.cs
@@ -39,7 +39,6 @@ public class AgentUpdate : IExecutableCommand {
         }
 
         public ExecutableResult Execute(string value) {
-            _connectionChecker.Check();
             _logger.Log("Agent Update value: " + value);
             var agentUpdateInfo = _agentUpdateMessageHandler.Handle(value);
 
diff --git a/src/Rackspace.Cloud.Server.Agent/Commands/EnsureMinAgentUpdater.cs b/src/Rackspace.Cloud.Server.Agent/Commands/EnsureMinAgentUpdater.cs
new file mode 100644
index 0000000..e4e26b3
--- /dev/null
+++ b/src/Rackspace.Cloud.Server.Agent/Commands/EnsureMinAgentUpdater.cs
@@ -0,0 +1,120 @@
+﻿// Copyright 2011 OpenStack LLC.
+// All Rights Reserved.
+//
+//    Licensed under the Apache License, Version 2.0 (the "License"); you may
+//    not use this file except in compliance with the License. You may obtain
+//    a copy of the License at
+//
+//         http://www.apache.org/licenses/LICENSE-2.0
+//
+//    Unless required by applicable law or agreed to in writing, software
+//    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+//    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+//    License for the specific language governing permissions and limitations
+//    under the License.
+
+using System;
+using System.Collections.Generic;
+using System.Text;
+using Rackspace.Cloud.Server.Agent.Actions;
+using Rackspace.Cloud.Server.Agent.Configuration;
+using Rackspace.Cloud.Server.Agent.Interfaces;
+using Rackspace.Cloud.Server.Agent.Utilities;
+using Rackspace.Cloud.Server.Common.Configuration;
+using Rackspace.Cloud.Server.Common.Logging;
+
+namespace Rackspace.Cloud.Server.Agent.Commands
+{
+    public class EnsureMinAgentUpdater : IExecutableCommand
+    {
+        private readonly ISleeper _sleeper;
+        private readonly IUnzipper _unzipper;
+        private readonly IFileCopier _fileCopier;
+        private readonly IFinalizer _finalizer;
+        private readonly IServiceStopper _serviceStopper;
+        private readonly IServiceStarter _serviceStarter;
+        private readonly ILogger _logger;
+        private readonly IBackupUpdater _backupUpdater;
+        private readonly IExtractEmbededResource _extractEmbededResource;
+        private readonly IVersionChecker _versionChecker;
+
+        public EnsureMinAgentUpdater(ISleeper sleeper, IUnzipper unzipper, IFileCopier fileCopier, IFinalizer finalizer, IServiceStopper serviceStopper, IServiceStarter serviceStarter, ILogger logger, IBackupUpdater backupUpdater, IExtractEmbededResource extractEmbededResource, IVersionChecker versionChecker)
+        {
+            _sleeper = sleeper;
+            _unzipper = unzipper;
+            _fileCopier = fileCopier;
+            _finalizer = finalizer;
+            _serviceStopper = serviceStopper;
+            _serviceStarter = serviceStarter;
+            _logger = logger;
+            _backupUpdater = backupUpdater;
+            _extractEmbededResource = extractEmbededResource;
+            _versionChecker = versionChecker;
+        }
+
+        public ExecutableResult Execute(string value)
+        {
+            var backupCreated = false;
+            try
+            {
+                Statics.ShouldPollXenStore = false;
+                string versionNumber = _versionChecker.Check(Version.AGENT_UPDATER_PATH);
+                System.Version version;
+
+                try
+                {
+                    version = new System.Version(versionNumber);
+                }
+                catch (Exception ex)
+                {
+                    _logger.Log(string.Format("Version check failed, installing embedded updater.  Version Reported: {0}  Stack Trace: {1}", versionNumber, ex));
+                    version = new System.Version("0.0.0.0");
+                }
+
+                if (version < UpdaterFiles.Updater.MinimumVersion)
+                {
+                    _logger.Log(String.Format("Updating the Agent Updater... \r\nWill resume in 10 seconds..."));
+                    _sleeper.Sleep(10);
+                    _extractEmbededResource.Extract(SvcConfiguration.AgentVersionUpdatesPath, Constants.UpdaterEmbeddedReleasePackagePath, Constants.UpdaterReleasePackageName);
+                    _logger.Log("Waiting to unzip package.");
+                    _unzipper.Unzip(Constants.UpdaterReleasePackage, Constants.UpdaterUnzipPath, "");
+                    _serviceStopper.Stop("RackspaceCloudServersAgentUpdater");
+                    _backupUpdater.Backup(Constants.UpdaterPath, Constants.UpdaterBackupPath);
+                    backupCreated = true;
+                    _fileCopier.CopyFiles(Constants.UpdaterUnzipPath, Constants.UpdaterPath, _logger);
+                }
+                else
+                {
+                    _logger.Log(string.Format("Agent Updater Version: {0}  detected, not updating updater.", version));    
+                }
+
+                return new ExecutableResult();
+            }
+            catch (Exception ex)
+            {
+                try
+                {
+                    if (backupCreated)
+                    {
+                        _serviceStopper.Stop("RackspaceCloudServersAgentUpdater");
+                        _backupUpdater.Restore(Constants.UpdaterPath, Constants.UpdaterBackupPath);
+                    }
+                }
+                catch (Exception exRestore)
+                {
+                    _logger.Log(String.Format("Exception was : {0}\nStackTrace Was: {1}", exRestore.Message, exRestore.StackTrace));
+                }
+
+                _logger.Log(String.Format("Exception was : {0}\nStackTrace Was: {1}", ex.Message, ex.StackTrace));
+                return new ExecutableResult { Error = new List<string> { "Update failed" }, ExitCode = "1" };
+            }
+            finally
+            {
+                Statics.ShouldPollXenStore = true;
+                _serviceStarter.Start("RackspaceCloudServersAgentUpdater");
+                _finalizer.Finalize(new List<string> { Constants.UpdaterUnzipPath, Constants.UpdaterReleasePackage });
+            }
+        }
+
+    }
+}
diff --git a/src/Rackspace.Cloud.Server.Agent/Commands/UpdaterUpdate.cs b/src/Rackspace.Cloud.Server.Agent/Commands/UpdaterUpdate.cs
index 1437425..ca50036 100644
--- a/src/Rackspace.Cloud.Server.Agent/Commands/UpdaterUpdate.cs
+++ b/src/Rackspace.Cloud.Server.Agent/Commands/UpdaterUpdate.cs
@@ -35,9 +35,10 @@ public class UpdaterUpdate : IExecutableCommand
         private readonly IServiceStarter _serviceStarter;
         private readonly IConnectionChecker _connectionChecker;
         private readonly IAgentUpdateMessageHandler _agentUpdateMessageHandler;
-        private readonly ILogger _logger;
-
-        public UpdaterUpdate(ISleeper sleeper, IDownloader downloader, IChecksumValidator checksumValidator, IUnzipper unzipper, IFileCopier fileCopier, IFinalizer finalizer, IServiceStopper serviceStopper, IServiceStarter serviceStarter, IConnectionChecker connectionChecker, IAgentUpdateMessageHandler agentUpdateMessageHandler, ILogger logger)
+        private readonly ILogger _logger;
+        private readonly IBackupUpdater _backupUpdater;
+
+        public UpdaterUpdate(ISleeper sleeper, IDownloader downloader, IChecksumValidator checksumValidator, IUnzipper unzipper, IFileCopier fileCopier, IFinalizer finalizer, IServiceStopper serviceStopper, IServiceStarter serviceStarter, IConnectionChecker connectionChecker, IAgentUpdateMessageHandler agentUpdateMessageHandler, ILogger logger, IBackupUpdater backupUpdater)
         {
             _sleeper = sleeper;
             _downloader = downloader;
@@ -49,36 +50,51 @@ public UpdaterUpdate(ISleeper sleeper, IDownloader downloader, IChecksumValidato
             _serviceStarter = serviceStarter;
             _connectionChecker = connectionChecker;
             _agentUpdateMessageHandler = agentUpdateMessageHandler;
-            _logger = logger;
+            _logger = logger;
+            _backupUpdater = backupUpdater;
         }
 
-        public ExecutableResult Execute(string value)
-        {
+        public ExecutableResult Execute(string value)
+        {
+            var backupCreated = false;
             try
             {
                 Statics.ShouldPollXenStore = false;
                 _logger.Log(String.Format("Updater Update value: {0}\r\nWill resume in 60 seconds", value));
                 _sleeper.Sleep(60);
-                _connectionChecker.Check();
                 var agentUpdateInfo = _agentUpdateMessageHandler.Handle(value);
                 _downloader.Download(agentUpdateInfo.url, Constants.UpdaterReleasePackage);
                 _checksumValidator.Validate(agentUpdateInfo.signature, Constants.UpdaterReleasePackage);
                 _unzipper.Unzip(Constants.UpdaterReleasePackage, Constants.UpdaterUnzipPath, "");
                 _serviceStopper.Stop("RackspaceCloudServersAgentUpdater");
-                _fileCopier.CopyFiles(Constants.UpdaterUnzipPath, Constants.UpdaterPath, _logger);
-                _serviceStarter.Start("RackspaceCloudServersAgentUpdater");
-                Statics.ShouldPollXenStore = true;
+                _backupUpdater.Backup(Constants.UpdaterPath, Constants.UpdaterBackupPath);
+                backupCreated = true;
+                _fileCopier.CopyFiles(Constants.UpdaterUnzipPath, Constants.UpdaterPath, _logger);
                 return new ExecutableResult();
             }
             catch (Exception ex)
-            {
+            {
+                try
+                {
+                    if (backupCreated)
+                    {
+                        _serviceStopper.Stop("RackspaceCloudServersAgentUpdater");
+                        _backupUpdater.Restore(Constants.UpdaterPath, Constants.UpdaterBackupPath);
+                    }
+                }
+                catch (Exception exRestore)
+                {
+                    _logger.Log(String.Format("Exception was : {0}\nStackTrace Was: {1}", exRestore.Message, exRestore.StackTrace));
+                }
 
                 _logger.Log(String.Format("Exception was : {0}\nStackTrace Was: {1}", ex.Message, ex.StackTrace));
                 return new ExecutableResult { Error = new List<string> { "Update failed" }, ExitCode = "1" };
             }
             finally
-            {
-                _finalizer.Finalize(new List<string> { Constants.UpdaterUnzipPath, Constants.UpdaterReleasePackage });
+            {
+                Statics.ShouldPollXenStore = true;
+                _serviceStarter.Start("RackspaceCloudServersAgentUpdater");
+                _finalizer.Finalize(new List<string> { Constants.UpdaterUnzipPath, Constants.UpdaterReleasePackage });
             }
         }
 
diff --git a/src/Rackspace.Cloud.Server.Agent/Commands/XentoolsUpdate.cs b/src/Rackspace.Cloud.Server.Agent/Commands/XentoolsUpdate.cs
index b1b346f..326e55e 100644
--- a/src/Rackspace.Cloud.Server.Agent/Commands/XentoolsUpdate.cs
+++ b/src/Rackspace.Cloud.Server.Agent/Commands/XentoolsUpdate.cs
@@ -59,7 +59,6 @@ public ExecutableResult Execute(string value)
                 Statics.ShouldPollXenStore = false;
                 _logger.Log(String.Format("XenTools Update value: {0}\r\nWill resume in 60 seconds", value));
                 _sleeper.Sleep(60);
-                _connectionChecker.Check();
                 var agentUpdateInfo = _agentUpdateMessageHandler.Handle(value);
                 _downloader.Download(agentUpdateInfo.url, Constants.XenToolsReleasePackage);
                 _checksumValidator.Validate(agentUpdateInfo.signature, Constants.XenToolsReleasePackage);
@@ -72,7 +71,6 @@ public ExecutableResult Execute(string value)
                 _serviceRestarter.Restart("xensvc");
                 if (_serviceRestarter.ServiceExists("XenServerVssProvider"))
                     _serviceRestarter.Restart("XenServerVssProvider");
-                Statics.ShouldPollXenStore = true;
                 return new ExecutableResult();
             }
             catch (Exception ex)
@@ -81,7 +79,8 @@ public ExecutableResult Execute(string value)
                 return new ExecutableResult { Error = new List<string> { "Update failed" }, ExitCode = "1" };
             }
             finally
-            {
+            {
+                Statics.ShouldPollXenStore = true;
                 _finalizer.Finalize(new List<string>{Constants.XenToolsUnzipPath,Constants.XenToolsReleasePackage});
             }
         }
diff --git a/src/Rackspace.Cloud.Server.Agent/Constants.cs b/src/Rackspace.Cloud.Server.Agent/Constants.cs
index 142e6ea..c5deb60 100644
--- a/src/Rackspace.Cloud.Server.Agent/Constants.cs
+++ b/src/Rackspace.Cloud.Server.Agent/Constants.cs
@@ -52,10 +52,13 @@ public static class Constants {
 
         public static readonly string XenToolsReleasePackage = SvcConfiguration.AgentVersionUpdatesPath + "xensetup.exe.zip";
         public static readonly string XenToolsUnzipPath = SvcConfiguration.AgentVersionUpdatesPath + "xentools";
-        public static readonly string XenToolsSetupExecutablePath = XenToolsUnzipPath + @"\xensetup.exe";
-
-        public static readonly string UpdaterReleasePackage = SvcConfiguration.AgentVersionUpdatesPath + "UpdateService.zip";
+        public static readonly string XenToolsSetupExecutablePath = XenToolsUnzipPath + @"\xensetup.exe";
+
         public static readonly string UpdaterUnzipPath = SvcConfiguration.AgentVersionUpdatesPath + "updater";
-        public static readonly string UpdaterPath = @"C:\Program Files\Rackspace\Cloud Servers\AgentUpdater";
+        public static readonly string UpdaterBackupPath = SvcConfiguration.AgentVersionUpdatesPath + "current_updater";
+        public static readonly string UpdaterPath = @"C:\Program Files\Rackspace\Cloud Servers\AgentUpdater";
+        public static readonly string UpdaterReleasePackageName = "UpdateService.zip";
+        public static readonly string UpdaterEmbeddedReleasePackagePath = "Rackspace.Cloud.Server.Agent.UpdaterFiles.UpdateService.zip";
+        public static readonly string UpdaterReleasePackage = SvcConfiguration.AgentVersionUpdatesPath + UpdaterReleasePackageName;
     }
 }
diff --git a/src/Rackspace.Cloud.Server.Agent/IoC.cs b/src/Rackspace.Cloud.Server.Agent/IoC.cs
index bf3a205..5f9bb24 100644
--- a/src/Rackspace.Cloud.Server.Agent/IoC.cs
+++ b/src/Rackspace.Cloud.Server.Agent/IoC.cs
@@ -72,7 +72,9 @@ public class IoC {
             StructureMapConfiguration.BuildInstancesOf<IVersionChecker>().TheDefaultIsConcreteType<VersionChecker>();
             StructureMapConfiguration.BuildInstancesOf<IUnzipper>().TheDefaultIsConcreteType<Unzipper>();
             StructureMapConfiguration.BuildInstancesOf<IFileCopier>().TheDefaultIsConcreteType<FileCopier>();
-            StructureMapConfiguration.BuildInstancesOf<IIPFinder>().TheDefaultIsConcreteType<IPFinder>();
+            StructureMapConfiguration.BuildInstancesOf<IIPFinder>().TheDefaultIsConcreteType<IPFinder>();
+            StructureMapConfiguration.BuildInstancesOf<IBackupUpdater>().TheDefaultIsConcreteType<BackupUpdater>();
+            StructureMapConfiguration.BuildInstancesOf<IExtractEmbededResource>().TheDefaultIsConcreteType<ExtractEmbededResource>();
 
 
             StructureMapConfiguration.BuildInstancesOf<IDiffieHellman>().TheDefaultIs(
@@ -97,7 +99,8 @@ public class IoC {
             StructureMapConfiguration.AddInstanceOf<IExecutableCommand>().UsingConcreteType<Features>().WithName(Utilities.Commands.features.ToString());
             StructureMapConfiguration.AddInstanceOf<IExecutableCommand>().UsingConcreteType<Unrescue>().WithName(Utilities.Commands.unrescue.ToString());
             StructureMapConfiguration.AddInstanceOf<IExecutableCommand>().UsingConcreteType<UpdaterUpdate>().WithName(Utilities.Commands.updaterupdate.ToString());
-            StructureMapConfiguration.AddInstanceOf<IExecutableCommand>().UsingConcreteType<SetHostname>().WithName(Utilities.Commands.sethostname.ToString());
+            StructureMapConfiguration.AddInstanceOf<IExecutableCommand>().UsingConcreteType<SetHostname>().WithName(Utilities.Commands.sethostname.ToString());
+            StructureMapConfiguration.AddInstanceOf<IExecutableCommand>().UsingConcreteType<EnsureMinAgentUpdater>().WithName(Utilities.Commands.ensureminagentupdater.ToString());
         }
     }
 }
diff --git a/src/Rackspace.Cloud.Server.Agent/Properties/AssemblyInfo.cs b/src/Rackspace.Cloud.Server.Agent/Properties/AssemblyInfo.cs
index 6d20450..aeeb7c9 100644
--- a/src/Rackspace.Cloud.Server.Agent/Properties/AssemblyInfo.cs
+++ b/src/Rackspace.Cloud.Server.Agent/Properties/AssemblyInfo.cs
@@ -4,4 +4,4 @@
 [assembly: AssemblyCompany("Rackspace Cloud")]
 [assembly: AssemblyProduct("Rackspace Cloud Server Agent")]
 [assembly: AssemblyCopyright("Copyright (c) 2009 2010 2011, Rackspace Cloud.  All Rights Reserved")]
-[assembly: AssemblyVersion("1.2.5.0")]
+[assembly: AssemblyVersion("1.2.6.0")]
diff --git a/src/Rackspace.Cloud.Server.Agent/Rackspace.Cloud.Server.Agent.csproj b/src/Rackspace.Cloud.Server.Agent/Rackspace.Cloud.Server.Agent.csproj
index 9103668..d038b2d 100644
--- a/src/Rackspace.Cloud.Server.Agent/Rackspace.Cloud.Server.Agent.csproj
+++ b/src/Rackspace.Cloud.Server.Agent/Rackspace.Cloud.Server.Agent.csproj
@@ -73,6 +73,7 @@
     </Reference>
     <Reference Include="System" />
     <Reference Include="System.Management" />
+    <Reference Include="System.Runtime.Remoting" />
     <Reference Include="System.Security" />
     <Reference Include="System.Data" />
     <Reference Include="System.ServiceProcess" />
@@ -84,7 +85,9 @@
     <Reference Include="System.Xml" />
   </ItemGroup>
   <ItemGroup>
+    <Compile Include="Actions\BackupUpdater.cs" />
     <Compile Include="Actions\ChecksumValidator.cs" />
+    <Compile Include="Actions\ExtractEmbededResource.cs" />
     <Compile Include="Actions\ISetHostnameAction.cs" />
     <Compile Include="Actions\SetHostnameAction.cs" />
     <Compile Include="Actions\SetProviderData.cs" />
@@ -99,6 +102,7 @@
     <Compile Include="Actions\Sleeper.cs" />
     <Compile Include="Actions\ServiceStarter.cs" />
     <Compile Include="Actions\ServiceStopper.cs" />
+    <Compile Include="Commands\EnsureMinAgentUpdater.cs" />
     <Compile Include="Commands\SetHostname.cs" />
     <Compile Include="Commands\Unrescue.cs" />
     <Compile Include="Actions\Unzipper.cs" />
@@ -114,6 +118,7 @@
     <Compile Include="Configuration\Ipv4Tuple.cs" />
     <Compile Include="Configuration\Ipv6Tuple.cs" />
     <Compile Include="Netsh\NetshFirewallRuleNameAvailable.cs" />
+    <Compile Include="UpdaterFiles\Updater.cs" />
     <Compile Include="XenProviderDataInformation.cs" />
     <Compile Include="DiffieHellmanPrerequisitesChecker.cs" />
     <Compile Include="Actions\SetNetworkRoutes.cs" />
@@ -175,6 +180,7 @@
     <None Include="app.config">
       <SubType>Designer</SubType>
     </None>
+    <EmbeddedResource Include="UpdaterFiles\UpdateService.zip" />
   </ItemGroup>
   <ItemGroup>
     <ProjectReference Include="..\Rackspace.Cloud.Server.Agent.DiffieHellman\Rackspace.Cloud.Server.DiffieHellman.csproj">
@@ -203,6 +209,7 @@
       <Install>true</Install>
     </BootstrapperPackage>
   </ItemGroup>
+  <ItemGroup />
   <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
   <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
        Other similar extension points exist, see Microsoft.Common.targets.
diff --git a/src/Rackspace.Cloud.Server.Agent/UpdaterFiles/UpdateService.zip b/src/Rackspace.Cloud.Server.Agent/UpdaterFiles/UpdateService.zip
new file mode 100644
index 0000000..0ecd741
Binary files /dev/null and b/src/Rackspace.Cloud.Server.Agent/UpdaterFiles/UpdateService.zip differ
diff --git a/src/Rackspace.Cloud.Server.Agent/UpdaterFiles/Updater.cs b/src/Rackspace.Cloud.Server.Agent/UpdaterFiles/Updater.cs
new file mode 100644
index 0000000..756b6ab
--- /dev/null
+++ b/src/Rackspace.Cloud.Server.Agent/UpdaterFiles/Updater.cs
@@ -0,0 +1,25 @@
+﻿// Copyright 2011 OpenStack LLC.
+// All Rights Reserved.
+//
+//    Licensed under the Apache License, Version 2.0 (the "License"); you may
+//    not use this file except in compliance with the License. You may obtain
+//    a copy of the License at
+//
+//         http://www.apache.org/licenses/LICENSE-2.0
+//
+//    Unless required by applicable law or agreed to in writing, software
+//    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+//    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+//    License for the specific language governing permissions and limitations
+//    under the License.
+
+
+using System;
+
+namespace Rackspace.Cloud.Server.Agent.UpdaterFiles
+{
+    public class Updater
+    {
+        public static readonly Version MinimumVersion = new Version("1.2.6.0");
+    }
+}
diff --git a/src/Rackspace.Cloud.Server.Agent/Utilities/Commands.cs b/src/Rackspace.Cloud.Server.Agent/Utilities/Commands.cs
index d61a6f2..4363694 100644
--- a/src/Rackspace.Cloud.Server.Agent/Utilities/Commands.cs
+++ b/src/Rackspace.Cloud.Server.Agent/Utilities/Commands.cs
@@ -32,7 +32,8 @@ public enum Commands
         features,
         unrescue,
         updaterupdate,
-        sethostname
+        sethostname,
+        ensureminagentupdater
     }
 
     public class NotUrlEncodedAttribute : Attribute
diff --git a/src/Rackspace.Cloud.Server.Common/Configuration/SvcConfiguration.cs b/src/Rackspace.Cloud.Server.Common/Configuration/SvcConfiguration.cs
index 69db620..961da6a 100644
--- a/src/Rackspace.Cloud.Server.Common/Configuration/SvcConfiguration.cs
+++ b/src/Rackspace.Cloud.Server.Common/Configuration/SvcConfiguration.cs
@@ -29,6 +29,14 @@ public static class SvcConfiguration
 
         public static int RemotingPort {
             get { return Convert.ToInt32(ConfigurationManager.AppSettings["RemotingPort"]); }
+        }
+
+        public static string IpcUriHost {
+            get { return ConfigurationManager.AppSettings["IpcUriHost"]; }
+        }
+
+        public static string IpcUriName {
+            get { return ConfigurationManager.AppSettings["IpcUriName"]; }
         }
 
         public static string AgentPath {
diff --git a/src/Rackspace.Cloud.Server.Common/Properties/AssemblyInfo.cs b/src/Rackspace.Cloud.Server.Common/Properties/AssemblyInfo.cs
index 232b9fc..445d16c 100644
--- a/src/Rackspace.Cloud.Server.Common/Properties/AssemblyInfo.cs
+++ b/src/Rackspace.Cloud.Server.Common/Properties/AssemblyInfo.cs
@@ -4,4 +4,4 @@
 [assembly: AssemblyCompany("Rackspace Cloud")]
 [assembly: AssemblyProduct("Rackspace Cloud Server Agent")]
 [assembly: AssemblyCopyright("Copyright (c) 2009 2010 2011, Rackspace Cloud.  All Rights Reserved")]
-[assembly: AssemblyVersion("1.2.5.0")]
+[assembly: AssemblyVersion("1.2.6.0")]
diff --git a/src/Rackspace.Cloud.Server.DiffieHellman.Specs/Properties/AssemblyInfo.cs b/src/Rackspace.Cloud.Server.DiffieHellman.Specs/Properties/AssemblyInfo.cs
index 232b9fc..445d16c 100644
--- a/src/Rackspace.Cloud.Server.DiffieHellman.Specs/Properties/AssemblyInfo.cs
+++ b/src/Rackspace.Cloud.Server.DiffieHellman.Specs/Properties/AssemblyInfo.cs
@@ -4,4 +4,4 @@
 [assembly: AssemblyCompany("Rackspace Cloud")]
 [assembly: AssemblyProduct("Rackspace Cloud Server Agent")]
 [assembly: AssemblyCopyright("Copyright (c) 2009 2010 2011, Rackspace Cloud.  All Rights Reserved")]
-[assembly: AssemblyVersion("1.2.5.0")]
+[assembly: AssemblyVersion("1.2.6.0")]
