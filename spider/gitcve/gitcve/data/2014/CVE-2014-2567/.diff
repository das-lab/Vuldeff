diff --git a/src/Imap/Tasks/OpenConnectionTask.cpp b/src/Imap/Tasks/OpenConnectionTask.cpp
index 2957550f8..fc4e6be54 100644
--- a/src/Imap/Tasks/OpenConnectionTask.cpp
+++ b/src/Imap/Tasks/OpenConnectionTask.cpp
@@ -153,6 +153,17 @@ bool OpenConnectionTask::handleStateHelper(const Imap::Responses::State *const r
     {
         switch (resp->kind) {
         case PREAUTH:
+            if (model->m_startTls) {
+                // Oops, we cannot send STARTTLS when the connection is already authenticated.
+                // This is serious enough to warrant an error; an attacker might be going after a plaintext
+                // of a message we're going to APPEND, etc.
+                // Thanks to Arnt Gulbrandsen on the imap-protocol ML for asking what happens when we're configured
+                // to request STARTTLS and a PREAUTH is received, and to Michael M Slusarz for starting that discussion.
+                logout(tr("Configuration requires sending STARTTLS, but the IMAP server greets us with PREAUTH. "
+                          "Encryption cannot be established. If this configuration worked previously, someone "
+                          "is after your data and they are pretty smart."));
+                return true;
+            }
             // Cool, we're already authenticated. Now, let's see if we have to issue CAPABILITY or if we already know that
             if (model->accessParser(parser).capabilitiesFresh) {
                 // We're alsmost done here, apart from compression
diff --git a/tests/Imap/test_Imap_Tasks_OpenConnection.cpp b/tests/Imap/test_Imap_Tasks_OpenConnection.cpp
index e6aaf3d55..f186c68cd 100644
--- a/tests/Imap/test_Imap_Tasks_OpenConnection.cpp
+++ b/tests/Imap/test_Imap_Tasks_OpenConnection.cpp
@@ -129,6 +129,19 @@ void ImapModelOpenConnectionTest::testPreauthWithCapability()
     QVERIFY(startTlsUpgradeSpy->isEmpty());
 }
 
+/** @short What happens when the server responds with PREAUTH and we want STARTTLS? */
+void ImapModelOpenConnectionTest::testPreauthWithStartTlsWanted()
+{
+    cleanup(); init(true); // yuck, but I can't come up with anything better...
+
+    cEmpty();
+    cServer("* PREAUTH hi there\r\n");
+    QCOMPARE(failedSpy->size(), 1);
+    QVERIFY(completedSpy->isEmpty());
+    QVERIFY(authSpy->isEmpty());
+    QVERIFY(startTlsUpgradeSpy->isEmpty());
+}
+
 /** @short Test for obtaining capability and logging in without any STARTTLS */
 void ImapModelOpenConnectionTest::testOk()
 {
diff --git a/tests/Imap/test_Imap_Tasks_OpenConnection.h b/tests/Imap/test_Imap_Tasks_OpenConnection.h
index 23107a3f0..dcc77c0da 100644
--- a/tests/Imap/test_Imap_Tasks_OpenConnection.h
+++ b/tests/Imap/test_Imap_Tasks_OpenConnection.h
@@ -39,6 +39,7 @@ private slots:
 
     void testPreauth();
     void testPreauthWithCapability();
+    void testPreauthWithStartTlsWanted();
 
     void testOk();
     void testOkWithCapability();
