{"version":3,"sources":["Craft.min.js","Craft.js","BaseElementEditor.js","BaseElementIndex.js","BaseElementIndexView.js","BaseElementSelectInput.js","BaseElementSelectorModal.js","BaseInputGenerator.js","AdminTable.js","AssetEditor.js","AssetImageEditor.js","AssetIndex.js","AssetSelectInput.js","AssetSelectorModal.js","AuthManager.js","CP.js","CategoryIndex.js","CategorySelectInput.js","Chart.js","ColorInput.js","CustomizeSourcesModal.js","DataTableSorter.js","DeleteUserModal.js","DraftEditor.js","DynamicGenerator.js","EditableTable.js","ElementActionTrigger.js","ElementThumbLoader.js","ElevatedSessionForm.js","ElevatedSessionManager.js","EntryIndex.js","FieldLayoutDesigner.js","FieldToggle.js","Grid.js","HandleGenerator.js","ImageUpload.js","InfoIcon.js","LightSwitch.js","Listbox.js","LivePreview.js","PasswordInput.js","Preview.js","PreviewFileModal.js","ProgressBar.js","PromptHandler.js","SlidePicker.js","SlideRuleInput.js","SlugGenerator.js","Structure.js","StructureDrag.js","StructureTableSorter.js","TableElementIndexView.js","TagSelectInput.js","ThumbsElementIndexView.js","UI.js","Uploader.js","UriFormatGenerator.js"],"names":["$","rxhtmlTag","jQuery","htmlPrefilter","html","replace","extend","Craft","navHeight","index","arr","key","isArray","reduce","obj","i","t","category","message","params","translations","this","formatMessage","pattern","args","tokens","_tokenizePattern","length","token","_parseToken","join","start","pos","depth","chars","indexOf","slice","open","close","push","split","param","trim","arg","type","format","number","formatNumber","substr","plural","c","offset","selector","selectorChars","substring","parseInt","map","p","formatDate","date","Date","datepicker","datepickerOptions","dateFormat","d3","formatLocale","d3FormatLocaleDefinition","formatter","shortcutText","shift","alt","clientOs","escapeHtml","str","text","escapeRegex","getText","encodeUriComponent","encodeURIComponent","differences","!","*","'","(",")","chr","re","RegExp","selectFullValue","input","$input","val","setSelectionRange","formatInputId","inputName","rtrim","getUrl","path","baseUrl","anchor","isPlainObject","aParams","name","hasOwnProperty","value","Garnish","apos","url","qpos","search","pathParam","pathMatch","match","omitScriptNameInUrls","usePathInfo","scriptName","basePath","endPath","getCpUrl","baseCpUrl","getSiteUrl","baseSiteUrl","getActionUrl","actionUrl","redirectTo","document","location","href","getCsrfInput","csrfTokenName","csrfTokenValue","postActionRequest","action","data","callback","options","contentType","JSON","stringify","jqXHR","ajax","dataType","headers","_actionHeaders","success","error","textStatus","errorThrown","readyState","cp","displayError","alert","send","_waitingOnAjax","_ajaxQueue","queueActionRequest","undefined","_postNextActionRequestInQueue","X-Registered-Asset-Bundles","Object","keys","registeredAssetBundles","X-Registered-Js-Files","registeredJsFiles","sendActionRequest","method","Promise","resolve","reject","X-Requested-With","v","getTime","axios","request","then","catch","sendApiRequest","uri","cancelToken","_getApiHeaders","apiHeaders","baseURL","baseApiUrl","apiParams","_apiHeaders","processCraftHeaders","apiResponse","_processApiHeaders","_loadingApiHeaders","_apiHeaderWaitlist","response","e","_rejectApiRequests","clearCachedApiHeaders","downloadFromUrl","body","XMLHttpRequest","setRequestHeader","responseType","onload","status","disposition","getResponseHeader","matches","exec","filename","blob","Blob","link","createElement","window","URL","createObjectURL","download","appendChild","click","removeChild","bind","stringToArray","findDeltaData","oldData","newData","deltaNames","sort","a","b","groupedOldParams","_groupParamsByDeltaNames","groupedNewParams","__root__","n","inArray","modifiedDeltaNames","concat","withRoot","useInitialValues","paramName","grouped","paramLoop","decodeURIComponent","initialDeltaValues","expandPostArray","expanded","m","unshift","parentElem","createForm","$form","attr","accept-charset","chunks","values","appendTo","compare","obj1","obj2","sortObjectKeys","Array","getObjectKeys","escapeChars","escaped","ltrim","startsWith","filterArray","filtered","elem","includes","removeFromArray","splice","getLast","uppercaseFirst","charAt","toUpperCase","lowercaseFirst","toLowerCase","parseUrl","scheme","host","hostname","port","query","hash","isSameHost","requestUrlInfo","urlInfo","secondsToHumanTimeDuration","seconds","showSeconds","weeks","Math","floor","days","minutes","hours","round","timeComponents","asciiString","charMap","normalize","char","asciiStr","asciiCharMap","randomString","result","random","createErrorList","errors","$ul","addClass","$li","appendHeadHtml","$existingCss","existingCss","eq","regexp","append","appendFootHtml","$existingJs","src","existingJs","$bod","initUiElements","$container","grid","infoicon","checkboxselect","fieldtoggle","lightswitch","nicetext","formsubmit","menubtn","datetime","each","_elementIndexClasses","_elementSelectorModalClasses","_elementEditorClasses","registerElementIndexClass","elementType","func","registerElementSelectorModalClass","registerElementEditorClass","createElementIndex","settings","BaseElementIndex","createElementSelectorModal","BaseElementSelectorModal","createElementEditor","element","BaseElementEditor","getLocalStorage","defaultValue","systemUid","localStorage","parse","setLocalStorage","removeLocalStorage","removeItem","getCookie","cookie","setCookie","defaultCookieOptions","domain","maxAge","expires","toUTCString","secure","removeCookie","getElementInfo","$element","hasClass","find","id","siteId","label","hasThumb","setElementSize","size","otherSize","removeClass","$oldImg","$newImg","sizes","srcset","replaceWith","picturefill","elements","submitForm","confirm","redirect","retainScroll","scrollY","trigger","fn","animateLeft","duration","easing","complete","orientation","velocity","left","right","animateRight","disable","$elem","removeAttr","enable","itemSelector","cols","maxCols","minColWidth","mode","fillMode","colClass","snapToGrid","Grid","InfoIcon","CheckboxSelect","FieldToggle","settingName","settingValue","setSettings","thisSettings","hasAttr","indeterminateValue","LightSwitch","NiceText","on","ev","$btn","currentTarget","$anchor","closest","customTrigger","next","menuAnchor","MenuBtn","$wrapper","$inputs","checkValue","hasValue","children","class","title","aria-label","remove","first","focus","$doc","ready","Base","elementId","initialData","$fieldsContainer","$cancelBtn","$saveBtn","$spinner","$siteSelect","$siteSpinner","hud","init","defaults","loadHud","setElementAttribute","attributes","getBaseData","prevalidate","onBeginLoading","includeSites","isMultiSite","showSiteSwitcher","proxy","showHud","onEndLoading","$hudContents","sites","$header","$siteSelectContainer","siteInfo","addListener","add","updateForm","onCreateForm","$footer","$buttonsContainer","updateBody","updateSizeAndPosition","hudTrigger","HUD","bodyClass","closeOtherHUDs","hideOnEsc","hideOnShadeClick","onShow","onShowHud","onHide","onHideHud","onSubmit","saveElement","shortcutManager","registerShortcut","ESC_KEY","maybeCloseHud","$shade","$hud","$body","hide","switchSite","isDirty","newSiteId","reloadForm","refreshInitialData","$allInstructions","$instructions","$label","siblings","requestAnimationFrame","headHtml","footHtml","serialize","validators","isFunction","call","$title","$a","cpEditUrl","newTitle","elementTypeNames","displayNotice","closeHud","onSaveElement","shake","showing","keyCode","S_KEY","ctrl","runQueue","elementIndex","noop","initialized","instanceState","sourceStates","sourceStatesStorageKey","searchTimeout","sourceSelect","$main","isIndexBusy","$sidebar","showingSidebar","sourceKey","sourceViewModes","$source","sourcesByKey","$visibleSources","$customizeSourcesBtn","customizeSourcesModal","$toolbar","toolbarOffset","$search","searching","searchText","trashed","drafts","$clearSearchBtn","$statusMenuBtn","$statusMenuContainer","statusMenu","$siteMenuBtn","siteMenu","$sortMenuBtn","sortMenu","$sortAttributesList","$sortDirectionsList","$scoreSortAttribute","$structureSortAttribute","$elements","$viewModeBtnContainer","viewModeBtns","viewMode","view","_autoSelectElements","$countSpinner","$countContainer","page","resultSet","totalResults","$exportBtn","actions","actionsHeadHtml","actionsFootHtml","$selectAllContainer","$selectAllCheckbox","showingActionTriggers","exporters","exportersByType","_$detachedToolbarItems","_$triggers","_ignoreFailedRequest","_cancelToken","getDefaultInstanceState","storageKey","context","toolbarSelector","parent","hideSidebar","initSources","menu","$option","$options","filter","_setSite","criteria","defaultSiteId","getSiteId","$storedSiteOption","startSearching","stopSearching","clearTimeout","setTimeout","RETURN_KEY","preventDefault","updateElementsIfSearchTextChanged","isMobileBrowser","afterInit","selectDefaultSource","setPage","pageNum","updateElements","onAfterInit","_createCancelToken","CancelToken","source","_cancelRequests","cancel","getSourceContainer","$sources","$items","_getSourcesInList","Select","multi","allowEmpty","vertical","onSelectionChange","_initSources","getDefaultSourceKey","getSourceByKey","selectSource","refreshSources","removeAllItems","setIndexBusy","refreshSourcesAction","setIndexAvailable","initSource","addItems","initSourceToggle","expandedSources","_expandSource","deinitSourceToggle","$toggle","_getSourceToggle","deinitSource","removeItems","removeListener","removeData","selectedSource","defaultSource","paths","getDefaultExpandedSources","addOptions","prependTo","_updateStructureSortOption","setSortAttribute","detach","setInstanceState","storeInstanceState","getSourceState","getSelectedSourceState","setSelecetedSourceState","viewState","storeSortAttributeAndDirection","getSelectedSortAttribute","order","getSelectedSortDirection","max","pageTrigger","history","replaceState","_resetCount","getViewParams","batchSize","limit","canHaveDrafts","savedDraftsOnly","draftOf","disabledElementIds","paginated","_isViewPaginated","collapsedElementIds","preservePagination","destroy","updateElementsAction","$scrollContainer","scrollTop","_updateView","showActionTriggers","css","height","_createTriggers","submitAction","actionParams","selectedElementIds","getSelectedElementIds","_findAction","viewParams","elementAction","elementIds","submitActionsAction","afterAction","actionClass","onAfterAction","hideActionTriggers","updateActionTriggers","totalSelected","getSelectedElements","getEnabledElements","setStatus","selectOption","getSortAttributeOption","attribute","setSortDirection","getSortDirectionOption","dir","getSelectedViewMode","selectItem","updateSidebarMenuLabel","sortOptions","data-extra","data-attr","setStoredSortOptionsForSource","$firstOption","getViewModesForSource","sourceViewMode","$viewModeBtn","className","data-view","data-icon","icon","selectViewMode","doesSourceHaveViewMode","onSelectSource","selectSourceByKey","sortAttr","sortDir","getDefaultSort","viewModes","force","createView","getViewClass","TableElementIndexView","ThumbsElementIndexView","rememberDisabledElementId","forgetDisabledElementId","enableElements","parents","onEnableElements","disableElements","onDisableElements","getElementById","enableElementsById","ids","makeArray","disableElementsById","selectElementAfterUpdate","addButton","$button","getButtonContainer","isShowingSidebar","buttonContainer","createCustomizeSourcesModal","modal","CustomizeSourcesModal","base","onSelectSite","onUpdateElements","_handleSourceSelectionChange","$selectedItems","_handleActionTriggerSubmit","getPostData","_handleMenuActionTriggerSubmit","option","_handleStatusChange","selectedOption","_handleSiteChange","firstSite","$firstVisibleSource","selectNewSource","toString","get","$heading","$headings","nextUntil","setSiteId","_handleSortChange","is","_handleSelectionChange","_handleSourceDblClick","_toggleSource","stopPropagation","_handleSourceToggleClick","prev","$list","_getChildSources","_deinitSources","_collapseSource","aria-expanded","$childSources","_countResults","total","itemLabel","itemsLabel","min","last","countLabel","item","items","$paginationContainer","totalPages","ceil","$prevBtn","$nextBtn","role","tabindex","aria-checked","selectAllElements","deselectAllElements","SPACE_KEY","selectable","multiSelect","checkboxMode","selectElementById","countElementsAction","count","triggers","safeMenuActions","destructiveMenuActions","destructive","$menuTrigger","$menu","$safeList","_createMenuTriggerList","$destructiveList","$div","_showExportHud","typeOptions","$typeField","ui","createSelectField","$formatField","$typeSelect","formattable","$limitField","createTextField","placeholder","submitting","isNaN","BaseElementIndexView","$loadingMoreSpinner","$elementContainer","$scroller","thumbLoader","elementSelect","loadingMore","_totalVisible","_morePending","_handleEnableElements","_handleDisableElements","container","insertAfter","getElementContainer","setTotalVisible","setMorePending","ElementThumbLoader","load","isVerticalList","handle","_handleElementEditing","$target","target","prop","isTouchCapable","maybeLoadMore","getAllElements","$selectedElements","selectElement","selectAll","deselectAll","getTotalVisible","totalVisible","getMorePending","morePending","canLoadMore","loadMore","$win","innerHeight","top","outerHeight","getLoadMoreParams","loadMoreElementsAction","$newElements","appendElements","onAppendElements","newElements","off","BaseElementSelectInput","elementSort","elementEditor","$elementsContainer","$addElementBtn","$addElementBtnContainer","_initialized","normalizedSettings","arguments","modalStorageKey","sortable","getContainer","getElementsContainer","getAddElementsBtn","initElementSelect","initElementSort","resetElements","getElements","DragSort","$targetItem","getSelectedItems","ignoreHandleSelector","axis","getElementSortAxis","collapseDraggees","magnetStrength","helperLagBase","onSortChange","resetItemOrder","canAddMoreElements","updateAddElementsBtn","enableAddElementsBtn","disableAddElementsBtn","removeElements","addElements","editable","_handleShowElementEditor","removeElement","not","onRemoveElements","animateElementAway","animateCss","opacity","outerWidth","draftEditor","pause","REMOVE_FX_DURATION","resume","showModal","show","createModal","getModalSettings","closeOtherModals","sources","showSiteMenu","getDisabledElementIds","onSelect","modalSettings","allowSelfRelations","sourceElementId","onModalSelect","slotsLeft","selectElements","updateDisabledElementsInModal","elementInfo","createNewElement","appendElement","animateElementIntoPlace","onSelectElements","clone","prepend","$modalElement","$inputElement","origOffset","destOffset","$helper","position","zIndex","ADD_FX_DURATION","checkForm","fieldId","editorSettings","Modal","$selectBtn","$sourceToggles","$tbody","$primaryButtons","$secondaryButtons","$footerSpinner","onFadeIn","_createElementIndex","updateSelectBtnState","enableSelectBtn","disableSelectBtn","enableCancelBtn","disableCancelBtn","showFooterSpinner","hideFooterSpinner","clearMouseUpTimeout","disableElementsOnSelect","hideOnSelect","info","has","touchData","firstTap","secondTap","resizable","onCancel","BaseInputGenerator","listening","timeout","startListening","setNewSource","stopListening","removeAllListeners","onSourceTextChange","onTargetTextChange","activeElement","onFormSubmit","updateTarget","sourceVal","targetVal","generateTargetValue","dispatchEvent","InputEvent","inputType","Event","AdminTable","totalItems","sorter","$noItems","$table","$deleteBtns","allowDeleteAll","minItems","noItemsSelector","tableSelector","DataTableSorter","updateUI","addRow","row","maxItems","$row","$deleteBtn","reorderItems","idAttribute","reorderAction","onReorderItems","reorderSuccessMessage","reorderFailMessage","handleDeleteBtnClick","event","confirmDeleteItem","deleteItem","getItemName","confirmDeleteMessage","getItemId","deleteAction","handleDeleteItemResponse","onDeleteItem","deleteSuccessMessage","deleteFailMessage","nameAttribute","$moveButtons","newItemBtnSelector","AssetEditor","reloadIndex","$imageEditorTrigger","showImageEditor","AssetImageEditor","onSave","refreshThumbnail","$imageTools","$buttons","$replaceBtn","$editorContainer","$straighten","$croppingCanvas","$spinnerCanvas","canvas","image","viewport","focalPoint","croppingCanvas","clipper","croppingRectangle","cropperHandles","cropperGrid","croppingShade","croppingAreaText","imageStraightenAngle","viewportRotation","originalWidth","originalHeight","imageVerticeCoords","zoomRatio","animationInProgress","currentView","assetId","cacheBust","draggingCropper","scalingCropper","draggingFocal","previousMouseX","previousMouseY","shiftKeyHeld","editorHeight","editorWidth","cropperState","scaleFactor","flipData","focalPointState","spinnerInterval","maxImageSize","lastLoadedDimensions","imageIsLoading","mouseMoveEvent","croppingConstraint","constraintOrientation","showingCustomConstraint","renderImage","renderCropper","now","allowDegreeFractions","isImagick","x","y","allowSavingAsNew","saveImage","getMaxImageSize","browserViewportWidth","documentElement","clientWidth","browserViewportHeight","clientHeight","devicePixelRatio","loadEditor","$tabs","$viewsContainer","$views","innerWidth","_showSpinner","fabric","StaticCanvas","width","enableRetinaScaling","renderAll","imageUrl","Image","fromURL","imageObject","set","originX","originY","getHeight","getWidth","getScaledImageDimensions","_setFittedImageVerticeCoordinates","_repositionEditorElements","focalState","imageDimensions","offsetX","offsetY","focal","focalData","adjustedX","adjustedY","storeFocalPointState","_createFocalPoint","_createViewport","storeCropperState","_addControlListeners","_handleMouseMove","_handleMouseDown","_handleMouseUp","_handleMouseOut","_hideSpinner","_reloadImage","setSrc","min-width","min-height","previousEditorDimensions","setDimensions","currentScaledDimensions","getZoomToFitRatio","previouslyOccupiedArea","_getBoundingRectangle","_repositionCropper","getZoomToCoverRatio","_repositionImage","_repositionViewport","_repositionFocalPoint","_zoomImage","Rect","fill","globalCompositeOperation","sizeFactor","focalX","focalY","deltaX","deltaY","Group","Circle","radius","strokeWidth","stroke","toggleFocalPoint","dimensions","state","currentWidth","ratio","hasOrientationChanged","_","imageRatio","editorRatio","_handleTabClick","rotateImage","flipImage","straighteningInput","SlideRuleInput","onStart","_showGrid","onChange","slider","straighten","onEnd","_hideGrid","_cleanupFocalPointAfterStraighten","SHIFT_KEY","_handleConstraintClick","_handleOrientationClick","_applyCustomConstraint","constraint","_showCustomConstraint","_hideCustomConstraint","setCroppingConstraint","enforceCroppingConstraint","$constraints","$constraint","reverse","_getCustomConstraint","w","h","parseFloat","_setCustomConstraint","$tab","showView","enableSlider","disableSlider","disableCropMode","enableCropMode","zoomFactor","degrees","imageZoomRatio","newAngle","angle","scaledImageDimensions","viewportProperties","imageProperties","angleInRadians","PI","newDeltaX","cos","sin","newDeltaY","modifiedDeltaX","modifiedDeltaY","temp","animate","animationDuration","onComplete","cleanAngle","_adjustFocalPointByAngle","_resetFocalPointPosition","editorCenter","setValue","properties","scaleY","scaleX","previousAngle","_adjustEditorElementsOnStraighten","newCenterX","newCenterY","angleDelta","currentZoomRatio","adjustmentRatio","cropperCenterX","cropperCenterY","imageVertices","getImageVerticeCoords","rectangle","_getZoomRatioToFitRectangle","_isCenterInside","object","containingObject","newFocalX","newFocalY","adjustedFocalX","adjustedFocalY","containingVertices","vertex","rectangleVertices","_getRectangleVertices","verticeIndex","arePointsInsideRectangle","edge","_getEdgeCrossed","rectangleCenter","distanceFromVertexToEdge","abs","sqrt","pow","distanceFromCenterToEdge","postData","imageRotation","cropData","zoom","end","scaledWidth","scaledHeight","boundingBox","_getImageBoundingBox","scale","vertScale","horiScale","getCombinedZoomRatio","strokeOptions","gridWidth","gridHeight","xStep","yStep","Line","onFadeOut","cropperData","_showCropper","_editorModeTransition","_hideCropper","targetZoom","inverseZoomFactor","imageOffsetX","imageOffsetY","getContext","cW","cH","setInterval","rotation","save","clearRect","translate","rotate","beginPath","moveTo","lineTo","lineWidth","strokeStyle","restore","clearInterval","clipperData","_setupCropperLayer","_redrawCropperElements","backgroundColor","hoverCursor","selection","rectangleRatio","rectWidth","rectHeight","lineOptions","gridOptions","pathGroup","Path","cropTextTop","cropTextBackgroundColor","Textbox","fontSize","font","textAlign","previousImageArea","currentOffset","areaFactor","coordinateSet","d","_isMouseOver","move","_cropperHandleHitTest","pageX","pageY","_handleMouseMoveInternal","_handleFocalDrag","_handleCropperDrag","_handleCropperResize","_setMouseCursor","vertices","dxi","dyi","furthest","furthestDeltas","newX","newY","previousHeight","previousWidth","startingRectangle","_calculateNewCropperSizeByDeltas","cropperDirection","topDelta","leftDelta","change","cursor","parentOffset","mouseX","mouseY","lb","rb","tb","bb","topLeft","topRight","bottomRight","bottomLeft","zoomMode","topVerticalSegment","bottomVerticalSegment","rightHorizontalSegment","leftHorizontalSegment","verticalOffset","horizontalOffset","_debug","fabricObj","debugger","points","ab","_getVector","bc","scalarAbAb","_getScalarProduct","scalarBcBc","point","ap","bp","scalarAbAp","scalarBcBp","projectsOnAB","projectsOnBC","_getVectorMagnitude","vector","_getAngleBetweenVectors","acos","edgePoints","centerPoint","smallestDiff","edgeCrossed","edgeIndex","toCenter","edgeVector","toVertex","diff","box","proportion","AssetIndex","$includeSubfoldersContainer","$includeSubfoldersCheckbox","showingIncludeSubfoldersCheckbox","$uploadButton","$uploadInput","$progressBar","$folders","uploader","promptHandler","progressBar","_uploadTotalFiles","_uploadFileProgress","_uploadedAssetIds","_currentUploaderSettings","_assetDrag","_folderDrag","_expandDropTargetFolderTimeout","_tempExpandedFolders","_fileConflictTemplate","choices","_folderConflictTemplate","_initIndexPageMode","_createFolderContextMenu","_getSourceLevel","updateDropTargets","contextMenu","parentsUntil","onDragStartProxy","onDropTargetChangeProxy","DragDrop","activeDropTargetClass","helperOpacity","helper","$file","_getFileDragHelper","dropTargets","$draggee","targets","onDragStart","onDropTargetChange","onDragStop","helperBaseZindex","$selected","draggees","_getFolderUidFromSourceKey","$draggeeHelper","$helperSidebar","$helperNav","$helperUl","padding-top","padding-right","padding-bottom","padding-left","draggedSourceIds","_onFileDragStop","$activeDropTarget","originatingSource","targetFolderId","originalAssetIds","originalAssetId","_positionProgressBar","resetProgressBar","setItemCount","showProgressBar","parameterArray","folderId","onMoveFinish","responseArray","resetPrompts","conflict","addPrompt","suggestedFilename","prompt","hideProgressBar","performAfterMoveActions","_collapseExtraExpandedFolders","getPromptCount","promptCallback","returnData","newParameterArray","choice","apply","_performBatchRequests","fadeOutHelpers","showBatchPrompts","returnHelpersToDraggees","_onFolderDragStop","folderIds","parentId","requestId","fileMoveList","newSourceKey","transferList","newFolderId","newFolderUid","merge","_performActualFolderMove","folderDeleteList","moveCallback","counter","_getRootSource","$parent","_getParentSource","_selectSourceByFolderId","$targetSource","_getSourceByKey","$parentSources","$parentSource","style","insertBefore","PromptHandler","ProgressBar","fileInput","dropZone","events","fileuploadstart","fileuploadprogressall","fileuploaddone","kind","allowedKinds","Uploader","defaultVolumeHandle","setParams","$rootSource","$subContainer","checked","marginBottom","includeSubfolders","_onUploadStart","_onUploadProgress","progress","loaded","setProgressPercentage","_onUploadComplete","files","doReload","file","isLastUpload","_updateAfterUpload","_uploadFollowup","finalCallback","doFollowup","parameterIndex","followupCallback","incrementProcessedItemCount","updateProgressBar","sourceAssetId","conflictingAssetId","targetFilename","_onUpdateElements","_onKeyDown","_onElementFocus","shiftKey","PreviewFileModal","openInstance","selfDestruct","$focusedItem","_loadPreview","startingWidth","startingHeight","_onDragStart","$outerContainer","$innerContainer","_$firstRowCells","$helperCells","$helperCell","$firstRowCell","_onDropTargetChange","$dropTarget","dropTargetFolder","_hasSubfolders","_isExpanded","dropTargetFolderId","$excludedSources","_collapseFolder","_expandFolder","menuOptions","onClick","ContextMenu","menuClass","_createSubfolder","$parentFolder","subfolderName","folderName","_prepareParentForChildren","$subfolder","folderUid","_appendSubfolder","_deleteFolder","$targetFolder","folder","_cleanUpTree","_renameFolder","oldName","newName","$existingChildren","subfolderLabel","folderInserted","$existingChild","before","windowHeight","doRequest","parameters","AssetSelectInput","$uploadBtn","originalFilename","originalExtension","resetOriginalFilename","_renameHelper","validateElementForm","canUpload","_attachUploader","defaultFieldLayoutId","formData","multiple","canAddMoreFiles","$existing","selectUploadedFile","$newElement","margin","slotsTaken","_parseFilename","parts","extension","pop","baseFileName","endPos","selectionStart","selectionEnd","createRange","select","range","collapse","moveEnd","moveStart","$filenameField","ext","oldExt","newExt","AssetSelectorModal","$selectTransformBtn","_selectedTransform","transforms","createSelectTransformButton","$btnGroup","$menuList","MenuButton","onOptionSelect","allowTransforms","onSelectTransform","transform","selectImagesWithTransform","transformUrls","imageIdsWithMissingUrls","$item","fetchMissingTransformUrls","canSelectImageTransforms","AuthManager","remainingSessionTime","checkRemainingSessionTimer","showLoginModalTimer","decrementLogoutWarningInterval","showingLogoutWarningModal","showingLoginModal","logoutWarningModal","loginModal","$logoutWarningPara","$passwordInput","$passwordSpinner","$loginBtn","$loginErrorPara","submitLoginIfLoggedOut","updateRemainingSessionTime","setCheckRemainingSessionTimer","checkRemainingSessionTime","extendSession","responseJSON","minSafeSessionTime","showLogoutWarningModal","checkInterval","submitLogin","showLoginModal","hideLogoutWarningModal","hideLoginModal","quickShow","$logoutBtn","$renewSessionBtn","autoShow","shadeClass","updateLogoutWarningMessage","time","decrementLogoutWarning","quick","quickHide","$inputContainer","$inputsFlexContainer","$passwordContainer","$buttonContainer","$passwordWrapper","PasswordInput","onToggleInput","$newPasswordInput","logout","renewSession","validatePassword","login","clearLoginError","loginName","username","password","showLoginError","CP","authManager","$nav","$mainContainer","$alerts","$crumbs","$notificationContainer","$primaryForm","$headerContainer","$mainContent","$details","$tabsContainer","$tabsList","$overflowTabBtn","$overflowTabList","$selectedTab","selectedTabIndex","$sidebarContainer","$contentContainer","$edition","$confirmUnloadForms","$deltaForms","$collapsibleTables","fixedHeader","enableQueue","totalJobs","jobInfo","displayedJobInfo","displayedJobInfoUnchanged","trackJobProgressTimeout","jobProgressIcon","checkingForUpdates","forcingRefreshOnUpdatesCheck","includingDetailsOnUpdatesCheck","checkForUpdatesCallbacks","updateFixedHeader","handleWindowResize","$errorNotifications","$otherNotifications","delay","notificationDuration","initAlerts","shortcuts","shortcut","submitPrimaryForm","initTabs","scrollTo","initSpecialForms","serialized","$forms","submit","confirmUnload","livePreview","inPreviewMode","originalEvent","returnValue","_handleInputFocus","_handleInputBlur","saveShortcut","toggleNav","toggleClass","toggleSidebar","selectTab","_selectTab","tab","deselectTab","updateTabs","updateResponsiveTables","maxWidth","totalWidth","showOverflowMenu","tabMargin","_i","_$table","_containerWidth","_check","_isCollapsed","getBoundingClientRect","headerHeight","max-height","displayNotification","$notification","fadedMargin","margin-left","margin-right","display","notificationType","fetchAlerts","displayAlerts","alerts","margin-top","$shunnableAlerts","$link","checkForUpdates","forceRefresh","includeDetails","realCallback","_checkForUpdates","updateUtilitiesBadge","callbacks","updateInfo","_getUpdates","_checkForCachedUpdates","cached","onlyIfCached","updates","_cacheUpdates","$utilitiesLink","$badge","badgeCount","runQueueAutomatically","trackJobProgress","_trackJobProgressInternal","setJobInfo","jobs","oldInfo","getDisplayedJobInfo","progressLabel","updateJobIcon","statuses","JOB_STATUS_RESERVED","JOB_STATUS_FAILED","JOB_STATUS_WAITING","j","JobProgressIcon","hideFailMode","setDescription","description","setProgress","showFailMode","JOB_STATUS_DONE","$progressLabel","failMode","_$bgCanvas","_$staticCanvas","_$hoverCanvas","_$failCanvas","_staticCtx","_hoverCtx","_canvasSize","_arcPos","_arcRadius","_lineWidth","_arcStartPos","_arcEndPos","_arcStartStepSize","_arcEndStepSize","_arcStep","_arcStepTimeout","_arcAnimateCallback","_progressBar","canAccessQueueManager","$canvasContainer","$labelContainer","_createCanvas","_drawArc","_animateArc","_setArc","color","$canvas","ctx","lineCap","startPos","arc","closePath","targetStartPos","targetEndPos","_takeNextArcStep","CategoryIndex","editableGroups","$newCategoryBtnGroup","$newCategoryBtn","editableCategoryGroups","group","uid","defaultGroupHandle","updateButton","selectedSourceHandle","selectedGroup","$menuBtn","_getGroupTriggerHref","_openCreateCategoryModal","getAttribute","menuHtml","menuBtn","primarySiteId","groupId","newCategoryBtnText","groupSourceKey","CategorySelectInput","selectedCategoryIds","categoryIds","branchLimit","selectionLabel","$newElementsContainer","filteredElements","$allCategories","_animateCategoryAway","charts","DataTable","columns","rows","forEach","cellIndex","parseTime","timeParse","Tip","$tip","setContent","setPosition","BaseChart","$chart","chartBaseClass","dataTable","timeFormatLocale","svg","globalSettings","formats","d3Formats","formatLocaleDefinition","timeFormatLocaleDefinition","d3TimeFormatLocaleDefinition","resize","baseSettings","draw","chartClass","onAfterDrawTicks","tickKey","tick","$tickText","numberFormat","percentFormat","currencyFormat","shortDateFormats","day","month","year","bottom","colors","Area","tip","drawingArea","getChartMargin","translateX","translateY","drawTicks","drawAxes","drawChart","drawTipTriggers","getX","xAxis","axisBottom","tickFormat","getXFormatter","ticks","yAxis","getY","axisLeft","getYFormatter","tickValues","getYTickValues","axisRight","showAxis","tickSizeOuter","gridlines","xLineAxis","tickSize","yLineAxis","line","datum","area","y0","y1","plots","enter","tips","chartMargin","xAxisTickInterval","node","getTotalLength","tipTriggerWidth","$content","$xValue","$yValue","content","yTicksMaxWidth","computedTickWidth","padded","xDomainMin","xDomainMax","xDomain","scaleTime","yDomain","getYMaxValue","scaleLinear","utils","getTimeFormatter","getNumberFormatter","maxValue","getDuration","secondsNum","chartSettings","dataScale","ColorInput","$colorContainer","$colorPreview","$colorInput","createColorInput","handleTextChange","setAttribute","updateColor","_browserSupportsColorInputs","doesBrowserSupportColorInputs","$elementIndexSourcesContainer","$sourcesContainer","$sourceSettingsContainer","$newHeadingBtn","$footerBtnContainer","$saveSpinner","$loadingSpinner","sourceSort","updateSourcesOnSave","availableTableAttributes","setContainer","buildModal","addSource","sourceData","$itemLabel","$itemInput","heading","Heading","updateItemLabel","Source","handleNewHeadingBtnClick","scrollContainerToElement","$pendingHeading","$lastSource","$indexSource","getIndexSource","isHeading","appendSource","$extraSources","nextAll","BaseSource","$settingsContainer","isSelected","deselect","createSettings","$settings","headerColHeading","defaultHeaderColHeading","tableAttributes","createTableColumnsField","firstKey","firstLabel","$titleColumnCheckbox","createTableColumnOption","$columnCheckboxes","selectedAttributes","createField","instructions","createCheckbox","disabled","$labelField","$labelInput","handleLabelInputChange","deleteHeading","table","$rows","caboose","Y_AXIS","getHelper","$helperRow","helperClass","$cells","DeleteUserModal","userId","$deleteActionRadios","$deleteSpinner","userSelect","_deleting","contentSummary","idParam","$deleteSubmitBtn","_submitBtnLabel","validateDeleteInputs","withContent","num","validates","handleSubmit","DraftEditor","$revisionBtn","$revisionLabel","$expandSiteStatusesBtn","$statusIcon","$editMetaBtn","metaHud","$nameTextInput","$saveMetaBtn","$siteStatusPane","$globalLightswitch","$siteLightswitches","$addlSiteField","siteIds","newSiteIds","enableAutosave","lastSerializedValue","listeningForChanges","pauseLevel","saving","saveXhr","queue","submittingForm","duplicatedElements","openingPreview","preview","previewToken","createdDraftInPreview","autosaveDrafts","siteStatuses","canEditMultipleSites","previewTargets","enablePreview","$shareBtn","openShareLink","createShareMenu","revisionId","serializeForm","draftId","initForDraft","createDraft","canUpdateSource","listenForChanges","statusIcons","stopListeningForChanges","createEditMetaBtn","showStatusHud","mergeChanges","publishDraftAction","hashedCpEditUrl","reload","expandSiteStatuses","$enabledForSiteField","_getOtherSupportedSites","s","_createSiteStatusField","$globalField","createLightswitchField","_showField","originalEnabledValue","enabled","enabledForSite","originalSerializedStatus","_updateGlobalStatus","serializedStatuses","addlSiteIds","_createAddlSiteField","_updateSiteStatuses","$field","overflow","_removeField","allEnabled","allDisabled","turnOn","turnOff","turnIndeterminate","site","$lightswitch","addlSites","$addlSiteSelectContainer","createSelect","$addlSiteSelect","bodyHtml","spinners","getPreviewToken","sourceId","getTokenizedPreviewUrl","randoParam","isLive","siteToken","tokenParam","getPreview","Preview","$statusIcons","createDraftNoticeHud","$closeBtn","deleteDraftAction","openPreview","ensureIsDraftOrRevision","onlyIfChanged","removeActionParams","isPreviewActive","$editor","isUnpublishedDraft","saveDraft","isActive","$spinners","saveDraftAction","prepareData","docTitle","draftName","revisionMenu","draftCreated","newHref","anchorPos","$actionButtonContainer","$saveBtnContainer","data-align","hashedAddAnotherRedirectUrl","$draftsUl","$draftHeading","$draftLi","$draftA","$siteOptions","$siteOption","creator","timestamp","updatePreviewTargets","afterUpdate","checkMetaValues","oldId","swapDuplicatedElementIds","getDeltaNames","idsRE","pre","post","newTarget","nextInQueue","showMetaHud","createMetaHud","onMetaHudShow","$hudBody","$nameField","$nameInputContainer","saveMeta","onMetaHudHide","onMetaHudEscape","shakeMetaHud","handleFormSubmit","autosave","abort","DynamicGenerator","EditableTable","baseName","biggestId","$addRowBtn","rowCount","hasMaxRows","hasMinRows","radioCheckboxes","log","copyDraggeeInputValuesToHelper","isVisible","initialize","minRows","createRowObj","updateAddRowButton","initializeIfVisible","canAddRow","canDeleteRow","deleteRow","$tr","onDeleteRow","staticRows","maxRows","rowId","rowIdPrefix","createRow","defaultValues","onAddRow","Row","focusOnPrevRow","tdIndex","blurTd","prevRow","$prevTr","$tds","focusOnNextRow","nextRow","$nextTr","importData","lines","textualColTypes","data-id","colId","$cell","col","scope","code","small","createDateInput","createLightswitch","default","createTimeInput","createTextInput","niceTexts","tds","$textareas","tr","td","$textarea","$checkbox","textareasByColId","onHeightChange","radioMode","toggle","applyToggleCheckbox","onTextareaHeightChange","autopopulate","HandleGenerator","allowNonAlphaStart","onTextareaFocus","onRadioCheckboxChange","checkbox","checkboxColId","neg","checkboxCol","colum","ignoreNextTextareaFocus","handleKeypress","charCode","isCtrlKeyPressed","numericKeyCodes","handlePaste","clipboardData","getData","validateValue","safeValue","tallestTextareaHeight","tdHeight","ElementActionTrigger","maxLevels","newChildUrl","$trigger","triggerEnabled","activate","updateTrigger","validateSelection","enableTrigger","disableTrigger","valid","batch","handleTriggerActivation","workers","Worker","$thumbs","$thumb","$scrollParent","scrollParent","addToQueue","invisibleThumbs","thumb","active","loadNext","scrollParentOffset","scrollParentHeight","thumbOffset","retryAll","loader","$img","ElevatedSessionForm","inputs","form","getInputPostVal","elevatedSessionManager","fetchingTimeout","stopImmediatePropagation","inputsChanged","$currentInput","requireElevatedSession","ElevatedSessionManager","passwordModal","$submitBtn","$errorPara","minSafeElevatedSessionTimeout","showPasswordModal","$passwordModal","focusPasswordInput","submitPassword","currentPassword","showPasswordError","EntryIndex","publishableSections","$newEntryBtnGroup","$newEntryBtn","section","defaultSectionHandle","selectedSection","_getSectionTriggerHref","_openCreateEntryModal","sectionId","newEntryBtnText","typeId","entryTypes","canPublish","sectionSourceKey","FieldLayoutDesigner","$tabContainer","$newTabBtn","$libraryToggle","$selectedLibrary","$fieldLibrary","$uiLibrary","$uiLibraryElements","$fieldSearch","$clearFieldSearchBtn","$fieldGroups","$fields","tabGrid","elementDrag","$workspace","$fieldSearchContainer","initTab","elementPlacementInputName","ElementDrag","customizableTabs","tabDrag","TabDrag","customizableUi","$libraryPicker","Listbox","$selectedOption","$matches","$group","$editBtn","data-action","initElement","Element","onTabOptionSelect","renameTab","removeTab","$prev","$next","$labelSpan","promptForTabName","getElementPlacementInputName","removeFieldByHandle","removeField","refreshCols","addTab","tabName","elementConfigInputName","designer","$placementInput","$configInput","config","isField","requirable","hasCustomWidth","hasSettings","settingsHtml","isRequired","createSettingsHud","initUi","updatePlacementInput","updateConfigInput","SlidePicker","step","valueLabel","pct","applyHudSettings","serializeArray","updateRequiredClass","console","required","BaseDrag","Drag","$insertion","showingInsertion","$caboose","findItems","createInsertion","createCaboose","removeCaboose","swapDraggeeWithInsertion","swapInsertionWithDraggee","setMidpoints","getClosestItem","_closestItem","_closestItemMouseDiff","_$item","_midpoint","_mouseDiff","getDist","checkForNewClosestItem","draggeeDisplay","visibility","FX_DURATION","helpers","_showDraggee","onDrag","draggingLibraryElement","draggingField","isDraggeeMandatory","isHoveringOverTab","hitTest","$fieldContainers","$libraryElement","targetPrefix","targetSelector","reverseTargetSelector","_$target","_$reverseTarget","getType","normalizeTargetSelector","findTargets","onToggleChange","nodeName","warn","getToggleVal","postVal","hideTarget","showTarget","_show","_currentHeight","$t","_targetHeight","totalCols","colGutterDrop","colPctWidth","possibleItemColspans","possibleItemPositionsByColspan","itemPositions","itemColspansByPosition","layouts","layout","itemHeights","leftPadding","_refreshingCols","_refreshColsAfterRefresh","_forceRefreshColsAfterRefresh","handleContainerHeightProxy","setItems","oldHeight","scrollHeight","gutter","itemIndex","tallestItemHeight","colIndex","itemHeight","remainder","itemHeightsByColspan","positionRight","positionLeft","minColspan","maxColspan","colspan","getItemWidthCss","minPosition","maxPosition","colHeights","createLayouts","layoutTotalCols","highestTotalCols","layoutHeights","shortestHeight","shortestLayouts","emptySpaces","emptySpace","colspans","getItemLeftPosCss","positions","isSimpleLayout","margin-bottom","positionItems","completeRefreshCols","onRefreshCols","getItemWidth","getItemWidthInPx","getItemLeftPosInPx","prevPositions","prevColspans","prevColHeights","prevEmptySpace","LayoutGenerator","endingCol","affectedColHeights","onItemResize","newHeight","tallestColHeightsByPosition","colHeightsForPosition","tallestColHeight","words","handleCasing","ImageUpload","initImageUpload","containerSelector","uploadAction","postParameters","fileInputSelector","uploadParamName","fileuploadfail","initButtons","uploadButtonSelector","deleteButtonSelector","refreshImage","onAfterRefreshImage","_onUploadError","$icon","previousSibling","nodeType","Node","TEXT_NODE","nodeValue","hudClass","indeterminate","dragger","dragStartMargin","outerContainer","X_AXIS","muteEvent","changed","_getOffMargin","_onMouseDown","_onMouseUp","dragging","RIGHT_KEY","LEFT_KEY","_getMargin","_onDrag","mouseDistX","_onDragStop","_onSettle","selectedOptionIndex","UP_KEY","selectPrev","DOWN_KEY","selectNext","selectedClass","focusClass","LivePreview","$extraFields","$dragHandle","$previewContainer","$iframeContainer","$iframe","$fieldPlaceholder","previewUrl","basePostData","fields","lastPostData","updateIframeInterval","loading","checkAgain","dragStartEditorWidth","_slideInOnIframeLoad","_handleSuccessProxy","_handleErrorProxy","_forceUpdateIframeProxy","_scrollX","_scrollY","_editorWidth","_editorWidthInPx","protocol","previewParams","extraFields","defaultEditorWidth","moveFieldsBack","editorWidthInPx","inPx","minEditorWidthInPx","exit","$editorHeader","getIframeWidth","$clone","_getClone","updateIframe","slideIn","createToken","previewAction","updateWidths","$newClone","field","contentWindow","scrollLeft","X-Craft-Token","xhrFields","withCredentials","crossDomain","forceUpdateIframe","handleSuccess","write","onResponse","handleError","copyInputValues","$textInput","$showPasswordToggle","showingPassword","passwordInput","initInputFocusEvents","hidePassword","setCurrentInput","updateToggleLabel","showPassword","togglePassword","onKeyDown","ALT_KEY","onKeyUp","onInputChange","$previewHeader","$targetBtn","$targetMenu","$deviceTypeContainer","$orientationBtn","$deviceMask","$devicePreviewContainer","iframeLoaded","$tempInput","activeTarget","isDeviceUpdating","deviceAnimationTimeout","currentDeviceType","deviceOrientation","deviceWidth","deviceHeight","deviceMaskDimensions","phone","tablet","iframeHeight","_updateIframeProxy","Pro","switchTarget","aria-selected","deviceType","aria-hidden","previewTarget","resetDevicePreview","_devicePreviewIsActive","updateDevicePreview","_useIframeResizer","previewIframeResizerOptions","resetScroll","refresh","sameHost","frameborder","wrap","iFrameResize","checkOrigin","scrolling","onInit","iframe","switchDeviceType","newDeviceType","switchOrientation","hZoom","wZoom","previewHeight","previewWidth","maskHeight","maskWidth","rotationDeg","marginTop","marginLeft","iFrameResizer","removeListeners","defaultSettings","_onHide","instance","loadAsset","focusItem","empty","desiredHeight","desiredWidth","containerHeight","containerWidth","minGutter","_resizeContainer","previewHtml","max-width","$innerProgressBar","$progressBarStatus","_itemCount","_processedItemCount","_displaySteps","displaySteps","setProcessedItemCount","fadeTo","incrementItemCount","percentage","$modalContainerDiv","$prompt","$promptApplyToRemainingContainer","$promptApplyToRemainingCheckbox","$promptApplyToRemainingLabel","$pomptChoices","_prompts","_promptBatchCallback","_promptBatchReturnData","_promptBatchNum","_showNextPromptInBatch","remainingInBatch","_showPrompt","_handleBatchPromptSelection","applyToRemaining","choiceData","itemsToGo","_promptCallback","$promptMessage","$promptChoices","$promptButtons","$radioButton","_selectPromptChoice","fadeOut","_cancelPrompt","totalSteps","_min","_max","Number","isInteger","prevAll","triggerEvent","aria-valuenow","aria-valuetext","$activeButton","startPositionX","graduationsMin","graduationsMax","slideMin","slideMax","$overlay","$cursor","$graduations","$graduationsUl","graduationsCalculatedWidth","_handleResize","valueToPosition","_handleTapStart","touch","startLeft","_handleTapMove","curX","positionToValue","_handleTapEnd","scaleMin","scaleMax","SlugGenerator","allowUppercaseInSlug","limitAutoSlugsToAscii","XRegExp","matchChain","slugWordSeparator","Structure","structureDrag","$parents","initToggle","StructureDrag","initNewChildMenus","viewStateKey","$addBtns","onNewChildMenuClick","showMenu","getIndent","level","baseIndent","nestedIndent","addElement","$addBtn","$parentUl","_removeUl","structure","draggeeLevel","$helperLi","$targets","draggeeHeight","$level","cancelDrag","$lis","$closestTarget","closestTargetPos","closestTargetYDiff","closestTargetOffset","closestTargetHeight","targetOffset","targetHeight","targetYMidpoint","targetYDiff","$closestTargetLi","closestTargetLevel","$nextTargetLi","nextTargetLevel","hoveringBetweenRows","draggeeX","targetItemMouseDiffX","$parentLis","$closestParentLi","closestParentLiXDiff","closestParentLevel","$parentLi","parentLiX","parentLiXDiff","parentLevel","onMouseUp","$draggeeParent","moved","$closestSiblings","newLevel","setLevel","structureId","prevId","indent","$childLis","StructureTableSorter","tableView","_basePadding","_helperMargin","_$titleHelperCell","_titleHelperCellOuterWidth","_ancestors","_updateAncestorsFrame","_updateAncestorsProxy","_draggeeLevel","_draggeeLevelDelta","draggingLastElements","_loadingDraggeeLevelDelta","_targetLevel","_targetLevelBounds","_positionChanged","singleHelper","helperSpacingY","findDraggee","$nextRow","nextRowLevel","nextRowLevelDelta","_getAjaxBaseData","delta","drag","canInsertBefore","_getLevelBounds","canInsertAfter","_getAncestors","_setTargetLevelBounds","_updateIndent","onInsertionPointChange","_updateAncestorsBeforeRepaint","levelDiff","padding","_getLevelIndent","$prevRow","prevRowLevel","$spinnerRow","_createSpinnerRowAfter","onPositionChange","_expandElement","onReturnHelpersToDraggees","newDraggeeIndexes","oldDraggeeIndexes","$postDraggeeItems","_minLevel","_maxLevel","forcePositionChange","_mouseDist","realMouseX","mousedownX","_indentationDist","LEVEL_INDENT","_targetLevelMouseDiff","_magnetImpact","MAX_GIVE","_closestLevelMagnetIndent","targetLevel","_level","_$prevRow","cancelAnimationFrame","_updateAncestors","_$ancestor","_newAncestors","HELPER_MARGIN","$selectedSortHeader","structureTableSort","_totalVisiblePostStructureTableDraggee","_morePendingPostStructureTableDraggee","initTableHeaders","_collapseElement","selectedSortAttr","$tableHeaders","selectedSortDir","_isStructureTableDraggingLastElements","positionedAfter","includeTableAttributesForSource","_updateTableAttributes","$nextNextRow","descendantOf","$nextRows","_handleSelectedSortHeaderClick","newSortDir","_handleSortHeaderClick","_handleUnselectedSortHeaderClick","TagSelectInput","searchMenu","$addTagInput","_ignoreBlur","selectTag","$hoverOption","$nextOption","focusOption","$prevOption","searchForTags","killSearchMenu","excludeIds","tagGroupId","tags","exclude","exactMatch","Menu","attachToElement","data-site-id","targetSiteId","data-label","data-editable","$titleContainer","autocomplete","inputmode","maxlength","autofocus","getAutofocusValue","getDisabledValue","readonly","showCharsLeft","createCopyTextInput","buttonId","execCommand","createCopyTextField","createCopyTextPrompt","createTextarea","createTextareaField","$select","data-target-prefix","optgroup","$optgroup","selected","data-target","data-reverse-target","reverseToggle","for","createCheckboxField","createCheckboxSelect","allValue","allChecked","showAllOption","allLabel","createCheckboxSelectField","fieldset","data-value","data-indeterminate-value","aria-labelledby","labelId","containerId","$colorPreviewContainer","createColorField","getMonth","formattedValue","timezone","defaultDate","createDateField","createDateRangePicker","today","getFullYear","getDate","startDate","endDate","$allOption","firstDayOffset","getDay","firstDay","$flex","$startDate","$endDate","$dateInputs","dpDiv","setPositionRelativeToAnchor","startTime","endTime","foundOption","btnClasses","timepicker","timepickerOptions","getHours","getMinutes","getSeconds","createTimeField","warning","addErrorsToField","addErrorsToList","$errors","clearErrorsFromField","_rejectedFiles","_extensionList","_totalFileCounter","_validFileCounter","autoUpload","fileupload","paramObject","getInProgress","onFileAdd","validateExtension","_createExtensionList","process","done","pass","fileExtension","maxFileSize","originalFiles","processErrorMessages","kinds","humanFileSize","maxUploadSize","bytes","u","toFixed","allowedKind","fileKinds","extensions","pasteZone","sequentialUploads","Accept","UriFormatGenerator","uriFormat","suffix"],"mappings":"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","file":"Craft.min.js","sourcesContent":["(function($){\n\n/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function(html) {\n    return html.replace(rxhtmlTag, \"<$1></$2>\");\n};\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Indexes an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        index: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.index() must be an array.';\n            }\n\n            return arr.reduce((index, obj, i) => {\n                index[typeof key === 'string' ? obj[key] : key(obj, i)] = obj;\n                return index;\n            }, {});\n        },\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                    if (format !== null && format !== 'integer') {\n                        throw `Message format 'number' is only supported for integer values.`;\n                    }\n                    let number = Craft.formatNumber(arg);\n                    let pos;\n                    if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                        number += `.${arg.substr(pos + 1)}`;\n                    }\n\n                    return number;\n                case 'none':\n                    return arg;\n                case 'plural':\n                    /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                    pluralStyle = [offsetValue] (selector '{' message '}')+\n                    offsetValue = \"offset:\" number\n                    selector = explicitValue | keyword\n                    explicitValue = '=' number  // adjacent, no white space in between\n                    keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                    message: see MessageFormat\n                    */\n                    if (typeof token[2] === 'undefined') {\n                        return false;\n                    }\n                    let plural = this._tokenizePattern(token[2]);\n                    const c = plural.length;\n                    let message = false;\n                    let offset = 0;\n                    for (let i = 0; i + 1 < c; i++) {\n                        if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                            return false;\n                        }\n                        let selector = Craft.trim(plural[i++]);\n                        let selectorChars = [...selector];\n\n                        if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                            let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                            if (pos === -1) {\n                                throw 'Message pattern is invalid.';\n                            }\n                            let offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                            selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                        }\n                        if (\n                            message === false &&\n                            selector === 'other' ||\n                            selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                            selector === 'one' && arg - offset === 1\n                        ) {\n                            message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                return p.replace('#', arg - offset);\n                            }).join(',');\n                        }\n                    }\n                    if (message !== false) {\n                        return this.formatMessage(message, args);\n                    }\n                    break;\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n\n            return false;\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * @param {string} key\n         * @param {boolean} shift\n         * @param {boolean} alt\n         */\n        shortcutText: function (key, shift, alt) {\n            if (Craft.clientOs === 'Mac') {\n                return (alt ? '⌥' : '') + (shift ? '⇧' : '') + '⌘' + key;\n            }\n            return 'Ctrl+' + (alt ? 'Alt+' : '') + (shift ? 'Shift+' : '') + key;\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[\\[\\]\\\\]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n\n                // Get the latest headers\n                this._getApiHeaders(cancelToken).then(apiHeaders => {\n                    // Send the API request\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    // Force the API to process the Craft headers if this is the first API request\n                    if (!this._apiHeaders) {\n                        options.params.processCraftHeaders = 1;\n                    }\n\n                    axios.request(options).then((apiResponse) => {\n                        // Process the response headers\n                        this._processApiHeaders(apiResponse.headers, cancelToken).then(() => {\n                            // Finally return the API response data\n                            resolve(apiResponse.data);\n                        }).catch(reject);\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        _getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    resolve(response.data);\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _processApiHeaders: function(headers, cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Have we already processed them?\n                if (this._apiHeaders) {\n                    resolve();\n                    return;\n                }\n\n                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                    data: {\n                        headers: headers,\n                    },\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    this._loadingApiHeaders = false;\n\n                    resolve();\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                    }\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _rejectApiRequests: function(reject, e) {\n            this._loadingApiHeaders = false;\n            reject(e);\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1](e);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = function() {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                }.bind(this);\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         */\n        findDeltaData: function(oldData, newData, deltaNames) {\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, true);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                }\n            }\n\n            return params.join('&');\n        },\n\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, useInitialValues) {\n            var grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            var n, paramName;\n\n            paramLoop: for (var p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (n = deltaNames.length - 1; n >= 0; n--) {\n                    paramName = decodeURIComponent(params[p]).substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(params[p]);\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(params[p]);\n                }\n            }\n\n            if (useInitialValues) {\n                for (let name in Craft.initialDeltaValues) {\n                    if (Craft.initialDeltaValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(Craft.initialDeltaValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return arr.includes(elem);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            // Normalize NFD chars to NFC\n            str = str.normalize('NFC');\n\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('.datetimewrapper', $container).datetime();\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a', $container).each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n    });\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: {\n                        customTrigger: $btn,\n                    }\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<button/>', {\n                                type: 'button',\n                                class: 'clear-btn',\n                                title: Craft.t('app', 'Clear'),\n                                'aria-label': Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('');\n                                    }\n                                    $btn.remove();\n                                    $inputs.first().focus();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n    });\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend({\n    $element: null,\n    elementId: null,\n    siteId: null,\n    deltaNames: null,\n    initialData: null,\n\n    $form: null,\n    $fieldsContainer: null,\n    $cancelBtn: null,\n    $saveBtn: null,\n    $spinner: null,\n\n    $siteSelect: null,\n    $siteSpinner: null,\n\n    hud: null,\n\n    init: function(element, settings) {\n        // Param mapping\n        if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n            // (settings)\n            settings = element;\n            element = null;\n        }\n\n        this.$element = $(element);\n        this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n        this.loadHud();\n    },\n\n    setElementAttribute: function(name, value) {\n        if (!this.settings.attributes) {\n            this.settings.attributes = {};\n        }\n\n        if (value === null) {\n            delete this.settings.attributes[name];\n        } else {\n            this.settings.attributes[name] = value;\n        }\n    },\n\n    getBaseData: function() {\n        var data = $.extend({}, this.settings.params);\n\n        if (this.settings.siteId) {\n            data.siteId = this.settings.siteId;\n        } else if (this.$element && this.$element.data('site-id')) {\n            data.siteId = this.$element.data('site-id');\n        }\n\n        if (this.settings.elementId) {\n            data.elementId = this.settings.elementId;\n        } else if (this.$element && this.$element.data('id')) {\n            data.elementId = this.$element.data('id');\n        }\n\n        if (this.settings.elementType) {\n            data.elementType = this.settings.elementType;\n        }\n\n        if (this.settings.attributes) {\n            data.attributes = this.settings.attributes;\n        }\n\n        if (this.settings.prevalidate) {\n            data.prevalidate = 1;\n        }\n\n        return data;\n    },\n\n    loadHud: function() {\n        this.onBeginLoading();\n        var data = this.getBaseData();\n        data.includeSites = Craft.isMultiSite && this.settings.showSiteSwitcher;\n        Craft.postActionRequest('elements/get-editor-html', data, $.proxy(this, 'showHud'));\n    },\n\n    showHud: function(response, textStatus) {\n        this.onEndLoading();\n\n        if (textStatus === 'success') {\n            var $hudContents = $();\n\n            if (response.sites) {\n                var $header = $('<div class=\"hud-header\"/>');\n\n                if (response.sites.length === 1) {\n                    $('<h5/>', {text: response.sites[0].name}).appendTo($header);\n                } else {\n                    var $siteSelectContainer = $('<div class=\"select\"/>').appendTo($header);\n\n                    this.$siteSelect = $('<select/>').appendTo($siteSelectContainer);\n                    this.$siteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($header);\n\n                    for (var i = 0; i < response.sites.length; i++) {\n                        var siteInfo = response.sites[i];\n                        $('<option value=\"' + siteInfo.id + '\"' + (siteInfo.id == response.siteId ? ' selected=\"selected\"' : '') + '>' + siteInfo.name + '</option>').appendTo(this.$siteSelect);\n                    }\n\n                    this.addListener(this.$siteSelect, 'change', 'switchSite');\n                }\n\n                $hudContents = $hudContents.add($header);\n            }\n\n            this.$form = $('<div/>');\n            this.$fieldsContainer = $('<div class=\"fields\"/>').appendTo(this.$form);\n\n            this.updateForm(response, true);\n\n            this.onCreateForm(this.$form);\n\n            var $footer = $('<div class=\"hud-footer\"/>').appendTo(this.$form),\n                $buttonsContainer = $('<div class=\"buttons right\"/>').appendTo($footer);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo($buttonsContainer);\n            this.$saveBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($buttonsContainer);\n            this.$spinner = $('<div class=\"spinner hidden\"/>').appendTo($buttonsContainer);\n\n            $hudContents = $hudContents.add(this.$form);\n\n            if (!this.hud) {\n                var hudTrigger = (this.settings.hudTrigger || this.$element);\n\n                this.hud = new Garnish.HUD(hudTrigger, $hudContents, {\n                    bodyClass: 'body elementeditor',\n                    closeOtherHUDs: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    onShow: this.onShowHud.bind(this),\n                    onHide: this.onHideHud.bind(this),\n                    onSubmit: this.saveElement.bind(this),\n                });\n\n                Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, this.maybeCloseHud.bind(this));\n                this.hud.addListener(this.hud.$shade, 'click', this.maybeCloseHud.bind(this));\n\n                this.hud.$hud.data('elementEditor', this);\n\n                // Disable browser input validation\n                this.hud.$body.attr('novalidate', '');\n\n                this.hud.on('hide', $.proxy(function() {\n                    delete this.hud;\n                }, this));\n            } else {\n                this.hud.updateBody($hudContents);\n                this.hud.updateSizeAndPosition();\n            }\n\n            // Focus on the first text input\n            $hudContents.find('.text:first').trigger('focus');\n\n            this.addListener(this.$cancelBtn, 'click', function() {\n                this.hud.hide();\n            });\n        }\n    },\n\n    switchSite: function() {\n        if (this.isDirty() && !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))) {\n            this.$siteSelect.val(this.siteId);\n            return;\n        }\n\n        var newSiteId = this.$siteSelect.val();\n\n        if (newSiteId == this.siteId) {\n            return;\n        }\n\n        this.$siteSpinner.removeClass('hidden');\n\n        this.reloadForm({siteId: newSiteId}, $.proxy(function(textStatus) {\n            this.$siteSpinner.addClass('hidden');\n            if (textStatus !== 'success') {\n                // Reset the site select\n                this.$siteSelect.val(this.siteId);\n            }\n        }, this));\n    },\n\n    reloadForm: function(data, callback) {\n        data = $.extend(this.getBaseData(), data);\n\n        Craft.postActionRequest('elements/get-editor-html', data, $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                this.updateForm(response, true);\n            }\n\n            if (callback) {\n                callback(textStatus);\n            }\n        }, this));\n    },\n\n    updateForm: function(response, refreshInitialData) {\n        this.siteId = response.siteId;\n        this.$fieldsContainer.html(response.html);\n\n        if (refreshInitialData !== false) {\n            this.deltaNames = response.deltaNames;\n        }\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$fieldsContainer.find('> .meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        Garnish.requestAnimationFrame($.proxy(function() {\n            Craft.appendHeadHtml(response.headHtml);\n            Craft.appendFootHtml(response.footHtml);\n            Craft.initUiElements(this.$fieldsContainer);\n\n            if (refreshInitialData) {\n                this.initialData = this.hud.$body.serialize();\n            }\n        }, this));\n    },\n\n    saveElement: function() {\n        var validators = this.settings.validators;\n\n        if ($.isArray(validators)) {\n            for (var i = 0; i < validators.length; i++) {\n                if ($.isFunction(validators[i]) && !validators[i].call()) {\n                    return false;\n                }\n            }\n        }\n\n        this.$spinner.removeClass('hidden');\n\n        var data = $.param(this.getBaseData()) + '&' + this.hud.$body.serialize();\n        data = Craft.findDeltaData(this.initialData, data, this.deltaNames);\n\n        Craft.postActionRequest('elements/save-element', data, $.proxy(function(response, textStatus) {\n            this.$spinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (this.$element && this.siteId == this.$element.data('site-id')) {\n                        // Update the label\n                        var $title = this.$element.find('.title'),\n                            $a = $title.find('a');\n\n                        if ($a.length && response.cpEditUrl) {\n                            $a.attr('href', response.cpEditUrl);\n                            $a.text(response.newTitle);\n                        } else {\n                            $title.text(response.newTitle);\n                        }\n                    }\n\n                    if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                        Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                            type: Craft.elementTypeNames[this.settings.elementType][0],\n                        }));\n                    }\n\n                    this.closeHud();\n                    this.onSaveElement(response);\n                } else {\n                    this.updateForm(response, false);\n                    Garnish.shake(this.hud.$hud);\n                }\n            }\n        }, this));\n    },\n\n    isDirty: function() {\n        return this.hud.$body.serialize() !== this.initialData;\n    },\n\n    maybeCloseHud: function(ev) {\n        if (!this.hud || !this.hud.showing) {\n            return;\n        }\n\n        if (!this.isDirty() || confirm('Are you sure you want to close the editor? Any changes will be lost.')) {\n            this.closeHud();\n        }\n    },\n\n    closeHud: function() {\n        if (!this.hud || !this.hud.showing) {\n            return;\n        }\n\n        this.hud.hide();\n        delete this.hud;\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    onShowHud: function() {\n        Garnish.shortcutManager.registerShortcut({\n            keyCode: Garnish.S_KEY,\n            ctrl: true,\n        }, this.saveElement.bind(this));\n        this.settings.onShowHud();\n        this.trigger('showHud');\n    },\n\n    onHideHud: function() {\n        this.settings.onHideHud();\n        this.trigger('hideHud');\n    },\n\n    onBeginLoading: function() {\n        if (this.$element) {\n            this.$element.addClass('loading');\n        }\n\n        this.settings.onBeginLoading();\n        this.trigger('beginLoading');\n    },\n\n    onEndLoading: function() {\n        if (this.$element) {\n            this.$element.removeClass('loading');\n        }\n\n        this.settings.onEndLoading();\n        this.trigger('endLoading');\n    },\n\n    onSaveElement: function(response) {\n        this.settings.onSaveElement(response);\n        this.trigger('saveElement', {\n            response: response\n        });\n\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n    },\n\n    onCreateForm: function($form) {\n        this.settings.onCreateForm($form);\n    }\n}, {\n    defaults: {\n        hudTrigger: null,\n        showSiteSwitcher: true,\n        elementId: null,\n        elementType: null,\n        siteId: null,\n        attributes: null,\n        params: null,\n        prevalidate: false,\n        elementIndex: null,\n\n        onShowHud: $.noop,\n        onHideHud: $.noop,\n        onBeginLoading: $.noop,\n        onEndLoading: $.noop,\n        onCreateForm: $.noop,\n        onSaveElement: $.noop,\n\n        validators: []\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend({\n    initialized: false,\n    elementType: null,\n\n    instanceState: null,\n    sourceStates: null,\n    sourceStatesStorageKey: null,\n\n    searchTimeout: null,\n    sourceSelect: null,\n\n    $container: null,\n    $main: null,\n    isIndexBusy: false,\n\n    $sidebar: null,\n    showingSidebar: null,\n    sourceKey: null,\n    sourceViewModes: null,\n    $source: null,\n    sourcesByKey: null,\n    $visibleSources: null,\n\n    $customizeSourcesBtn: null,\n    customizeSourcesModal: null,\n\n    $toolbar: null,\n    toolbarOffset: null,\n\n    $search: null,\n    searching: false,\n    searchText: null,\n    trashed: false,\n    drafts: false,\n    $clearSearchBtn: null,\n\n    $statusMenuBtn: null,\n    $statusMenuContainer: null,\n    statusMenu: null,\n    status: null,\n\n    $siteMenuBtn: null,\n    siteMenu: null,\n    siteId: null,\n\n    $sortMenuBtn: null,\n    sortMenu: null,\n    $sortAttributesList: null,\n    $sortDirectionsList: null,\n    $scoreSortAttribute: null,\n    $structureSortAttribute: null,\n\n    $elements: null,\n    $viewModeBtnContainer: null,\n    viewModeBtns: null,\n    viewMode: null,\n    view: null,\n    _autoSelectElements: null,\n    $countSpinner: null,\n    $countContainer: null,\n    page: 1,\n    resultSet: null,\n    totalResults: null,\n    $exportBtn: null,\n\n    actions: null,\n    actionsHeadHtml: null,\n    actionsFootHtml: null,\n    $selectAllContainer: null,\n    $selectAllCheckbox: null,\n    showingActionTriggers: false,\n    exporters: null,\n    exportersByType: null,\n    _$detachedToolbarItems: null,\n    _$triggers: null,\n\n    _ignoreFailedRequest: false,\n    _cancelToken: null,\n\n    /**\n     * Constructor\n     */\n    init: function(elementType, $container, settings) {\n        this.elementType = elementType;\n        this.$container = $container;\n        this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n        // Set the state objects\n        // ---------------------------------------------------------------------\n\n        this.instanceState = this.getDefaultInstanceState();\n\n        this.sourceStates = {};\n\n        // Instance states (selected source) are stored by a custom storage key defined in the settings\n        if (this.settings.storageKey) {\n            $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n        }\n\n        // Source states (view mode, etc.) are stored by the element type and context\n        this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n        $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n        // Find the DOM elements\n        // ---------------------------------------------------------------------\n\n        this.$main = this.$container.find('.main');\n        this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n        this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n        this.$statusMenuContainer = this.$statusMenuBtn.parent();\n        this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n        this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n        this.$search = this.$toolbar.find('.search:first input:first');\n        this.$clearSearchBtn = this.$toolbar.find('.search:first > .clear');\n        this.$sidebar = this.$container.find('.sidebar:first');\n        this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n        this.$elements = this.$container.find('.elements:first');\n        this.$countSpinner = this.$container.find('#count-spinner');\n        this.$countContainer = this.$container.find('#count-container');\n        this.$exportBtn = this.$container.find('#export-btn');\n\n        // Hide sidebar if needed\n        if (this.settings.hideSidebar) {\n            this.$sidebar.hide();\n            $('.body, .content', this.$container).removeClass('has-sidebar');\n        }\n\n        // Initialize the sources\n        // ---------------------------------------------------------------------\n\n        if (!this.initSources()) {\n            return;\n        }\n\n        // Customize button\n        if (this.$customizeSourcesBtn.length) {\n            this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n        }\n\n        // Initialize the status menu\n        // ---------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n            this.statusMenu.on('optionselect', $.proxy(this, '_handleStatusChange'));\n        }\n\n        // Initialize the site menu\n        // ---------------------------------------------------------------------\n\n        // Is there a site menu?\n        if (this.$siteMenuBtn.length) {\n            this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n            // Figure out the initial site\n            var $option = this.siteMenu.$options.filter('.sel:first');\n\n            if (!$option.length) {\n                $option = this.siteMenu.$options.first();\n            }\n\n            if ($option.length) {\n                this._setSite($option.data('site-id'));\n            } else {\n                // No site options -- they must not have any site permissions\n                this.settings.criteria = {id: '0'};\n            }\n\n            this.siteMenu.on('optionselect', $.proxy(this, '_handleSiteChange'));\n\n            if (this.siteId) {\n                // Should we be using a different default site?\n                var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                if (defaultSiteId && defaultSiteId != this.siteId) {\n                    // Is that one available here?\n                    var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                    if ($storedSiteOption.length) {\n                        // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                        $storedSiteOption.trigger('click');\n                    }\n                }\n            }\n        } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n            this._setSite(this.settings.criteria.siteId);\n        } else {\n            this._setSite(Craft.siteId);\n        }\n\n        // Don't let the criteria override the selected site\n        if (this.settings.criteria && this.settings.criteria.siteId) {\n            delete this.settings.criteria.siteId;\n        }\n\n        // Initialize the search input\n        // ---------------------------------------------------------------------\n\n        // Automatically update the elements after new search text has been sitting for a 1/2 second\n        this.addListener(this.$search, 'input', $.proxy(function() {\n            if (!this.searching && this.$search.val()) {\n                this.startSearching();\n            } else if (this.searching && !this.$search.val()) {\n                this.stopSearching();\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout($.proxy(this, 'updateElementsIfSearchTextChanged'), 500);\n        }, this));\n\n        // Update the elements when the Return key is pressed\n        this.addListener(this.$search, 'keypress', $.proxy(function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.updateElementsIfSearchTextChanged();\n            }\n        }, this));\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearSearchBtn, 'click', $.proxy(function() {\n            this.$search.val('');\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            this.stopSearching();\n\n            this.updateElementsIfSearchTextChanged();\n        }, this));\n\n        // Auto-focus the Search box\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$search.trigger('focus');\n        }\n\n        // Initialize the sort menu\n        // ---------------------------------------------------------------------\n\n        // Is there a sort menu?\n        if (this.$sortMenuBtn.length) {\n            this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n            this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n            this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n            this.sortMenu.on('optionselect', $.proxy(this, '_handleSortChange'));\n        }\n\n        // Initialize the Export button\n        // ---------------------------------------------------------------------\n\n        this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n        // Let everyone know that the UI is initialized\n        // ---------------------------------------------------------------------\n\n        this.initialized = true;\n        this.afterInit();\n\n        // Select the initial source\n        // ---------------------------------------------------------------------\n\n        this.selectDefaultSource();\n\n        // Load the first batch of elements!\n        // ---------------------------------------------------------------------\n\n        // Default to whatever page is in the URL\n        this.setPage(Craft.pageNum);\n\n        this.updateElements(true);\n    },\n\n    afterInit: function() {\n        this.onAfterInit();\n    },\n\n    _createCancelToken: function() {\n        this._cancelToken = axios.CancelToken.source();\n        return this._cancelToken.token;\n    },\n\n    _cancelRequests: function() {\n        if (this._cancelToken) {\n            this._ignoreFailedRequest = true;\n            this._cancelToken.cancel();\n            Garnish.requestAnimationFrame(() => {\n                this._ignoreFailedRequest = false;\n            });\n        }\n    },\n\n    getSourceContainer: function() {\n        return this.$sidebar.find('nav > ul');\n    },\n\n    get $sources() {\n        if (!this.sourceSelect) {\n            return undefined;\n        }\n\n        return this.sourceSelect.$items;\n    },\n\n    initSources: function() {\n        var $sources = this._getSourcesInList(this.getSourceContainer());\n\n        // No source, no party.\n        if ($sources.length === 0) {\n            return false;\n        }\n\n        // The source selector\n        if (!this.sourceSelect) {\n            this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                multi: false,\n                allowEmpty: false,\n                vertical: true,\n                onSelectionChange: $.proxy(this, '_handleSourceSelectionChange')\n            });\n        }\n\n        this.sourcesByKey = {};\n        this._initSources($sources);\n\n        return true;\n    },\n\n    selectDefaultSource: function() {\n        var sourceKey = this.getDefaultSourceKey(),\n            $source;\n\n        if (sourceKey) {\n            $source = this.getSourceByKey(sourceKey);\n\n            // Make sure it's visible\n            if (this.$visibleSources.index($source) === -1) {\n                $source = null;\n            }\n        }\n\n        if (!sourceKey || !$source) {\n            // Select the first source by default\n            $source = this.$visibleSources.first();\n        }\n\n        return this.selectSource($source);\n    },\n\n    refreshSources: function() {\n        this.sourceSelect.removeAllItems();\n\n        var params = {\n            context: this.settings.context,\n            elementType: this.elementType\n        };\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n            data: params,\n        }).then((response) => {\n            this.setIndexAvailable();\n            this.getSourceContainer().replaceWith(response.data.html);\n            this.initSources();\n            this.selectDefaultSource();\n        }).catch(() => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    initSource: function($source) {\n        this.sourceSelect.addItems($source);\n        this.initSourceToggle($source);\n        this.sourcesByKey[$source.data('key')] = $source;\n\n        if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n            this._expandSource($source);\n        }\n    },\n\n    initSourceToggle: function($source) {\n        // Remove handlers for the same thing. Just in case.\n        this.deinitSourceToggle($source);\n\n        var $toggle = this._getSourceToggle($source);\n\n        if ($toggle.length) {\n            this.addListener($source, 'dblclick', '_handleSourceDblClick');\n            this.addListener($toggle, 'click', '_handleSourceToggleClick');\n            $source.data('hasNestedSources', true);\n        } else {\n            $source.data('hasNestedSources', false);\n        }\n    },\n\n    deinitSource: function($source) {\n        this.sourceSelect.removeItems($source);\n        this.deinitSourceToggle($source);\n        delete this.sourcesByKey[$source.data('key')];\n    },\n\n    deinitSourceToggle: function($source) {\n        if ($source.data('hasNestedSources')) {\n            this.removeListener($source, 'dblclick');\n            this.removeListener(this._getSourceToggle($source), 'click');\n        }\n\n        $source.removeData('hasNestedSources');\n    },\n\n    getDefaultInstanceState: function() {\n        return {\n            selectedSource: null,\n            expandedSources: []\n        };\n    },\n\n    getDefaultSourceKey: function() {\n        if (this.settings.defaultSource) {\n            var paths = this.settings.defaultSource.split('/'),\n                path = '';\n\n            // Expand the tree\n            for (var i = 0; i < paths.length; i++) {\n                path += paths[i];\n                var $source = this.getSourceByKey(path);\n\n                // If the folder can't be found, then just go to the stored instance source.\n                if (!$source) {\n                    return this.instanceState.selectedSource;\n                }\n\n                this._expandSource($source);\n                path += '/';\n            }\n\n            // Just make sure that the modal is aware of the newly expanded sources, too.\n            this._setSite(this.siteId);\n\n            return this.settings.defaultSource;\n        }\n\n        return this.instanceState.selectedSource;\n    },\n\n    getDefaultExpandedSources: function() {\n        return this.instanceState.expandedSources;\n    },\n\n    startSearching: function() {\n        // Show the clear button and add/select the Score sort option\n        this.$clearSearchBtn.removeClass('hidden');\n\n        if (!this.$scoreSortAttribute) {\n            this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n            this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n        }\n\n        this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n        this.searching = true;\n\n        this._updateStructureSortOption();\n        this.setSortAttribute('score');\n    },\n\n    stopSearching: function() {\n        // Hide the clear button and Score sort option\n        this.$clearSearchBtn.addClass('hidden');\n\n        this.$scoreSortAttribute.detach();\n\n        this.searching = false;\n\n        this._updateStructureSortOption();\n    },\n\n    setInstanceState: function(key, value) {\n        if (typeof key === 'object') {\n            $.extend(this.instanceState, key);\n        } else {\n            this.instanceState[key] = value;\n        }\n\n        this.storeInstanceState();\n    },\n\n    storeInstanceState: function() {\n        if (this.settings.storageKey) {\n            Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n        }\n    },\n\n    getSourceState: function(source, key, defaultValue) {\n        if (typeof this.sourceStates[source] === 'undefined') {\n            // Set it now so any modifications to it by whoever's calling this will be stored.\n            this.sourceStates[source] = {};\n        }\n\n        if (typeof key === 'undefined') {\n            return this.sourceStates[source];\n        } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n            return this.sourceStates[source][key];\n        } else {\n            return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n        }\n    },\n\n    getSelectedSourceState: function(key, defaultValue) {\n        return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n    },\n\n    setSelecetedSourceState: function(key, value) {\n        var viewState = this.getSelectedSourceState();\n\n        if (typeof key === 'object') {\n            $.extend(viewState, key);\n        } else {\n            viewState[key] = value;\n        }\n\n        this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n        // Store it in localStorage too\n        Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n    },\n\n    storeSortAttributeAndDirection: function() {\n        var attr = this.getSelectedSortAttribute();\n\n        if (attr !== 'score') {\n            this.setSelecetedSourceState({\n                order: attr,\n                sort: this.getSelectedSortDirection()\n            });\n        }\n    },\n\n    /**\n     * Sets the page number.\n     */\n    setPage: function(page) {\n        if (this.settings.context !== 'index') {\n            return;\n        }\n\n        page = Math.max(page, 1);\n        this.page = page;\n\n        // Update the URL\n        var url = document.location.href\n            .replace(/\\?.*$/, '')\n            .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n            .replace(/\\/+$/, '');\n\n        if (this.page !== 1) {\n            if (Craft.pageTrigger[0] !== '?') {\n                url += '/';\n            }\n            url += Craft.pageTrigger + this.page;\n        }\n\n        history.replaceState({}, '', url);\n    },\n\n    _resetCount: function() {\n        this.resultSet = null;\n        this.totalResults = null;\n    },\n\n    /**\n     * Returns the data that should be passed to the elementIndex/getElements controller action\n     * when loading elements.\n     */\n    getViewParams: function() {\n        var criteria = {\n            siteId: this.siteId,\n            search: this.searchText,\n            offset: this.settings.batchSize * (this.page - 1),\n            limit: this.settings.batchSize,\n        };\n\n        // Only set drafts/draftOf/trashed params when needed, so we don't potentially override a source's criteria\n        if (\n            this.settings.canHaveDrafts &&\n            (this.drafts || (this.settings.context === 'index' && !this.status))\n        ) {\n            criteria.drafts = this.drafts || null;\n            criteria.savedDraftsOnly = true;\n            if (!this.drafts) {\n                criteria.draftOf = false;\n            }\n        }\n        if (this.trashed) {\n            criteria.trashed = true;\n        }\n\n        if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n            criteria.status = this.status;\n        }\n\n        $.extend(criteria, this.settings.criteria);\n\n        var params = {\n            context: this.settings.context,\n            elementType: this.elementType,\n            source: this.instanceState.selectedSource,\n            criteria: criteria,\n            disabledElementIds: this.settings.disabledElementIds,\n            viewState: $.extend({}, this.getSelectedSourceState()),\n            paginated: this._isViewPaginated() ? 1 : 0,\n        };\n\n        // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n        params.viewState.order = this.getSelectedSortAttribute();\n        params.viewState.sort = this.getSelectedSortDirection();\n\n        if (this.getSelectedSortAttribute() === 'structure') {\n            if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                this.instanceState.collapsedElementIds = [];\n            }\n            params.collapsedElementIds = this.instanceState.collapsedElementIds;\n        }\n\n        // Give plugins a chance to hook in here\n        this.trigger('registerViewParams', {\n            params: params,\n        });\n\n        return params;\n    },\n\n    updateElements: function(preservePagination) {\n        // Ignore if we're not fully initialized yet\n        if (!this.initialized) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        this.setIndexBusy();\n\n        // Kill the old view class\n        if (this.view) {\n            this.view.destroy();\n            delete this.view;\n        }\n\n        if (preservePagination !== true) {\n            this.setPage(1);\n            this._resetCount();\n        }\n\n        var params = this.getViewParams();\n\n        Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n            data: params,\n            cancelToken: this._createCancelToken(),\n        }).then((response) => {\n            this.setIndexAvailable();\n            (this.settings.context === 'index' ? Garnish.$scrollContainer : this.$main).scrollTop(0);\n            this._updateView(params, response.data);\n        }).catch(e => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    updateElementsIfSearchTextChanged: function() {\n        if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n            this.updateElements();\n        }\n    },\n\n    showActionTriggers: function() {\n        // Ignore if they're already shown\n        if (this.showingActionTriggers) {\n            return;\n        }\n\n        // Hard-code the min toolbar height in case it was taller than the actions toolbar\n        // (prevents the elements from jumping if this ends up being a double-click)\n        this.$toolbar.css('min-height', this.$toolbar.height());\n\n        // Hide any toolbar inputs\n        this._$detachedToolbarItems = this.$toolbar.children();\n        this._$detachedToolbarItems.detach();\n\n        if (!this._$triggers) {\n            this._createTriggers();\n        } else {\n            this._$triggers.appendTo(this.$toolbar);\n        }\n\n        this.showingActionTriggers = true;\n    },\n\n    submitAction: function(action, actionParams) {\n        // Make sure something's selected\n        var selectedElementIds = this.view.getSelectedElementIds(),\n            totalSelected = selectedElementIds.length;\n\n        if (totalSelected === 0) {\n            return;\n        }\n\n        if (typeof action === 'string') {\n            action = this._findAction(action);\n        }\n\n        if (action.confirm && !confirm(action.confirm)) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        // Get ready to submit\n        var viewParams = this.getViewParams();\n\n        actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n        var params = $.extend(viewParams, action.settings || {}, actionParams, {\n            elementAction: action.type,\n            elementIds: selectedElementIds\n        });\n\n        // Do it\n        this.setIndexBusy();\n        this._autoSelectElements = selectedElementIds;\n\n        if (action.download) {\n            if (Craft.csrfTokenName) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n            Craft.downloadFromUrl('POST', Craft.getActionUrl(this.settings.submitActionsAction), params).then(response => {\n                this.setIndexAvailable();\n            }).catch(e => {\n                this.setIndexAvailable();\n            });\n        } else {\n            Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                if (response.data.success) {\n                    // Update the count text too\n                    this._resetCount();\n                    this._updateView(viewParams, response.data);\n\n                    if (response.data.message) {\n                        Craft.cp.displayNotice(response.data.message);\n                    }\n\n                    this.afterAction(action, params);\n                } else {\n                    Craft.cp.displayError(response.data.message);\n                }\n            }).catch(() => {\n                this.setIndexAvailable();\n            });\n        }\n    },\n\n    _findAction: function(actionClass) {\n        for (var i = 0; i < this.actions.length; i++) {\n            if (this.actions[i].type === actionClass) {\n                return this.actions[i];\n            }\n        }\n        throw `Invalid element action: ${actionClass}`;\n    },\n\n    afterAction: function(action, params) {\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n\n        this.onAfterAction(action, params);\n    },\n\n    hideActionTriggers: function() {\n        // Ignore if there aren't any\n        if (!this.showingActionTriggers) {\n            return;\n        }\n\n        this._$detachedToolbarItems.appendTo(this.$toolbar);\n        this._$triggers.detach();\n        // this._$detachedToolbarItems.removeClass('hidden');\n\n        // Unset the min toolbar height\n        this.$toolbar.css('min-height', '');\n\n        this.showingActionTriggers = false;\n    },\n\n    updateActionTriggers: function() {\n        // Do we have an action UI to update?\n        if (this.actions) {\n            var totalSelected = this.view.getSelectedElements().length;\n\n            if (totalSelected !== 0) {\n                if (totalSelected === this.view.getEnabledElements().length) {\n                    this.$selectAllCheckbox.removeClass('indeterminate');\n                    this.$selectAllCheckbox.addClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'true');\n                } else {\n                    this.$selectAllCheckbox.addClass('indeterminate');\n                    this.$selectAllCheckbox.removeClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'mixed');\n                }\n\n                this.showActionTriggers();\n            } else {\n                this.$selectAllCheckbox.removeClass('indeterminate checked');\n                this.$selectAllContainer.attr('aria-checked', 'false');\n                this.hideActionTriggers();\n            }\n        }\n    },\n\n    getSelectedElements: function() {\n        return this.view ? this.view.getSelectedElements() : $();\n    },\n\n    getSelectedElementIds: function() {\n        return this.view ? this.view.getSelectedElementIds() : [];\n    },\n\n    setStatus: function(status) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n        if ($option.length) {\n            this.statusMenu.selectOption($option[0]);\n        }\n    },\n\n    getSortAttributeOption: function(attr) {\n        return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n    },\n\n    getSelectedSortAttribute: function() {\n        return this.$sortAttributesList.find('a.sel:first').data('attr');\n    },\n\n    setSortAttribute: function(attr) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.getSortAttributeOption(attr);\n\n        if ($option.length) {\n            this.$sortAttributesList.find('a.sel').removeClass('sel');\n            $option.addClass('sel');\n\n            var label = $option.text();\n            this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n            this.$sortMenuBtn.text(label);\n\n            if (attr === 'score') {\n                this.setSortDirection('desc');\n            } else {\n                this.setSortDirection($option.data('default-dir') || 'asc');\n            }\n\n            if (attr === 'structure') {\n                this.$sortDirectionsList.find('a').addClass('disabled');\n            } else {\n                this.$sortDirectionsList.find('a').removeClass('disabled');\n            }\n        }\n    },\n\n    getSortDirectionOption: function(dir) {\n        return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n    },\n\n    getSelectedSortDirection: function() {\n        return this.$sortDirectionsList.find('a.sel:first').data('dir');\n    },\n\n    getSelectedViewMode: function() {\n        return this.getSelectedSourceState('mode') || 'table';\n    },\n\n    setSortDirection: function(dir) {\n        if (dir !== 'desc') {\n            dir = 'asc';\n        }\n\n        this.$sortMenuBtn.attr('data-icon', dir);\n        this.$sortDirectionsList.find('a.sel').removeClass('sel');\n        this.getSortDirectionOption(dir).addClass('sel');\n    },\n\n    getSourceByKey: function(key) {\n        if (typeof this.sourcesByKey[key] === 'undefined') {\n            return null;\n        }\n\n        return this.sourcesByKey[key];\n    },\n\n    selectSource: function($source) {\n        if (!$source || !$source.length) {\n            return false;\n        }\n\n        if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n            return false;\n        }\n\n        // Hide action triggers if they're currently being shown\n        this.hideActionTriggers();\n\n        this.$source = $source;\n        this.sourceKey = $source.data('key');\n        this.setInstanceState('selectedSource', this.sourceKey);\n        this.sourceSelect.selectItem($source);\n\n        Craft.cp.updateSidebarMenuLabel();\n\n        if (this.searching) {\n            // Clear the search value without causing it to update elements\n            this.searchText = null;\n            this.$search.val('');\n            this.stopSearching();\n        }\n\n        // Sort menu\n        // ----------------------------------------------------------------------\n\n        // Remove any existing custom sort options from the menu\n        this.$sortAttributesList.children('li[data-extra]').remove();\n\n        // Does this source have any custom sort options?\n        let sortOptions = this.$source.data('sort-options')\n        if (sortOptions) {\n            for (let i = 0; i < sortOptions.length; i++) {\n                let $option = $('<li/>', {\n                    'data-extra': true,\n                })\n                    .append(\n                        $('<a/>', {\n                            text: sortOptions[i][0],\n                            'data-attr': sortOptions[i][1],\n                        })\n                    )\n                    .appendTo(this.$sortAttributesList);\n                this.sortMenu.addOptions($option.children());\n            }\n        }\n\n        // Does this source have a structure?\n        if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n            if (!this.$structureSortAttribute) {\n                this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                this.sortMenu.addOptions(this.$structureSortAttribute.children());\n            }\n\n            this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n        } else if (this.$structureSortAttribute) {\n            this.$structureSortAttribute.removeClass('sel').detach();\n        }\n\n        this.setStoredSortOptionsForSource();\n\n        // Status menu\n        // ----------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                this.$statusMenuContainer.addClass('hidden');\n            } else {\n                this.$statusMenuContainer.removeClass('hidden');\n            }\n\n            if (this.trashed) {\n                // Swap to the initial status\n                var $firstOption = this.statusMenu.$options.first();\n                this.setStatus($firstOption.data('status'));\n            }\n        }\n\n        // View mode buttons\n        // ----------------------------------------------------------------------\n\n        // Clear out any previous view mode data\n        if (this.$viewModeBtnContainer) {\n            this.$viewModeBtnContainer.remove();\n        }\n\n        this.viewModeBtns = {};\n        this.viewMode = null;\n\n        // Get the new list of view modes\n        this.sourceViewModes = this.getViewModesForSource();\n\n        // Create the buttons if there's more than one mode available to this source\n        if (this.sourceViewModes.length > 1) {\n            this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                let sourceViewMode = this.sourceViewModes[i];\n\n                let $viewModeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn' + (typeof sourceViewMode.className !== 'undefined' ? ` ${sourceViewMode.className}` : ''),\n                    'data-view': sourceViewMode.mode,\n                    'data-icon': sourceViewMode.icon,\n                    'aria-label': sourceViewMode.title,\n                    title: sourceViewMode.title,\n                }).appendTo(this.$viewModeBtnContainer);\n\n                this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                    this.selectViewMode(ev.data.mode);\n                    this.updateElements();\n                });\n            }\n        }\n\n        // Figure out which mode we should start with\n        var viewMode = this.getSelectedViewMode();\n\n        if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n            // Try to keep using the current view mode\n            if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                viewMode = this.viewMode;\n            }\n            // Just use the first one\n            else {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n        }\n\n        this.selectViewMode(viewMode);\n\n        this.onSelectSource();\n\n        return true;\n    },\n\n    selectSourceByKey: function(key) {\n        var $source = this.getSourceByKey(key);\n\n        if ($source) {\n            return this.selectSource($source);\n        } else {\n            return false;\n        }\n    },\n\n    setStoredSortOptionsForSource: function() {\n        var sortAttr = this.getSelectedSourceState('order'),\n            sortDir = this.getSelectedSourceState('sort');\n\n        if (!sortAttr || !sortDir) {\n            // Get the default\n            sortAttr = this.getDefaultSort();\n\n            if (Garnish.isArray(sortAttr)) {\n                sortDir = sortAttr[1];\n                sortAttr = sortAttr[0];\n            }\n        }\n\n        if (sortDir !== 'asc' && sortDir !== 'desc') {\n            sortDir = 'asc';\n        }\n\n        this.setSortAttribute(sortAttr);\n        this.setSortDirection(sortDir);\n    },\n\n    getDefaultSort: function() {\n        // Does the source specify what to do?\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n            return this.$source.attr('data-default-sort').split(':');\n        } else {\n            // Default to whatever's first\n            return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n        }\n    },\n\n    getViewModesForSource: function() {\n        var viewModes = [\n            {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n        ];\n\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n            viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n        }\n\n        return viewModes;\n    },\n\n    doesSourceHaveViewMode: function(viewMode) {\n        for (var i = 0; i < this.sourceViewModes.length; i++) {\n            if (this.sourceViewModes[i].mode === viewMode) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    selectViewMode: function(viewMode, force) {\n        // Make sure that the current source supports it\n        if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n            viewMode = this.sourceViewModes[0].mode;\n        }\n\n        // Has anything changed?\n        if (viewMode === this.viewMode) {\n            return;\n        }\n\n        // Deselect the previous view mode\n        if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].removeClass('active');\n        }\n\n        this.viewMode = viewMode;\n        this.setSelecetedSourceState('mode', this.viewMode);\n\n        if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].addClass('active');\n        }\n    },\n\n    createView: function(mode, settings) {\n        var viewClass = this.getViewClass(mode);\n        return new viewClass(this, this.$elements, settings);\n    },\n\n    getViewClass: function(mode) {\n        switch (mode) {\n            case 'table':\n                return Craft.TableElementIndexView;\n            case 'thumbs':\n                return Craft.ThumbsElementIndexView;\n            default:\n                throw `View mode \"${mode}\" not supported.`;\n        }\n    },\n\n    rememberDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index === -1) {\n            this.settings.disabledElementIds.push(id);\n        }\n    },\n\n    forgetDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index !== -1) {\n            this.settings.disabledElementIds.splice(index, 1);\n        }\n    },\n\n    enableElements: function($elements) {\n        $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.forgetDisabledElementId(id);\n        }\n\n        this.onEnableElements($elements);\n    },\n\n    disableElements: function($elements) {\n        $elements.removeClass('sel').addClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.rememberDisabledElementId(id);\n        }\n\n        this.onDisableElements($elements);\n    },\n\n    getElementById: function(id) {\n        return this.view.getElementById(id);\n    },\n\n    enableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.enableElements($element);\n            } else {\n                this.forgetDisabledElementId(id);\n            }\n        }\n    },\n\n    disableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.disableElements($element);\n            } else {\n                this.rememberDisabledElementId(id);\n            }\n        }\n    },\n\n    selectElementAfterUpdate: function(id) {\n        if (this._autoSelectElements === null) {\n            this._autoSelectElements = [];\n        }\n\n        this._autoSelectElements.push(id);\n    },\n\n    addButton: function($button) {\n        this.getButtonContainer().append($button);\n    },\n\n    isShowingSidebar: function() {\n        if (this.showingSidebar === null) {\n            this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n        }\n\n        return this.showingSidebar;\n    },\n\n    getButtonContainer: function() {\n        // Is there a predesignated place where buttons should go?\n        if (this.settings.buttonContainer) {\n            return $(this.settings.buttonContainer);\n        } else {\n            var $container = $('#action-button');\n\n            if (!$container.length) {\n                $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n            }\n\n            return $container;\n        }\n    },\n\n    setIndexBusy: function() {\n        this.$elements.addClass('busy');\n        this.isIndexBusy = true;\n    },\n\n    setIndexAvailable: function() {\n        this.$elements.removeClass('busy');\n        this.isIndexBusy = false;\n    },\n\n    createCustomizeSourcesModal: function() {\n        // Recreate it each time\n        var modal = new Craft.CustomizeSourcesModal(this, {\n            onHide: function() {\n                modal.destroy();\n            }\n        });\n\n        return modal;\n    },\n\n    disable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.disable();\n        }\n\n        if (this.view) {\n            this.view.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.enable();\n        }\n\n        if (this.view) {\n            this.view.enable();\n        }\n\n        this.base();\n    },\n\n    onAfterInit: function() {\n        this.settings.onAfterInit();\n        this.trigger('afterInit');\n    },\n\n    onSelectSource: function() {\n        this.settings.onSelectSource(this.sourceKey);\n        this.trigger('selectSource', {sourceKey: this.sourceKey});\n    },\n\n    onSelectSite: function() {\n        this.settings.onSelectSite(this.siteId);\n        this.trigger('selectSite', {siteId: this.siteId});\n    },\n\n    onUpdateElements: function() {\n        this.settings.onUpdateElements();\n        this.trigger('updateElements');\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    onEnableElements: function($elements) {\n        this.settings.onEnableElements($elements);\n        this.trigger('enableElements', {elements: $elements});\n    },\n\n    onDisableElements: function($elements) {\n        this.settings.onDisableElements($elements);\n        this.trigger('disableElements', {elements: $elements});\n    },\n\n    onAfterAction: function(action, params) {\n        this.settings.onAfterAction(action, params);\n        this.trigger('afterAction', {action: action, params: params});\n    },\n\n    // UI state handlers\n    // -------------------------------------------------------------------------\n\n    _handleSourceSelectionChange: function() {\n        // If the selected source was just removed (maybe because its parent was collapsed),\n        // there won't be a selected source\n        if (!this.sourceSelect.totalSelected) {\n            this.sourceSelect.selectItem(this.$visibleSources.first());\n            return;\n        }\n\n        if (this.selectSource(this.sourceSelect.$selectedItems)) {\n            this.updateElements();\n        }\n    },\n\n    _handleActionTriggerSubmit: function(ev) {\n        ev.preventDefault();\n\n        var $form = $(ev.currentTarget);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($form.data('action'), Garnish.getPostData($form));\n    },\n\n    _handleMenuActionTriggerSubmit: function(ev) {\n        var $option = $(ev.option);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($option.data('action'));\n    },\n\n    _handleStatusChange: function(ev) {\n        this.statusMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$statusMenuBtn.html($option.html());\n\n        this.trashed = false;\n        this.drafts = false;\n        this.status = null;\n\n        if (Garnish.hasAttr($option, 'data-trashed')) {\n            this.trashed = true;\n        } else if (Garnish.hasAttr($option, 'data-drafts')) {\n            this.drafts = true;\n        } else {\n            this.status = $option.data('status');\n        }\n\n        this._updateStructureSortOption();\n        this.updateElements();\n    },\n\n    _handleSiteChange: function(ev) {\n        this.siteMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$siteMenuBtn.html($option.html());\n        this._setSite($option.data('site-id'));\n        this.onSelectSite();\n    },\n\n    _setSite: function(siteId) {\n        let firstSite = this.siteId === null;\n        this.siteId = siteId;\n        this.$visibleSources = $();\n\n        // Hide any sources that aren't available for this site\n        var $firstVisibleSource;\n        var $source;\n        // Select a new source automatically if a site is already selected, but we don't have a selected source\n        // (or if the currently selected source ends up not supporting the new site)\n        var selectNewSource = !firstSite && (!this.$source || !this.$source.length);\n\n        for (var i = 0; i < this.$sources.length; i++) {\n            $source = this.$sources.eq(i);\n            if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                $source.parent().removeClass('hidden');\n                this.$visibleSources = this.$visibleSources.add($source);\n                if (!$firstVisibleSource) {\n                    $firstVisibleSource = $source;\n                }\n            } else {\n                $source.parent().addClass('hidden');\n\n                // Is this the currently selected source?\n                if (this.$source && this.$source.get(0) == $source.get(0)) {\n                    selectNewSource = true;\n                }\n            }\n        }\n\n        if (this.initialized && selectNewSource) {\n            this.selectSource($firstVisibleSource);\n        }\n\n        // Hide any empty-nester headings\n        var $headings = this.getSourceContainer().children('.heading');\n        var $heading;\n\n        for (i = 0; i < $headings.length; i++) {\n            $heading = $headings.eq(i);\n            if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                $heading.removeClass('hidden');\n            } else {\n                $heading.addClass('hidden');\n            }\n        }\n\n        if (this.initialized) {\n            if (this.settings.context === 'index') {\n                // Remember this site for later\n                Craft.cp.setSiteId(siteId);\n            }\n\n            // Update the elements\n            this.updateElements();\n        }\n    },\n\n    _handleSortChange: function(ev) {\n        var $option = $(ev.selectedOption);\n\n        if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n            return;\n        }\n\n        // Is this an attribute or a direction?\n        if ($option.parent().parent().is(this.$sortAttributesList)) {\n            this.setSortAttribute($option.data('attr'));\n        } else {\n            this.setSortDirection($option.data('dir'));\n        }\n\n        this.storeSortAttributeAndDirection();\n        this.updateElements();\n    },\n\n    _handleSelectionChange: function() {\n        this.updateActionTriggers();\n        this.onSelectionChange();\n    },\n\n    _handleSourceDblClick: function(ev) {\n        this._toggleSource($(ev.currentTarget));\n        ev.stopPropagation();\n    },\n\n    _handleSourceToggleClick: function(ev) {\n        this._toggleSource($(ev.currentTarget).prev('a'));\n        ev.stopPropagation();\n    },\n\n    _updateStructureSortOption: function() {\n        var $option = this.getSortAttributeOption('structure');\n\n        if (!$option.length) {\n            return;\n        }\n\n        if (this.trashed || this.drafts || this.searching) {\n            $option.addClass('disabled');\n            if (this.getSelectedSortAttribute() === 'structure') {\n                // Temporarily set the sort to the first option\n                var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                this.setSortAttribute($firstOption.data('attr'));\n                this.setSortDirection('asc');\n            }\n        } else {\n            $option.removeClass('disabled');\n            this.setStoredSortOptionsForSource();\n        }\n    },\n\n    // Source managemnet\n    // -------------------------------------------------------------------------\n\n    _getSourcesInList: function($list) {\n        return $list.children('li').children('a');\n    },\n\n    _getChildSources: function($source) {\n        var $list = $source.siblings('ul');\n        return this._getSourcesInList($list);\n    },\n\n    _getSourceToggle: function($source) {\n        return $source.siblings('.toggle');\n    },\n\n    _initSources: function($sources) {\n        for (var i = 0; i < $sources.length; i++) {\n            this.initSource($($sources[i]));\n        }\n    },\n\n    _deinitSources: function($sources) {\n        for (var i = 0; i < $sources.length; i++) {\n            this.deinitSource($($sources[i]));\n        }\n    },\n\n    _toggleSource: function($source) {\n        if ($source.parent('li').hasClass('expanded')) {\n            this._collapseSource($source);\n        } else {\n            this._expandSource($source);\n        }\n    },\n\n    _expandSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'true',\n            'aria-label': Craft.t('app', 'Hide nested sources'),\n        });\n        $source.parent('li').addClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        this._initSources($childSources);\n\n        var key = $source.data('key');\n        if (this.instanceState.expandedSources.indexOf(key) === -1) {\n            this.instanceState.expandedSources.push(key);\n            this.storeInstanceState();\n        }\n    },\n\n    _collapseSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'false',\n            'aria-label': Craft.t('app', 'Show nested sources'),\n        });\n        $source.parent('li').removeClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        this._deinitSources($childSources);\n\n        var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n        if (i !== -1) {\n            this.instanceState.expandedSources.splice(i, 1);\n            this.storeInstanceState();\n        }\n    },\n\n    // View\n    // -------------------------------------------------------------------------\n\n    _isViewPaginated: function() {\n        return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n    },\n\n    _updateView: function(params, response) {\n        // Cleanup\n        // -------------------------------------------------------------\n\n        // Get rid of the old action triggers regardless of whether the new batch has actions or not\n        if (this.actions) {\n            this.hideActionTriggers();\n            this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n        }\n\n        // Update the count text\n        // -------------------------------------------------------------\n\n        if (this.$countContainer.length) {\n            this.$countSpinner.removeClass('hidden');\n            this.$countContainer.html('');\n\n            this._countResults()\n                .then((total) => {\n                    this.$countSpinner.addClass('hidden');\n\n                    let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                    let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                    if (!this._isViewPaginated()) {\n                        let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n                        this.$countContainer.text(countLabel);\n                    } else {\n                        let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                        let last = Math.min(first + (this.settings.batchSize - 1), total);\n                        let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            first: first,\n                            last: last,\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n\n                        let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                        let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                        let $prevBtn = $('<div/>', {\n                            'class': 'page-link prev-page' + (this.page > 1 ? '' : ' disabled'),\n                            title: Craft.t('app', 'Previous Page')\n                        }).appendTo($paginationContainer);\n                        let $nextBtn = $('<div/>', {\n                            'class': 'page-link next-page' + (this.page < totalPages ? '' : ' disabled'),\n                            title: Craft.t('app', 'Next Page')\n                        }).appendTo($paginationContainer);\n\n                        $('<div/>', {\n                            'class': 'page-info',\n                            text: countLabel\n                        }).appendTo($paginationContainer);\n\n                        if (this.page > 1) {\n                            this.addListener($prevBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page - 1);\n                                this.updateElements(true);\n                            });\n                        }\n\n                        if (this.page < totalPages) {\n                            this.addListener($nextBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page + 1);\n                                this.updateElements(true);\n                            });\n                        }\n                    }\n                })\n                .catch(() => {\n                    this.$countSpinner.addClass('hidden');\n                });\n        }\n\n        // Update the view with the new container + elements HTML\n        // -------------------------------------------------------------\n\n        this.$elements.html(response.html);\n        Craft.appendHeadHtml(response.headHtml);\n        Craft.appendFootHtml(response.footHtml);\n\n        // Batch actions setup\n        // -------------------------------------------------------------\n\n        this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n        if (response.actions && response.actions.length) {\n            if (this.$selectAllContainer.length) {\n                this.actions = response.actions;\n                this.actionsHeadHtml = response.actionsHeadHtml;\n                this.actionsFootHtml = response.actionsFootHtml;\n\n                // Create the select all checkbox\n                this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                this.$selectAllContainer.attr({\n                    'role': 'checkbox',\n                    'tabindex': '0',\n                    'aria-checked': 'false',\n                    'aria-label': Craft.t('app', 'Select all'),\n                });\n\n                this.addListener(this.$selectAllContainer, 'click', function() {\n                    if (this.view.getSelectedElements().length === 0) {\n                        this.view.selectAllElements();\n                    } else {\n                        this.view.deselectAllElements();\n                    }\n                });\n\n                this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                    if (ev.keyCode === Garnish.SPACE_KEY) {\n                        ev.preventDefault();\n\n                        $(ev.currentTarget).trigger('click');\n                    }\n                });\n            }\n        } else {\n            if (!this.$selectAllContainer.siblings().length) {\n                this.$selectAllContainer.parent('.header').remove();\n            }\n            this.$selectAllContainer.remove();\n        }\n\n        // Exporters setup\n        // -------------------------------------------------------------\n\n        this.exporters = response.exporters;\n        this.exportersByType = Craft.index(this.exporters || [], e => e.type);\n\n        if (this.exporters && this.exporters.length) {\n            this.$exportBtn.removeClass('hidden');\n        } else {\n            this.$exportBtn.addClass('hidden');\n        }\n\n        // Create the view\n        // -------------------------------------------------------------\n\n        // Should we make the view selectable?\n        var selectable = (this.actions || this.settings.selectable);\n\n        this.view = this.createView(this.getSelectedViewMode(), {\n            context: this.settings.context,\n            batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n            params: params,\n            selectable: selectable,\n            multiSelect: (this.actions || this.settings.multiSelect),\n            checkboxMode: !!this.actions,\n            onSelectionChange: $.proxy(this, '_handleSelectionChange')\n        });\n\n        // Auto-select elements\n        // -------------------------------------------------------------\n\n        if (this._autoSelectElements) {\n            if (selectable) {\n                for (var i = 0; i < this._autoSelectElements.length; i++) {\n                    this.view.selectElementById(this._autoSelectElements[i]);\n                }\n            }\n\n            this._autoSelectElements = null;\n        }\n\n        // Trigger the event\n        // -------------------------------------------------------------\n\n        this.onUpdateElements();\n    },\n\n    _countResults: function() {\n        return new Promise((resolve, reject) => {\n            if (this.totalResults !== null) {\n                resolve(this.totalResults);\n            } else {\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                // Make sure we've got an active result set ID\n                if (this.resultSet === null) {\n                    this.resultSet = Math.floor(Math.random() * 100000000);\n                }\n                params.resultSet = this.resultSet;\n\n                Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                    data: params,\n                    cancelToken: this._createCancelToken(),\n                }).then((response) => {\n                    if (response.data.resultSet == this.resultSet) {\n                        this.totalResults = response.data.count;\n                        resolve(response.data.count);\n                    } else {\n                        reject();\n                    }\n                }).catch(reject);\n            }\n        });\n    },\n\n    _createTriggers: function() {\n        var triggers = [],\n            safeMenuActions = [],\n            destructiveMenuActions = [];\n\n        var i;\n\n        for (i = 0; i < this.actions.length; i++) {\n            var action = this.actions[i];\n\n            if (action.trigger) {\n                var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                    .data('action', action)\n                    .append(action.trigger);\n\n                this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                triggers.push($form);\n            } else {\n                if (!action.destructive) {\n                    safeMenuActions.push(action);\n                } else {\n                    destructiveMenuActions.push(action);\n                }\n            }\n        }\n\n        var $btn;\n\n        if (safeMenuActions.length || destructiveMenuActions.length) {\n            var $menuTrigger = $('<form/>');\n\n            $btn = $('<button/>', {\n                type: 'button',\n                class: 'btn menubtn',\n                'data-icon': 'settings',\n                title: Craft.t('app', 'Actions'),\n            }).appendTo($menuTrigger);\n\n            var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n            if ($safeList) {\n                $safeList.appendTo($menu);\n            }\n\n            if ($safeList && $destructiveList) {\n                $('<hr/>').appendTo($menu);\n            }\n\n            if ($destructiveList) {\n                $destructiveList.appendTo($menu);\n            }\n\n            triggers.push($menuTrigger);\n        }\n\n        this._$triggers = $();\n\n        for (i = 0; i < triggers.length; i++) {\n            var $div = $('<div/>').append(triggers[i]);\n            this._$triggers = this._$triggers.add($div);\n        }\n\n        this._$triggers.appendTo(this.$toolbar);\n        Craft.appendHeadHtml(this.actionsHeadHtml);\n        Craft.appendFootHtml(this.actionsFootHtml);\n\n        Craft.initUiElements(this._$triggers);\n\n        if ($btn) {\n            $btn.data('menubtn').on('optionSelect', $.proxy(this, '_handleMenuActionTriggerSubmit'));\n        }\n    },\n\n    _showExportHud: function() {\n        this.$exportBtn.addClass('active');\n\n        var $form = $('<form/>', {\n            'class': 'export-form'\n        });\n\n        var typeOptions = [];\n        for (var i = 0; i < this.exporters.length; i++) {\n            typeOptions.push({label: this.exporters[i].name, value: this.exporters[i].type});\n        }\n        var $typeField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Export Type'),\n            options: typeOptions,\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        var $formatField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Format'),\n            options: [\n                {label: 'CSV', value: 'csv'}, {label: 'JSON', value: 'json'}, {label: 'XML', value: 'xml'},\n            ],\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        let $typeSelect = $typeField.find('select');\n        this.addListener($typeSelect, 'change', () => {\n            let type = $typeSelect.val();\n            if (this.exportersByType[type].formattable) {\n                $formatField.removeClass('hidden');\n            } else {\n                $formatField.addClass('hidden');\n            }\n        });\n        $typeSelect.trigger('change');\n\n        // Only show the Limit field if there aren't any selected elements\n        var selectedElementIds = this.view.getSelectedElementIds();\n\n        if (!selectedElementIds.length) {\n            var $limitField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Limit'),\n                placeholder: Craft.t('app', 'No limit'),\n                type: 'number',\n                min: 1\n            }).appendTo($form);\n        }\n\n        $('<button/>', {\n            type: 'submit',\n            'class': 'btn submit fullwidth',\n            text: Craft.t('app', 'Export')\n        }).appendTo($form)\n\n        var $spinner = $('<div/>', {\n            'class': 'spinner hidden'\n        }).appendTo($form);\n\n        var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n        hud.on('hide', $.proxy(function() {\n            this.$exportBtn.removeClass('active');\n        }, this));\n\n        var submitting = false;\n\n        this.addListener($form, 'submit', function(ev) {\n            ev.preventDefault();\n            if (submitting) {\n                return;\n            }\n\n            submitting = true;\n            $spinner.removeClass('hidden');\n\n            var params = this.getViewParams();\n            delete params.criteria.offset;\n            delete params.criteria.limit;\n\n            params.type = $typeField.find('select').val();\n            params.format = $formatField.find('select').val();\n\n            if (selectedElementIds.length) {\n                params.criteria.id = selectedElementIds;\n            } else {\n                var limit = parseInt($limitField.find('input').val());\n                if (limit && !isNaN(limit)) {\n                    params.criteria.limit = limit;\n                }\n            }\n\n            if (Craft.csrfTokenValue) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                .then(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                })\n                .catch(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                    if (!this._ignoreFailedRequest) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                });\n        });\n    },\n\n    _createMenuTriggerList: function(actions, destructive) {\n        if (actions && actions.length) {\n            var $ul = $('<ul/>');\n\n            for (var i = 0; i < actions.length; i++) {\n                $('<li/>').append($('<a/>', {\n                    id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                    'class': (destructive ? 'error' : null),\n                    data: {\n                        action: actions[i],\n                    },\n                    text: actions[i].name\n                })).appendTo($ul);\n            }\n\n            return $ul;\n        }\n    }\n}, {\n    defaults: {\n        context: 'index',\n        modal: null,\n        storageKey: null,\n        criteria: null,\n        batchSize: 100,\n        disabledElementIds: [],\n        selectable: false,\n        multiSelect: false,\n        buttonContainer: null,\n        hideSidebar: false,\n        toolbarSelector: '.toolbar:first',\n        refreshSourcesAction: 'element-indexes/get-source-tree-html',\n        updateElementsAction: 'element-indexes/get-elements',\n        countElementsAction: 'element-indexes/count-elements',\n        submitActionsAction: 'element-indexes/perform-action',\n        defaultSiteId: null,\n        defaultSource: null,\n        canHaveDrafts: false,\n\n        onAfterInit: $.noop,\n        onSelectSource: $.noop,\n        onSelectSite: $.noop,\n        onUpdateElements: $.noop,\n        onSelectionChange: $.noop,\n        onEnableElements: $.noop,\n        onDisableElements: $.noop,\n        onAfterAction: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend({\n    $container: null,\n    $loadingMoreSpinner: null,\n    $elementContainer: null,\n    $scroller: null,\n\n    elementIndex: null,\n    thumbLoader: null,\n    elementSelect: null,\n\n    loadingMore: false,\n\n    _totalVisible: null,\n    _morePending: null,\n    _handleEnableElements: null,\n    _handleDisableElements: null,\n\n    init: function(elementIndex, container, settings) {\n        this.elementIndex = elementIndex;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n        // Create a \"loading-more\" spinner\n        this.$loadingMoreSpinner = $(\n            '<div class=\"centeralign hidden\">' +\n            '<div class=\"spinner loadingmore\"></div>' +\n            '</div>'\n        ).insertAfter(this.$container);\n\n        // Get the actual elements container and its child elements\n        this.$elementContainer = this.getElementContainer();\n        var $elements = this.$elementContainer.children();\n\n        this.setTotalVisible($elements.length);\n        this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n        // Instantiate the thumb loader\n        this.thumbLoader = new Craft.ElementThumbLoader();\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select(\n                this.$elementContainer,\n                $elements.filter(':not(.disabled)'),\n                {\n                    multi: this.settings.multiSelect,\n                    vertical: this.isVerticalList(),\n                    handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                    filter: ':not(a):not(.toggle)',\n                    checkboxMode: this.settings.checkboxMode,\n                    onSelectionChange: $.proxy(this, 'onSelectionChange')\n                });\n\n            this._handleEnableElements = $.proxy(function(ev) {\n                this.elementSelect.addItems(ev.elements);\n            }, this);\n\n            this._handleDisableElements = $.proxy(function(ev) {\n                this.elementSelect.removeItems(ev.elements);\n            }, this);\n\n            this.elementIndex.on('enableElements', this._handleEnableElements);\n            this.elementIndex.on('disableElements', this._handleDisableElements);\n        }\n\n        // Enable inline element editing if this is an index page\n        if (this.settings.context === 'index') {\n            this._handleElementEditing = $.proxy(function(ev) {\n                var $target = $(ev.target);\n\n                if ($target.prop('nodeName') === 'A') {\n                    // Let the link do its thing\n                    return;\n                }\n\n                var $element;\n\n                if ($target.hasClass('element')) {\n                    $element = $target;\n                } else {\n                    $element = $target.closest('.element');\n\n                    if (!$element.length) {\n                        return;\n                    }\n                }\n\n                if (Garnish.hasAttr($element, 'data-editable')) {\n                    this.createElementEditor($element);\n                }\n            }, this);\n\n            if (!this.elementIndex.trashed) {\n                this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                if ($.isTouchCapable()) {\n                    this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                }\n            }\n        }\n\n        // Give sub-classes a chance to do post-initialization stuff here\n        this.afterInit();\n\n        // Set up lazy-loading\n        if (this.settings.batchSize) {\n            if (this.settings.context === 'index') {\n                this.$scroller = Garnish.$scrollContainer;\n            } else {\n                this.$scroller = this.elementIndex.$main;\n            }\n\n            this.$scroller.scrollTop(0);\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }\n    },\n\n    getElementContainer: function() {\n        throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n    },\n\n    afterInit: function() {\n    },\n\n    getAllElements: function() {\n        return this.$elementContainer.children();\n    },\n\n    getEnabledElements: function() {\n        return this.$elementContainer.children(':not(.disabled)');\n    },\n\n    getElementById: function(id) {\n        var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n        if ($element.length) {\n            return $element;\n        } else {\n            return null;\n        }\n    },\n\n    getSelectedElements: function() {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        return this.elementSelect.$selectedItems;\n    },\n\n    getSelectedElementIds: function() {\n        let $selectedElements;\n        try {\n            $selectedElements = this.getSelectedElements();\n        } catch (e) {\n        }\n\n        let ids = [];\n        if ($selectedElements) {\n            for (var i = 0; i < $selectedElements.length; i++) {\n                ids.push($selectedElements.eq(i).data('id'));\n            }\n        }\n        return ids;\n    },\n\n    selectElement: function($element) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        this.elementSelect.selectItem($element, true);\n        return true;\n    },\n\n    selectElementById: function(id) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        var $element = this.getElementById(id);\n\n        if ($element) {\n            this.elementSelect.selectItem($element, true);\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    selectAllElements: function() {\n        this.elementSelect.selectAll();\n    },\n\n    deselectAllElements: function() {\n        this.elementSelect.deselectAll();\n    },\n\n    isVerticalList: function() {\n        return false;\n    },\n\n    getTotalVisible: function() {\n        return this._totalVisible;\n    },\n\n    setTotalVisible: function(totalVisible) {\n        this._totalVisible = totalVisible;\n    },\n\n    getMorePending: function() {\n        return this._morePending;\n    },\n\n    setMorePending: function(morePending) {\n        this._morePending = morePending;\n    },\n\n    /**\n     * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n     */\n    maybeLoadMore: function() {\n        if (this.canLoadMore()) {\n            this.loadMore();\n        }\n    },\n\n    /**\n     * Returns whether the user has reached the bottom of the scroll area.\n     */\n    canLoadMore: function() {\n        if (!this.getMorePending() || !this.settings.batchSize) {\n            return false;\n        }\n\n        // Check if the user has reached the bottom of the scroll area\n        var containerHeight;\n\n        if (this.$scroller[0] === Garnish.$win[0]) {\n            var winHeight = Garnish.$win.innerHeight(),\n                winScrollTop = Garnish.$win.scrollTop(),\n                containerOffset = this.$container.offset().top;\n            containerHeight = this.$container.height();\n\n            return (winHeight + winScrollTop >= containerOffset + containerHeight);\n        } else {\n            var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                containerScrollTop = this.$scroller.scrollTop();\n            containerHeight = this.$scroller.outerHeight();\n\n            return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n        }\n    },\n\n    /**\n     * Loads the next batch of elements.\n     */\n    loadMore: function() {\n        if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n            return;\n        }\n\n        this.loadingMore = true;\n        this.$loadingMoreSpinner.removeClass('hidden');\n        this.removeListener(this.$scroller, 'scroll');\n\n        var data = this.getLoadMoreParams();\n\n        Craft.postActionRequest(this.settings.loadMoreElementsAction, data, $.proxy(function(response, textStatus) {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                var $newElements = $(response.html);\n\n                this.appendElements($newElements);\n                Craft.appendHeadHtml(response.headHtml);\n                Craft.appendFootHtml(response.footHtml);\n\n                if (this.elementSelect) {\n                    this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                    this.elementIndex.updateActionTriggers();\n                }\n\n                this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n                this.setMorePending($newElements.length == this.settings.batchSize);\n\n                // Is there room to load more right now?\n                this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n                this.maybeLoadMore();\n            }\n        }, this));\n    },\n\n    getLoadMoreParams: function() {\n        // Use the same params that were passed when initializing this view\n        var params = $.extend(true, {}, this.settings.params);\n        params.criteria.offset = this.getTotalVisible();\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        $newElements.appendTo(this.$elementContainer);\n        this.thumbLoader.load($newElements);\n        this.onAppendElements($newElements);\n    },\n\n    onAppendElements: function($newElements) {\n        this.settings.onAppendElements($newElements);\n        this.trigger('appendElements', {\n            newElements: $newElements\n        });\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            elementIndex: this.elementIndex\n        });\n    },\n\n    disable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.disable();\n        }\n    },\n\n    enable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.enable();\n        }\n    },\n\n    destroy: function() {\n        // Remove the \"loading-more\" spinner, since we added that outside of the view container\n        this.$loadingMoreSpinner.remove();\n\n        // Kill the thumb loader\n        this.thumbLoader.destroy();\n        delete this.thumbLoader;\n\n        // Delete the element select\n        if (this.elementSelect) {\n            this.elementIndex.off('enableElements', this._handleEnableElements);\n            this.elementIndex.off('disableElements', this._handleDisableElements);\n\n            this.elementSelect.destroy();\n            delete this.elementSelect;\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        context: 'index',\n        batchSize: null,\n        params: null,\n        selectable: false,\n        multiSelect: false,\n        checkboxMode: false,\n        loadMoreElementsAction: 'element-indexes/get-more-elements',\n        onAppendElements: $.noop,\n        onSelectionChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend({\n    thumbLoader: null,\n    elementSelect: null,\n    elementSort: null,\n    modal: null,\n    elementEditor: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addElementBtn: null,\n    $addElementBtnContainer: null,\n\n    _initialized: false,\n\n    init: function(settings) {\n        // Normalize the settings and set them\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n        // Apply the storage key prefix\n        if (this.settings.modalStorageKey) {\n            this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n        }\n\n        // No reason for this to be sortable if we're only allowing 1 selection\n        if (this.settings.limit == 1) {\n            this.settings.sortable = false;\n        }\n\n        this.$container = this.getContainer();\n\n        // Store a reference to this class\n        this.$container.data('elementSelect', this);\n\n        this.$elementsContainer = this.getElementsContainer();\n\n        this.$addElementBtn = this.getAddElementsBtn();\n        if (this.$addElementBtn) {\n            this.$addElementBtnContainer = this.$addElementBtn.parent('.flex');\n            if (!this.$addElementBtnContainer.length) {\n                this.$addElementBtnContainer = null;\n            }\n        }\n\n        this.thumbLoader = new Craft.ElementThumbLoader();\n\n        this.initElementSelect();\n        this.initElementSort();\n        this.resetElements();\n\n        if (this.$addElementBtn) {\n            this.addListener(this.$addElementBtn, 'activate', 'showModal');\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            this._initialized = true;\n        });\n    },\n\n    get totalSelected() {\n        return this.$elements.length;\n    },\n\n    getContainer: function() {\n        return $('#' + this.settings.id);\n    },\n\n    getElementsContainer: function() {\n        return this.$container.children('.elements');\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.children();\n    },\n\n    getAddElementsBtn: function() {\n        return this.$container.find('.btn.add:first');\n    },\n\n    initElementSelect: function() {\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select({\n                multi: this.settings.sortable,\n                filter: ':not(.delete)'\n            });\n        }\n    },\n\n    initElementSort: function() {\n        if (this.settings.sortable) {\n            this.elementSort = new Garnish.DragSort({\n                container: this.$elementsContainer,\n                filter: (this.settings.selectable ? $.proxy(function() {\n                    // Only return all the selected items if the target item is selected\n                    if (this.elementSort.$targetItem.hasClass('sel')) {\n                        return this.elementSelect.getSelectedItems();\n                    } else {\n                        return this.elementSort.$targetItem;\n                    }\n                }, this) : null),\n                ignoreHandleSelector: '.delete',\n                axis: this.getElementSortAxis(),\n                collapseDraggees: true,\n                magnetStrength: 4,\n                helperLagBase: 1.5,\n                onSortChange: (this.settings.selectable ? $.proxy(function() {\n                    this.elementSelect.resetItemOrder();\n                }, this) : null)\n            });\n        }\n    },\n\n    getElementSortAxis: function() {\n        return (this.settings.viewMode === 'list' ? 'y' : null);\n    },\n\n    canAddMoreElements: function() {\n        return (!this.settings.limit || this.$elements.length < this.settings.limit);\n    },\n\n    updateAddElementsBtn: function() {\n        if (this.canAddMoreElements()) {\n            this.enableAddElementsBtn();\n        } else {\n            this.disableAddElementsBtn();\n        }\n    },\n\n    disableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.addClass('hidden');\n        }\n    },\n\n    enableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.removeClass('hidden');\n        }\n    },\n\n    resetElements: function() {\n        if (this.$elements !== null) {\n            this.removeElements(this.$elements);\n        } else {\n            this.$elements = $();\n        }\n\n        this.addElements(this.getElements());\n    },\n\n    addElements: function($elements) {\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect.addItems($elements);\n        }\n\n        if (this.settings.sortable) {\n            this.elementSort.addItems($elements);\n        }\n\n        if (this.settings.editable) {\n            this._handleShowElementEditor = $.proxy(function(ev) {\n                var $element = $(ev.currentTarget);\n                if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                    this.elementEditor = this.createElementEditor($element);\n                }\n            }, this);\n\n            this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n            if ($.isTouchCapable()) {\n                this.addListener($elements, 'taphold', this._handleShowElementEditor);\n            }\n        }\n\n        $elements.find('.delete').on('click dblclick', $.proxy(function(ev) {\n            this.removeElement($(ev.currentTarget).closest('.element'));\n            // Prevent this from acting as one of a double-click\n            ev.stopPropagation();\n        }, this));\n\n        this.$elements = this.$elements.add($elements);\n        this.updateAddElementsBtn();\n    },\n\n    createElementEditor: function($element, settings) {\n        if (!settings) {\n            settings = {};\n        }\n        settings.prevalidate = this.settings.prevalidate;\n        return Craft.createElementEditor(this.settings.elementType, $element, settings);\n    },\n\n    removeElements: function($elements) {\n        if (this.settings.selectable) {\n            this.elementSelect.removeItems($elements);\n        }\n\n        if (this.modal) {\n            var ids = [];\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $elements.eq(i).data('id');\n\n                if (id) {\n                    ids.push(id);\n                }\n            }\n\n            if (ids.length) {\n                this.modal.elementIndex.enableElementsById(ids);\n            }\n        }\n\n        // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n        $elements.children('input').prop('disabled', true);\n\n        this.$elements = this.$elements.not($elements);\n        this.updateAddElementsBtn();\n\n        this.onRemoveElements();\n    },\n\n    removeElement: function($element) {\n        this.removeElements($element);\n        this.animateElementAway($element, () => {\n            $element.remove();\n        });\n    },\n\n    animateElementAway: function($element, callback) {\n        $element.css('z-index', 0);\n\n        var animateCss = {\n            opacity: -1\n        };\n        animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n        if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n            animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n        }\n\n        // Pause the draft editor\n        if (window.draftEditor) {\n            window.draftEditor.pause();\n        }\n\n        $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n            callback();\n\n            // Resume the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.resume();\n            }\n        });\n    },\n\n    showModal: function() {\n        // Make sure we haven't reached the limit\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        if (!this.modal) {\n            this.modal = this.createModal();\n        } else {\n            this.modal.show();\n        }\n    },\n\n    createModal: function() {\n        return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n    },\n\n    getModalSettings: function() {\n        return $.extend({\n            closeOtherModals: false,\n            storageKey: this.modalStorageKey,\n            sources: this.settings.sources,\n            criteria: this.settings.criteria,\n            multiSelect: (this.settings.limit != 1),\n            showSiteMenu: this.settings.showSiteMenu,\n            disabledElementIds: this.getDisabledElementIds(),\n            onSelect: $.proxy(this, 'onModalSelect')\n        }, this.settings.modalSettings);\n    },\n\n    getSelectedElementIds: function() {\n        var ids = [];\n\n        for (var i = 0; i < this.$elements.length; i++) {\n            ids.push(this.$elements.eq(i).data('id'));\n        }\n\n        return ids;\n    },\n\n    getDisabledElementIds: function() {\n        var ids = this.getSelectedElementIds();\n\n        if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n            ids.push(this.settings.sourceElementId);\n        }\n\n        if (this.settings.disabledElementIds) {\n            ids.push(...this.settings.disabledElementIds);\n        }\n\n        return ids;\n    },\n\n    onModalSelect: function(elements) {\n        if (this.settings.limit) {\n            // Cut off any excess elements\n            var slotsLeft = this.settings.limit - this.$elements.length;\n\n            if (elements.length > slotsLeft) {\n                elements = elements.slice(0, slotsLeft);\n            }\n        }\n\n        this.selectElements(elements);\n        this.updateDisabledElementsInModal();\n    },\n\n    selectElements: function(elements) {\n        for (let i = 0; i < elements.length; i++) {\n            let elementInfo = elements[i],\n                $element = this.createNewElement(elementInfo);\n\n            this.appendElement($element);\n            this.addElements($element);\n            this.animateElementIntoPlace(elementInfo.$element, $element);\n\n            // Override the element reference with the new one\n            elementInfo.$element = $element;\n        }\n\n        this.onSelectElements(elements);\n    },\n\n    createNewElement: function(elementInfo) {\n        var $element = elementInfo.$element.clone();\n\n        // Make a couple tweaks\n        Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n        $element.addClass('removable');\n        $element.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + elementInfo.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        return $element;\n    },\n\n    appendElement: function($element) {\n        $element.appendTo(this.$elementsContainer);\n    },\n\n    animateElementIntoPlace: function($modalElement, $inputElement) {\n        var origOffset = $modalElement.offset(),\n            destOffset = $inputElement.offset(),\n            $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n        $inputElement.css('visibility', 'hidden');\n\n        $helper.css({\n            position: 'absolute',\n            zIndex: 10000,\n            top: origOffset.top,\n            left: origOffset.left\n        });\n\n        var animateCss = {\n            top: destOffset.top,\n            left: destOffset.left\n        };\n\n        $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n            $helper.remove();\n            $inputElement.css('visibility', 'visible');\n        });\n    },\n\n    updateDisabledElementsInModal: function() {\n        if (this.modal.elementIndex) {\n            this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n        }\n    },\n\n    getElementById: function(id) {\n        for (var i = 0; i < this.$elements.length; i++) {\n            var $element = this.$elements.eq(i);\n\n            if ($element.data('id') == id) {\n                return $element;\n            }\n        }\n    },\n\n    onSelectElements: function(elements) {\n        this.trigger('selectElements', {elements: elements});\n        this.settings.onSelectElements(elements);\n\n        if (window.draftEditor) {\n            window.draftEditor.checkForm();\n        }\n    },\n\n    onRemoveElements: function() {\n        this.trigger('removeElements');\n        this.settings.onRemoveElements();\n    }\n}, {\n    ADD_FX_DURATION: 200,\n    REMOVE_FX_DURATION: 200,\n\n    defaults: {\n        id: null,\n        name: null,\n        fieldId: null,\n        elementType: null,\n        sources: null,\n        criteria: {},\n        allowSelfRelations: false,\n        sourceElementId: null,\n        disabledElementIds: null,\n        viewMode: 'list',\n        limit: null,\n        showSiteMenu: false,\n        modalStorageKey: null,\n        modalSettings: {},\n        onSelectElements: $.noop,\n        onRemoveElements: $.noop,\n        sortable: true,\n        selectable: true,\n        editable: true,\n        prevalidate: false,\n        editorSettings: {}\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend({\n    elementType: null,\n    elementIndex: null,\n\n    $body: null,\n    $selectBtn: null,\n    $sidebar: null,\n    $sources: null,\n    $sourceToggles: null,\n    $main: null,\n    $search: null,\n    $elements: null,\n    $tbody: null,\n    $primaryButtons: null,\n    $secondaryButtons: null,\n    $cancelBtn: null,\n    $footerSpinner: null,\n\n    init: function(elementType, settings) {\n        this.elementType = elementType;\n        this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n        // Build the modal\n        var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n            $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n            $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n        this.base($container, this.settings);\n\n        this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n        this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n        this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$primaryButtons);\n        this.$selectBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn disabled submit',\n            text: Craft.t('app', 'Select'),\n        }).appendTo(this.$primaryButtons);\n\n        this.$body = $body;\n\n        this.addListener(this.$cancelBtn, 'activate', 'cancel');\n        this.addListener(this.$selectBtn, 'activate', 'selectElements');\n    },\n\n    onFadeIn: function() {\n        if (!this.elementIndex) {\n            this._createElementIndex();\n        } else {\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.elementIndex.$search.trigger('focus');\n            }\n        }\n\n        this.base();\n    },\n\n    onSelectionChange: function() {\n        this.updateSelectBtnState();\n    },\n\n    updateSelectBtnState: function() {\n        if (this.$selectBtn) {\n            if (this.elementIndex.getSelectedElements().length) {\n                this.enableSelectBtn();\n            } else {\n                this.disableSelectBtn();\n            }\n        }\n    },\n\n    enableSelectBtn: function() {\n        this.$selectBtn.removeClass('disabled');\n    },\n\n    disableSelectBtn: function() {\n        this.$selectBtn.addClass('disabled');\n    },\n\n    enableCancelBtn: function() {\n        this.$cancelBtn.removeClass('disabled');\n    },\n\n    disableCancelBtn: function() {\n        this.$cancelBtn.addClass('disabled');\n    },\n\n    showFooterSpinner: function() {\n        this.$footerSpinner.removeClass('hidden');\n    },\n\n    hideFooterSpinner: function() {\n        this.$footerSpinner.addClass('hidden');\n    },\n\n    cancel: function() {\n        if (!this.$cancelBtn.hasClass('disabled')) {\n            this.hide();\n        }\n    },\n\n    selectElements: function() {\n        if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n            // TODO: This code shouldn't know about views' elementSelect objects\n            this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                elementInfo = this.getElementInfo($selectedElements);\n\n            this.onSelect(elementInfo);\n\n            if (this.settings.disableElementsOnSelect) {\n                this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n            }\n\n            if (this.settings.hideOnSelect) {\n                this.hide();\n            }\n        }\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $element = $($selectedElements[i]);\n            var elementInfo = Craft.getElementInfo($element);\n\n            info.push(elementInfo);\n        }\n\n        return info;\n    },\n\n    show: function() {\n        this.updateSelectBtnState();\n        this.base();\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo);\n    },\n\n    disable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.enable();\n        }\n\n        this.base();\n    },\n\n    _createElementIndex: function() {\n        // Get the modal body HTML based on the settings\n        var data = {\n            context: 'modal',\n            elementType: this.elementType,\n            sources: this.settings.sources\n        };\n\n        if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n            data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n        }\n\n        Craft.postActionRequest('elements/get-modal-body', data, $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                this.$body.html(response.html);\n\n                if (this.$body.has('.sidebar:not(.hidden)').length) {\n                    this.$body.addClass('has-sidebar');\n                }\n\n                // Initialize the element index\n                this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                    context: 'modal',\n                    modal: this,\n                    storageKey: this.settings.storageKey,\n                    criteria: this.settings.criteria,\n                    disabledElementIds: this.settings.disabledElementIds,\n                    selectable: true,\n                    multiSelect: this.settings.multiSelect,\n                    buttonContainer: this.$secondaryButtons,\n                    onSelectionChange: $.proxy(this, 'onSelectionChange'),\n                    hideSidebar: this.settings.hideSidebar,\n                    defaultSiteId: this.settings.defaultSiteId,\n                    defaultSource: this.settings.defaultSource\n                });\n\n                // Double-clicking or double-tapping should select the elements\n                this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                    // Make sure the touch targets are the same\n                    // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                    if (touchData.firstTap.target === touchData.secondTap.target) {\n                        this.selectElements();\n                    }\n                });\n            }\n        }, this));\n    }\n}, {\n    defaults: {\n        resizable: true,\n        storageKey: null,\n        sources: null,\n        criteria: null,\n        multiSelect: false,\n        showSiteMenu: null,\n        disabledElementIds: [],\n        disableElementsOnSelect: false,\n        hideOnSelect: true,\n        onCancel: $.noop,\n        onSelect: $.noop,\n        hideSidebar: false,\n        defaultSiteId: null,\n        defaultSource: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend({\n    $source: null,\n    $target: null,\n    $form: null,\n    settings: null,\n\n    listening: null,\n    timeout: null,\n\n    init: function(source, target, settings) {\n        this.$source = $(source);\n        this.$target = $(target);\n        this.$form = this.$source.closest('form');\n\n        this.setSettings(settings);\n\n        this.startListening();\n    },\n\n    setNewSource: function(source) {\n        var listening = this.listening;\n        this.stopListening();\n\n        this.$source = $(source);\n\n        if (listening) {\n            this.startListening();\n        }\n    },\n\n    startListening: function() {\n        if (this.listening) {\n            return;\n        }\n\n        this.listening = true;\n\n        this.addListener(this.$source, 'input', 'onSourceTextChange');\n        this.addListener(this.$target, 'input', 'onTargetTextChange');\n        this.addListener(this.$form, 'submit', 'onFormSubmit');\n    },\n\n    stopListening: function() {\n        if (!this.listening) {\n            return;\n        }\n\n        this.listening = false;\n\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.removeAllListeners(this.$source);\n        this.removeAllListeners(this.$target);\n        this.removeAllListeners(this.$form);\n    },\n\n    onSourceTextChange: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.timeout = setTimeout($.proxy(this, 'updateTarget'), 250);\n    },\n\n    onTargetTextChange: function() {\n        if (this.$target.get(0) === document.activeElement) {\n            this.stopListening();\n        }\n    },\n\n    onFormSubmit: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.updateTarget();\n    },\n\n    updateTarget: function() {\n        if (!this.$target.is(':visible')) {\n            return;\n        }\n\n        var sourceVal = this.$source.val();\n\n        if (typeof sourceVal === 'undefined') {\n            // The source input may not exist anymore\n            return;\n        }\n\n        var targetVal = this.generateTargetValue(sourceVal);\n\n        this.$target.val(targetVal);\n\n        for (let i = 0; i < this.$target.length; i++) {\n            this.$target[i].dispatchEvent(new InputEvent('input', {\n                inputType: 'insertText',\n            }));\n            this.$target[i].dispatchEvent(new Event('input'));\n        }\n\n        // If the target already has focus, select its whole value to mimic\n        // the behavior if the value had already been generated and they just tabbed in\n        if (this.$target.is(':focus')) {\n            Craft.selectFullValue(this.$target);\n        }\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return sourceVal;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend({\n    settings: null,\n    totalItems: null,\n    sorter: null,\n\n    $noItems: null,\n    $table: null,\n    $tbody: null,\n    $deleteBtns: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.AdminTable.defaults);\n\n        if (!this.settings.allowDeleteAll) {\n            this.settings.minItems = 1;\n        }\n\n        this.$noItems = $(this.settings.noItemsSelector);\n        this.$table = $(this.settings.tableSelector);\n        this.$tbody = this.$table.children('tbody');\n        this.totalItems = this.$tbody.children().length;\n\n        if (this.settings.sortable) {\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                onSortChange: $.proxy(this, 'reorderItems')\n            });\n        }\n\n        this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n        this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n        this.updateUI();\n    },\n\n    addRow: function(row) {\n        if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(row).appendTo(this.$tbody),\n            $deleteBtn = $row.find('.delete');\n\n        if (this.settings.sortable) {\n            this.sorter.addItems($row);\n        }\n\n        this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n        this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n        this.totalItems++;\n\n        this.updateUI();\n    },\n\n    reorderItems: function() {\n        if (!this.settings.sortable) {\n            return;\n        }\n\n        // Get the new field order\n        var ids = [];\n\n        for (var i = 0; i < this.sorter.$items.length; i++) {\n            var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n            ids.push(id);\n        }\n\n        // Send it to the server\n        var data = {\n            ids: JSON.stringify(ids)\n        };\n\n        Craft.postActionRequest(this.settings.reorderAction, data, $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.onReorderItems(ids);\n                    Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                } else {\n                    Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                }\n            }\n        }, this));\n    },\n\n    handleDeleteBtnClick: function(event) {\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(event.target).closest('tr');\n\n        if (this.confirmDeleteItem($row)) {\n            this.deleteItem($row);\n        }\n    },\n\n    confirmDeleteItem: function($row) {\n        var name = this.getItemName($row);\n        return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name: name}));\n    },\n\n    deleteItem: function($row) {\n        var data = {\n            id: this.getItemId($row)\n        };\n\n        Craft.postActionRequest(this.settings.deleteAction, data, $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                this.handleDeleteItemResponse(response, $row);\n            }\n        }, this));\n    },\n\n    handleDeleteItemResponse: function(response, $row) {\n        var id = this.getItemId($row),\n            name = this.getItemName($row);\n\n        if (response.success) {\n            if (this.sorter) {\n                this.sorter.removeItems($row);\n            }\n\n            $row.remove();\n            this.totalItems--;\n            this.updateUI();\n            this.onDeleteItem(id);\n\n            Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name: name}));\n        } else {\n            Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name: name}));\n        }\n    },\n\n    onReorderItems: function(ids) {\n        this.settings.onReorderItems(ids);\n    },\n\n    onDeleteItem: function(id) {\n        this.settings.onDeleteItem(id);\n    },\n\n    getItemId: function($row) {\n        return $row.attr(this.settings.idAttribute);\n    },\n\n    getItemName: function($row) {\n        return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n    },\n\n    updateUI: function() {\n        // Show the \"No Whatever Exists\" message if there aren't any\n        if (this.totalItems === 0) {\n            this.$table.hide();\n            this.$noItems.removeClass('hidden');\n        } else {\n            this.$table.show();\n            this.$noItems.addClass('hidden');\n        }\n\n        // Disable the sort buttons if there's only one row\n        if (this.settings.sortable) {\n            var $moveButtons = this.$table.find('.move');\n\n            if (this.totalItems === 1) {\n                $moveButtons.addClass('disabled');\n            } else {\n                $moveButtons.removeClass('disabled');\n            }\n        }\n\n        // Disable the delete buttons if we've reached the minimum items\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            this.$deleteBtns.addClass('disabled');\n        } else {\n            this.$deleteBtns.removeClass('disabled');\n        }\n\n        // Hide the New Whatever button if we've reached the maximum items\n        if (this.settings.newItemBtnSelector) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                $(this.settings.newItemBtnSelector).addClass('hidden');\n            } else {\n                $(this.settings.newItemBtnSelector).removeClass('hidden');\n            }\n        }\n    }\n}, {\n    defaults: {\n        tableSelector: null,\n        noItemsSelector: null,\n        newItemBtnSelector: null,\n        idAttribute: 'data-id',\n        nameAttribute: 'data-name',\n        sortable: false,\n        allowDeleteAll: true,\n        minItems: 0,\n        maxItems: null,\n        reorderAction: null,\n        deleteAction: null,\n        reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n        reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n        confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n        deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n        deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n        onReorderItems: $.noop,\n        onDeleteItem: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend({\n    reloadIndex: false,\n\n    updateForm: function(response, refreshInitialData) {\n        this.base(response, refreshInitialData);\n\n        if (this.$element.data('id')) {\n            var $imageEditorTrigger = this.$fieldsContainer.find('> .meta > .preview-thumb-container.editable');\n\n            if ($imageEditorTrigger.length) {\n                this.addListener($imageEditorTrigger, 'click', 'showImageEditor');\n            }\n        }\n    },\n\n    showImageEditor: function() {\n        new Craft.AssetImageEditor(this.$element.data('id'), {\n            onSave: function() {\n                this.reloadIndex = true;\n                this.reloadForm();\n            }.bind(this),\n        });\n    },\n\n    onHideHud: function() {\n        if (this.reloadIndex && this.settings.elementIndex) {\n            this.settings.elementIndex.updateElements();\n        } else if (this.reloadIndex && this.settings.input) {\n            this.settings.input.refreshThumbnail(this.$element.data('id'));\n        }\n\n        this.base();\n    }\n});\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend({\n    // jQuery objects\n    $body: null,\n    $footer: null,\n    $imageTools: null,\n    $buttons: null,\n    $cancelBtn: null,\n    $replaceBtn: null,\n    $saveBtn: null,\n    $editorContainer: null,\n    $straighten: null,\n    $croppingCanvas: null,\n    $spinnerCanvas: null,\n\n    // FabricJS objects\n    canvas: null,\n    image: null,\n    viewport: null,\n    focalPoint: null,\n    grid: null,\n    croppingCanvas: null,\n    clipper: null,\n    croppingRectangle: null,\n    cropperHandles: null,\n    cropperGrid: null,\n    croppingShade: null,\n    croppingAreaText: null,\n\n    // Image state attributes\n    imageStraightenAngle: 0,\n    viewportRotation: 0,\n    originalWidth: 0,\n    originalHeight: 0,\n    imageVerticeCoords: null,\n    zoomRatio: 1,\n\n    // Editor state attributes\n    animationInProgress: false,\n    currentView: '',\n    assetId: null,\n    cacheBust: null,\n    draggingCropper: false,\n    scalingCropper: false,\n    draggingFocal: false,\n    previousMouseX: 0,\n    previousMouseY: 0,\n    shiftKeyHeld: false,\n    editorHeight: 0,\n    editorWidth: 0,\n    cropperState: false,\n    scaleFactor: 1,\n    flipData: {},\n    focalPointState: false,\n    spinnerInterval: null,\n    maxImageSize: null,\n    lastLoadedDimensions: null,\n    imageIsLoading: false,\n    mouseMoveEvent: null,\n    croppingConstraint: false,\n    constraintOrientation: 'landscape',\n    showingCustomConstraint: false,\n\n    // Rendering proxy functions\n    renderImage: null,\n    renderCropper: null,\n\n    init: function(assetId, settings) {\n        this.cacheBust = Date.now();\n\n        this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n        if (this.settings.allowDegreeFractions === null) {\n            this.settings.allowDegreeFractions = Craft.isImagick;\n        }\n\n        this.assetId = assetId;\n        this.flipData = {x: 0, y: 0};\n\n        // Build the modal\n        this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n        this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n        this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n        this.base(this.$container, this.settings);\n\n        this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn cancel',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$buttons);\n        this.$replaceBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit save replace',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$buttons);\n\n        if (this.settings.allowSavingAsNew) {\n            this.$saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit save copy',\n                text: Craft.t('app', 'Save as a new asset'),\n            }).appendTo(this.$buttons);\n            this.addListener(this.$saveBtn, 'activate', this.saveImage);\n        }\n\n        this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n        this.addListener(this.$cancelBtn, 'activate', this.hide);\n        this.removeListener(this.$shade, 'click');\n\n        this.maxImageSize = this.getMaxImageSize();\n\n        Craft.postActionRequest('assets/image-editor', {assetId: assetId}, $.proxy(this, 'loadEditor'));\n    },\n\n    /**\n     * Get the max image size that is viewable in the editor currently\n     */\n    getMaxImageSize: function() {\n        var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n        var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n        return Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n    },\n\n    /**\n     * Load the editor markup and start loading components and the image.\n     *\n     * @param data\n     */\n    loadEditor: function(data) {\n        if (!data.html) {\n            alert(Craft.t('app', 'Could not load the image editor.'));\n        }\n\n        this.$body.html(data.html);\n        this.$tabs = $('.tabs li', this.$body);\n        this.$viewsContainer = $('.views', this.$body);\n        this.$views = $('> div', this.$viewsContainer);\n        this.$imageTools = $('.image-container .image-tools', this.$body);\n        this.$editorContainer = $('.image-container .image', this.$body);\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this._showSpinner();\n\n        this.updateSizeAndPosition();\n\n        // Load the canvas on which we'll host our image and set up the proxy render function\n        this.canvas = new fabric.StaticCanvas('image-canvas');\n\n        // Set up the cropping canvas jquery element for tracking all the nice events\n        this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n        this.$croppingCanvas.width(this.editorWidth);\n        this.$croppingCanvas.height(this.editorHeight);\n\n        this.canvas.enableRetinaScaling = true;\n        this.renderImage = function() {\n            Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n        }.bind(this);\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        // Load image and set up the initial properties\n        fabric.Image.fromURL(imageUrl, $.proxy(function(imageObject) {\n            this.image = imageObject;\n            this.image.set({\n                originX: 'center',\n                originY: 'center',\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n            this.canvas.add(this.image);\n\n            this.originalHeight = this.image.getHeight();\n            this.originalWidth = this.image.getWidth();\n            this.zoomRatio = 1;\n\n            this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n            // Set up the image bounding box, viewport and position everything\n            this._setFittedImageVerticeCoordinates();\n            this._repositionEditorElements();\n\n            // Set up the focal point\n            var focalState = {\n                imageDimensions: this.getScaledImageDimensions(),\n                offsetX: 0,\n                offsetY: 0\n            };\n\n            var focal = false;\n            if (data.focalPoint) {\n                // Transform the focal point coordinates from relative to absolute\n                var focalData = data.focalPoint;\n\n                // Resolve for the current image dimensions.\n                var adjustedX = focalState.imageDimensions.width * focalData.x;\n                var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                focal = true;\n            }\n\n            this.storeFocalPointState(focalState);\n\n            if (focal) {\n                this._createFocalPoint();\n            }\n\n            this._createViewport();\n            this.storeCropperState();\n\n            // Add listeners to buttons\n            this._addControlListeners();\n\n            // Add mouse event listeners\n            this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n            this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n            this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n            this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n            this._hideSpinner();\n\n            // Render it, finally\n            this.renderImage();\n\n            // Make sure verything gets fired for the first tab\n            this.$tabs.first().trigger('click');\n        }, this));\n    },\n\n    /**\n     * Reload the image to better fit the current available image editor viewport.\n     */\n    _reloadImage: function() {\n        if (this.imageIsLoading) {\n            return;\n        }\n\n        this.imageIsLoading = true;\n        this.maxImageSize = this.getMaxImageSize();\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        this.image.setSrc(imageUrl, function(imageObject) {\n            this.originalHeight = imageObject.getHeight();\n            this.originalWidth = imageObject.getWidth();\n            this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n            this.updateSizeAndPosition();\n            this.renderImage();\n            this.imageIsLoading = false;\n        }.bind(this));\n    },\n\n    /**\n     * Update the modal size and position on browser resize\n     */\n    updateSizeAndPosition: function() {\n        if (!this.$container) {\n            return;\n        }\n\n        // Fullscreen modal\n        var innerWidth = window.innerWidth;\n        var innerHeight = window.innerHeight;\n\n        this.$container.css({\n            'width': innerWidth,\n            'min-width': innerWidth,\n            'left': 0,\n\n            'height': innerHeight,\n            'min-height': innerHeight,\n            'top': 0\n        });\n\n        this.$body.css({\n            'height': innerHeight - 62\n        });\n\n        if (innerWidth < innerHeight) {\n            this.$container.addClass('vertical');\n        } else {\n            this.$container.removeClass('vertical');\n        }\n\n        if (this.$spinnerCanvas) {\n            this.$spinnerCanvas.css({\n                left: ((this.$spinnerCanvas.parent().width() / 2) - (this.$spinnerCanvas.width() / 2)) + 'px',\n                top: ((this.$spinnerCanvas.parent().height() / 2) - (this.$spinnerCanvas.height() / 2)) + 'px'\n            });\n        }\n\n        // If image is already loaded, make sure it looks pretty.\n        if (this.$editorContainer && this.image) {\n            this._repositionEditorElements();\n        }\n    },\n\n    /**\n     * Reposition the editor elements to accurately reflect the editor state with current dimensions\n     */\n    _repositionEditorElements: function() {\n        // Remember what the dimensions were before the resize took place\n        var previousEditorDimensions = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this.canvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        var currentScaledDimensions = this.getScaledImageDimensions();\n\n        // If we're cropping now, we have to reposition the cropper correctly in case\n        // the area for image changes, forcing the image size to change as well.\n        if (this.currentView === 'crop') {\n            this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n            var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            this._setFittedImageVerticeCoordinates();\n            this._repositionCropper(previouslyOccupiedArea);\n        } else {\n            // Otherwise just recalculate the image zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n        }\n\n        // Reposition the image relatively to the previous editor dimensions.\n        this._repositionImage(previousEditorDimensions);\n        this._repositionViewport();\n        this._repositionFocalPoint(previousEditorDimensions);\n        this._zoomImage();\n\n        this.renderImage();\n\n        if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n            this._reloadImage();\n        }\n    },\n\n    /**\n     * Reposition image based on how the editor dimensions have changed.\n     * This ensures keeping the image center offset, if there is any.\n     *\n     * @param previousEditorDimensions\n     */\n    _repositionImage: function(previousEditorDimensions) {\n        this.image.set({\n            left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n            top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n        });\n    },\n\n    /**\n     * Create the viewport for image editor.\n     */\n    _createViewport: function() {\n        this.viewport = new fabric.Rect({\n            width: this.image.width,\n            height: this.image.height,\n            fill: 'rgba(127,0,0,1)',\n            originX: 'center',\n            originY: 'center',\n            globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n            left: this.image.left,\n            top: this.image.top\n        });\n        this.canvas.add(this.viewport);\n        this.renderImage();\n    },\n\n    /**\n     * Create the focal point.\n     */\n    _createFocalPoint: function() {\n        var focalPointState = this.focalPointState;\n        var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n        var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n        var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n        // Adjust by image margins\n        focalX += this.image.left;\n        focalY += this.image.top;\n\n        var deltaX = 0;\n        var deltaY = 0;\n\n        // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n        if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n            if (this.currentView !== 'crop') {\n                deltaX = this.viewport.left - this.image.left;\n                deltaY = this.viewport.top - this.image.top;\n            } else {\n                // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                deltaX = this.clipper.left - this.image.left;\n                deltaY = this.clipper.top - this.image.top;\n            }\n\n            // Bump focal to middle of viewport\n            focalX += deltaX;\n            focalY += deltaY;\n\n            // Reflect changes in saved state\n            focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n        }\n\n        this.focalPoint = new fabric.Group([\n            new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n            new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n        ], {\n            originX: 'center',\n            originY: 'center',\n            left: focalX,\n            top: focalY\n        });\n\n        this.storeFocalPointState(focalPointState);\n        this.canvas.add(this.focalPoint);\n    },\n\n    /**\n     * Toggle focal point\n     */\n    toggleFocalPoint: function() {\n        if (!this.focalPoint) {\n            this._createFocalPoint();\n        } else {\n            this.canvas.remove(this.focalPoint);\n            this.focalPoint = null;\n        }\n\n        this.renderImage();\n    },\n\n    /**\n     * Reposition the viewport to handle editor resizing.\n     */\n    _repositionViewport: function() {\n        if (this.viewport) {\n            var dimensions = {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            // If we're cropping, nothing exciting happens for the viewport\n            if (this.currentView === 'crop') {\n                dimensions.width = this.editorWidth;\n                dimensions.height = this.editorHeight;\n            } else {\n                // If this is the first initial reposition, no cropper state yet\n                if (this.cropperState) {\n                    // Recall the state\n                    var state = this.cropperState;\n\n                    var scaledImageDimensions = this.getScaledImageDimensions();\n                    // Make sure we have the correct current image size\n                    var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                    // Set the viewport dimensions\n                    dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                    dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                    // Adjust the image position to show the correct part of the image in the viewport\n                    this.image.set({\n                        left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                        top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                    });\n                } else {\n                    $.extend(dimensions, this.getScaledImageDimensions());\n                }\n            }\n            this.viewport.set(dimensions);\n        }\n    },\n\n    _repositionFocalPoint: function(previousEditorDimensions) {\n        if (this.focalPoint) {\n            var offsetX = this.focalPoint.left - this.editorWidth / 2;\n            var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n            var currentWidth = this.image.width;\n            var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n            var ratio = newWidth / currentWidth / this.scaleFactor;\n\n            offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n            offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n            offsetX *= ratio;\n            offsetY *= ratio;\n\n            this.focalPoint.set({\n                left: this.editorWidth / 2 + offsetX,\n                top: this.editorHeight / 2 + offsetY\n            });\n        }\n    },\n\n    /**\n     * Return true if the image orientation has changed\n     */\n    hasOrientationChanged: function() {\n        return this.viewportRotation % 180 !== 0;\n    },\n\n    /**\n     * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n     */\n    getScaledImageDimensions: function() {\n        if (typeof this.getScaledImageDimensions._ === 'undefined') {\n            this.getScaledImageDimensions._ = {};\n        }\n\n        this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n        this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n        this.getScaledImageDimensions._.dimensions = {};\n        if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n            this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n            this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n        } else {\n            this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n            this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n        }\n\n        return this.getScaledImageDimensions._.dimensions;\n    },\n\n    /**\n     * Set the image dimensions to reflect the current zoom ratio.\n     */\n    _zoomImage: function() {\n        if (typeof this._zoomImage._ === 'undefined') {\n            this._zoomImage._ = {};\n        }\n\n        this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n        this.image.set({\n            width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n            height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n        });\n    },\n\n    /**\n     * Set up listeners for the controls.\n     */\n    _addControlListeners: function() {\n        // Tabs\n        this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n        // Focal point\n        this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n        // Rotate controls\n        this.addListener($('.rotate-left'), 'click', function() {\n            this.rotateImage(-90);\n        });\n        this.addListener($('.rotate-right'), 'click', function() {\n            this.rotateImage(90);\n        });\n        this.addListener($('.flip-vertical'), 'click', function() {\n            this.flipImage('y');\n        });\n        this.addListener($('.flip-horizontal'), 'click', function() {\n            this.flipImage('x');\n        });\n\n        // Straighten slider\n        this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n            onStart: function() {\n                this._showGrid();\n            }.bind(this),\n            onChange: function(slider) {\n                this.straighten(slider);\n            }.bind(this),\n            onEnd: function() {\n                this._hideGrid();\n                this._cleanupFocalPointAfterStraighten();\n            }.bind(this)\n        });\n\n        // Cropper scale modifier key\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = true;\n            }\n        });\n        this.addListener(Garnish.$doc, 'keyup', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = false;\n            }\n        });\n\n        this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n        this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n        this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n    },\n\n    /**\n     * Handle a constraint button click.\n     *\n     * @param ev\n     */\n    _handleConstraintClick: function(ev) {\n        var constraint = $(ev.currentTarget).data('constraint');\n        var $target = $(ev.currentTarget);\n        $target.siblings().removeClass('active');\n        $target.addClass('active');\n\n        if (constraint == 'custom') {\n            this._showCustomConstraint();\n            this._applyCustomConstraint();\n            return;\n        }\n\n        this._hideCustomConstraint();\n\n        this.setCroppingConstraint(constraint);\n        this.enforceCroppingConstraint();\n    },\n\n    /**\n     * Handle an orientation switch click.\n     *\n     * @param ev\n     */\n    _handleOrientationClick: function(ev) {\n        if (ev.currentTarget.value === this.constraintOrientation) {\n            return;\n        }\n        this.constraintOrientation = ev.currentTarget.value;\n\n        var $constraints = $('.constraint.flip', this.$container);\n\n        for (var i = 0; i < $constraints.length; i++) {\n            var $constraint = $($constraints[i]);\n            $constraint.data('constraint', 1 / $constraint.data('constraint'));\n            $constraint.html($constraint.html().split(':').reverse().join(':'));\n        }\n\n        $constraints.filter('.active').click();\n    },\n\n    /**\n     * Apply the custom ratio set in the inputs\n     */\n    _applyCustomConstraint: function() {\n        var constraint = this._getCustomConstraint();\n\n        if (constraint.w > 0 && constraint.h > 0) {\n            this.setCroppingConstraint(constraint.w / constraint.h);\n            this.enforceCroppingConstraint();\n        }\n    },\n\n    /**\n     * Get the custom constraint.\n     *\n     * @returns {{w: *, h: *}}\n     */\n    _getCustomConstraint: function() {\n        var w = parseFloat($('.custom-constraint-w').val());\n        var h = parseFloat($('.custom-constraint-h').val());\n        return {\n            w: isNaN(w) ? 0 : w,\n            h: isNaN(h) ? 0 : h,\n        }\n    },\n\n    /**\n     * Set the custom constraint.\n     *\n     * @param w\n     * @param h\n     */\n    _setCustomConstraint: function(w, h) {\n        $('.custom-constraint-w').val(parseFloat(w));\n        $('.custom-constraint-h').val(parseFloat(h));\n    },\n\n    /**\n     * Hide the custom constraint inputs.\n     */\n    _hideCustomConstraint: function() {\n        this.showingCustomConstraint = false;\n        $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n        $('.orientation', this.$container).removeClass('hidden');\n    },\n\n    /**\n     * Show the custom constraint inputs.\n     */\n    _showCustomConstraint: function() {\n        if (this.showingCustomConstraint) {\n            return;\n        }\n\n        this.showingCustomConstraint = true;\n        $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n        $('.orientation', this.$container).addClass('hidden');\n    },\n\n    /**\n     * Handle tab click.\n     *\n     * @param ev\n     */\n    _handleTabClick: function(ev) {\n        if (!this.animationInProgress) {\n            var $tab = $(ev.currentTarget);\n            var view = $tab.data('view');\n            this.$tabs.removeClass('selected');\n            $tab.addClass('selected');\n            this.showView(view);\n        }\n    },\n\n    /**\n     * Show a view.\n     *\n     * @param view\n     */\n    showView: function(view) {\n        if (this.currentView === view) {\n            return;\n        }\n\n        this.$views.addClass('hidden');\n        var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n        $view.removeClass('hidden');\n\n        if (view === 'rotate') {\n            this.enableSlider();\n        } else {\n            this.disableSlider();\n        }\n\n        // Now that most likely our editor dimensions have changed, time to reposition stuff\n        this.updateSizeAndPosition();\n\n        // See if we have to enable or disable crop mode as we transition between tabs\n        if (this.currentView === 'crop' && view !== 'crop') {\n            this.disableCropMode();\n        } else if (this.currentView !== 'crop' && view === 'crop') {\n            this.enableCropMode();\n        }\n\n        // Mark the current view\n        this.currentView = view;\n    },\n\n    /**\n     * Store the current cropper state.\n     *\n     * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n     * as the basis for recalculating the cropper position and dimensions.\n     *\n     * @param [state]\n     */\n    storeCropperState: function(state) {\n        if (typeof this.storeCropperState._ === 'undefined') {\n            this.storeCropperState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.cropperState = state;\n        } else if (this.clipper) {\n            this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n            this.cropperState = {\n                offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        } else {\n            this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n            this.cropperState = {\n                offsetX: 0,\n                offsetY: 0,\n                height: this.storeCropperState._.dimensions.height,\n                width: this.storeCropperState._.dimensions.width,\n                imageDimensions: this.storeCropperState._.dimensions\n            };\n        }\n    },\n\n    /**\n     * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n     */\n    storeFocalPointState: function(state) {\n        if (typeof this.storeFocalPointState._ === 'undefined') {\n            this.storeFocalPointState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.focalPointState = state;\n        } else if (this.focalPoint) {\n            this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n            this.focalPointState = {\n                offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        }\n    },\n\n    /**\n     * Rotate the image along with the viewport.\n     *\n     * @param degrees\n     */\n    rotateImage: function(degrees) {\n        if (!this.animationInProgress) {\n            // We're not that kind of an establishment, sir.\n            if (degrees !== 90 && degrees !== -90) {\n                return false;\n            }\n\n            this.animationInProgress = true;\n            this.viewportRotation += degrees;\n\n            // Normalize the viewport rotation angle so it's between 0 and 359\n            this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n            var newAngle = this.image.angle + degrees;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var imageZoomRatio;\n\n            if (this.hasOrientationChanged()) {\n                imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n            } else {\n                imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n            }\n\n            // In cases when for some reason we've already zoomed in on the image,\n            // use existing zoom.\n            if (this.zoomRatio > imageZoomRatio) {\n                imageZoomRatio = this.zoomRatio;\n            }\n\n            var viewportProperties = {\n                angle: degrees === 90 ? '+=90' : '-=90'\n            };\n\n            var imageProperties = {\n                angle: newAngle,\n                width: scaledImageDimensions.width * imageZoomRatio,\n                height: scaledImageDimensions.height * imageZoomRatio\n            };\n\n            var scaleFactor = 1;\n            if (this.scaleFactor < 1) {\n                scaleFactor = 1 / this.scaleFactor;\n                this.scaleFactor = 1;\n            } else {\n                if (this.viewport.width > this.editorHeight) {\n                    scaleFactor = this.editorHeight / this.viewport.width;\n                } else if (this.viewport.height > this.editorWidth) {\n                    scaleFactor = this.editorWidth / this.viewport.height;\n                }\n                this.scaleFactor = scaleFactor;\n            }\n\n            if (scaleFactor < 1) {\n                imageProperties.width *= scaleFactor;\n                imageProperties.height *= scaleFactor;\n            }\n\n            var state = this.cropperState;\n\n            // Make sure we reposition the image as well to focus on the same image area\n            var deltaX = state.offsetX;\n            var deltaY = state.offsetY;\n            var angleInRadians = degrees * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n            var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n            imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n            state.offsetX = newDeltaX;\n            state.offsetY = newDeltaY;\n\n            var temp = state.width;\n            state.width = state.height;\n            state.height = temp;\n\n            this.storeCropperState(state);\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            }\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    // If we're zooming the image in or out, better do the same to viewport\n                    var temp = this.viewport.height * scaleFactor;\n                    this.viewport.height = this.viewport.width * scaleFactor;\n                    this.viewport.width = temp;\n                    this.viewport.set({angle: 0});\n                }.bind(this)\n            });\n\n            // Animate the rotation and dimension change\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                    this.image.set({angle: cleanAngle});\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        this._adjustFocalPointByAngle(degrees);\n                        this.straighten(this.straighteningInput);\n                        this.canvas.add(this.focalPoint);\n                    } else {\n                        this._resetFocalPointPosition();\n                    }\n                }.bind(this)\n            });\n        }\n    },\n\n    /**\n     * Flip an image along an axis.\n     *\n     * @param axis\n     */\n    flipImage: function(axis) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            if (this.hasOrientationChanged()) {\n                axis = axis === 'y' ? 'x' : 'y';\n            }\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            } else {\n                this._resetFocalPointPosition();\n            }\n\n            var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            this.straighteningInput.setValue(-this.imageStraightenAngle);\n            this.imageStraightenAngle = -this.imageStraightenAngle;\n            var properties = {\n                angle: this.viewportRotation + this.imageStraightenAngle\n            };\n\n            var deltaY, deltaX;\n            var cropperState = this.cropperState;\n            var focalPointState = this.focalPointState;\n\n            // Reposition the image, viewport, and stored cropper and focal point states.\n            if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                cropperState.offsetX = -cropperState.offsetX;\n                focalPointState.offsetX = -focalPointState.offsetX;\n                deltaX = this.image.left - editorCenter.x;\n                properties.left = editorCenter.x - deltaX;\n            } else {\n                cropperState.offsetY = -cropperState.offsetY;\n                focalPointState.offsetY = -focalPointState.offsetY;\n                deltaY = this.image.top - editorCenter.y;\n                properties.top = editorCenter.y - deltaY;\n            }\n\n            if (axis === 'y') {\n                properties.scaleY = this.image.scaleY * -1;\n                this.flipData.y = 1 - this.flipData.y;\n            } else {\n                properties.scaleX = this.image.scaleX * -1;\n                this.flipData.x = 1 - this.flipData.x;\n            }\n\n            this.storeCropperState(cropperState);\n            this.storeFocalPointState(focalPointState);\n\n            this.image.animate(properties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        // Well this is handy\n                        this._adjustFocalPointByAngle(0);\n                        this.canvas.add(this.focalPoint);\n                    }\n                }.bind(this)\n            });\n        }\n    },\n\n    /**\n     * Perform the straightening with input slider.\n     *\n     * @param {Craft.SlideRuleInput} slider\n     */\n    straighten: function(slider) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            var previousAngle = this.image.angle;\n\n            this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n            // Straighten the image\n            this.image.set({\n                angle: this.viewportRotation + this.imageStraightenAngle\n            });\n\n            // Set the new zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            this._zoomImage();\n\n            if (this.cropperState) {\n                this._adjustEditorElementsOnStraighten(previousAngle);\n            }\n\n            this.renderImage();\n\n            this.animationInProgress = false;\n        }\n    },\n\n    /**\n     * Adjust the cropped viewport when straightening the image to correct for\n     * bumping into edges, keeping focus on the cropped area center and to\n     * maintain the illusion that the image is being straightened relative to the viewport center.\n     *\n     * @param {integer} previousAngle integer the previous image angle before straightening\n     */\n    _adjustEditorElementsOnStraighten: function(previousAngle) {\n        var scaledImageDimensions = this.getScaledImageDimensions();\n        var angleDelta = this.image.angle - previousAngle;\n        var state = this.cropperState;\n\n        var currentZoomRatio = this.zoomRatio;\n        var adjustmentRatio = 1;\n\n        var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n        do {\n            // Get the cropper center coordinates\n            var cropperCenterX = state.offsetX;\n            var cropperCenterY = state.offsetY;\n            var angleInRadians = angleDelta * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n            newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n            sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Figure out the final image offset to keep the viewport focused where we need it\n            deltaX = newCenterX * currentZoomRatio * sizeFactor;\n            deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n            // If the image would creep in the viewport, figure out how to math around it.\n            var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n            var rectangle = {\n                width: this.viewport.width,\n                height: this.viewport.height,\n                left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n            };\n            adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n            currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n            // If we had to make adjustments, do the calculations again\n        } while (adjustmentRatio !== 1);\n\n        // Reposition the image correctly\n        this.image.set({\n            left: this.editorWidth / 2 - deltaX,\n            top: this.editorHeight / 2 - deltaY\n        });\n\n        // Finally, store the new cropper state to reflect the rotation change.\n        state.offsetX = newCenterX;\n        state.offsetY = newCenterY;\n        state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n        state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n        this.storeCropperState(state);\n\n        // Zoom the image in and we're done.\n        this.zoomRatio = currentZoomRatio;\n\n        if (this.focalPoint) {\n            this._adjustFocalPointByAngle(angleDelta);\n\n            if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 0});\n            } else {\n                this.focalPoint.set({opacity: 1});\n            }\n        } else if (angleDelta !== 0) {\n            this._resetFocalPointPosition();\n        }\n\n        this._zoomImage();\n    },\n\n    /**\n     * If focal point is active and outside of viewport after straightening, reset it.\n     */\n    _cleanupFocalPointAfterStraighten: function() {\n        if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n            this.focalPoint.set({opacity: 1});\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n            this.toggleFocalPoint();\n        }\n    },\n\n    /**\n     * Reset focal point to the middle of image.\n     */\n    _resetFocalPointPosition: function() {\n        var state = this.focalPointState;\n        state.offsetX = 0;\n        state.offsetY = 0;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n     *\n     * @param object\n     * @param containingObject\n     *\n     * @returns {boolean}\n     */\n    _isCenterInside: function(object, containingObject) {\n        return (object.left > containingObject.left - containingObject.width / 2\n            && object.top > containingObject.top - containingObject.height / 2\n            && object.left < containingObject.left + containingObject.width / 2\n            && object.top < containingObject.top + containingObject.height / 2\n        );\n    },\n\n    /**\n     * Adjust the focal point by an angle in degrees.\n     * @param angle\n     */\n    _adjustFocalPointByAngle: function(angle) {\n        var angleInRadians = angle * (Math.PI / 180);\n        var state = this.focalPointState;\n\n        var focalX = state.offsetX;\n        var focalY = state.offsetY;\n\n        // Calculate how the focal point would need to move in a circle to keep on the same spot\n        // on the image if it was rotated with zoom intact.\n        var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n        var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n        var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n        var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n        var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n        this.focalPoint.left = this.image.left + adjustedFocalX;\n        this.focalPoint.top = this.image.top + adjustedFocalY;\n\n        state.offsetX = newFocalX;\n        state.offsetY = newFocalY;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n     * If the rectangle fits, 1 will be returned.\n     *\n     * @param rectangle\n     * @param containingVertices\n     */\n    _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n        var rectangleVertices = this._getRectangleVertices(rectangle);\n        var vertex;\n\n        // Check if any of the viewport vertices end up out of bounds\n        for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n            vertex = rectangleVertices[verticeIndex];\n\n            if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                break;\n            }\n\n            vertex = false;\n        }\n\n        // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n        var adjustmentRatio;\n\n        if (!vertex) {\n            adjustmentRatio = 1;\n        } else {\n            // Find out which edge got crossed by the vertex\n            var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n            var rectangleCenter = {\n                x: rectangle.left + rectangle.width / 2,\n                y: rectangle.top + rectangle.height / 2\n            };\n\n            // Calculate how much further that edge needs to be.\n            // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n            var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n            var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n            // Adjust the zoom ratio\n            adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n        }\n\n        return adjustmentRatio;\n    },\n\n    /**\n     * Save the image.\n     *\n     * @param ev\n     */\n    saveImage: function(ev) {\n        var $button = $(ev.currentTarget);\n        if ($button.hasClass('disabled')) {\n            return false;\n        }\n\n        $('.btn', this.$buttons).addClass('disabled');\n        this.$buttons.append('<div class=\"spinner\"></div>');\n\n        var postData = {\n            assetId: this.assetId,\n            viewportRotation: this.viewportRotation,\n            imageRotation: this.imageStraightenAngle,\n            replace: $button.hasClass('replace') ? 1 : 0\n        };\n\n        if (this.cropperState) {\n            var cropData = {};\n\n            cropData.height = this.cropperState.height;\n            cropData.width = this.cropperState.width;\n            cropData.offsetX = this.cropperState.offsetX;\n            cropData.offsetY = this.cropperState.offsetY;\n\n            postData.imageDimensions = this.cropperState.imageDimensions;\n\n            postData.cropData = cropData;\n        } else {\n            postData.imageDimensions = this.getScaledImageDimensions();\n        }\n\n        if (this.focalPoint) {\n            postData.focalPoint = this.focalPointState;\n        }\n\n        postData.flipData = this.flipData;\n        postData.zoom = this.zoomRatio;\n\n        Craft.postActionRequest('assets/save-image', postData, function(data) {\n            this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n            if (data.error) {\n                alert(data.error);\n                return;\n            }\n\n            this.onSave();\n            this.hide();\n            Craft.cp.runQueue();\n        }.bind(this));\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToCoverRatio: function(dimensions) {\n        // Convert the angle to radians\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        // Calculate the dimensions of the scaled image using the magic of math\n        var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n        var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n        // Calculate the ratio\n        return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToFitRatio: function(dimensions) {\n        // Get the bounding box for a rotated image\n        var boundingBox = this._getImageBoundingBox(dimensions);\n\n        // Scale the bounding box to fit\n        var scale = 1;\n        if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n            var vertScale = this.editorHeight / boundingBox.height;\n            var horiScale = this.editorWidth / boundingBox.width;\n            scale = Math.min(horiScale, vertScale);\n        }\n\n        return scale;\n    },\n\n    /**\n     * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n     */\n    getCombinedZoomRatio: function(dimensions) {\n        return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n    },\n\n    /**\n     * Draw the grid.\n     *\n     * @private\n     */\n    _showGrid: function() {\n        if (!this.grid) {\n            var strokeOptions = {\n                strokeWidth: 1,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            var lineCount = 8;\n            var gridWidth = this.viewport.width;\n            var gridHeight = this.viewport.height;\n            var xStep = gridWidth / (lineCount + 1);\n            var yStep = gridHeight / (lineCount + 1);\n\n            var grid = [\n                new fabric.Rect({\n                    strokeWidth: 2,\n                    stroke: 'rgba(255,255,255,1)',\n                    originX: 'center',\n                    originY: 'center',\n                    width: gridWidth,\n                    height: gridHeight,\n                    left: gridWidth / 2,\n                    top: gridHeight / 2,\n                    fill: 'rgba(255,255,255,0)'\n                })\n            ];\n\n            var i;\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n            }\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n            }\n\n            this.grid = new fabric.Group(grid, {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                angle: this.viewport.angle\n            });\n\n            this.canvas.add(this.grid);\n            this.renderImage();\n        }\n    },\n\n    /**\n     * Hide the grid\n     */\n    _hideGrid: function() {\n        this.canvas.remove(this.grid);\n        this.grid = null;\n        this.renderImage();\n    },\n\n    /**\n     * Remove all the events when hiding the editor.\n     */\n    onFadeOut: function() {\n        this.destroy();\n    },\n\n    /**\n     * Make sure underlying content is not scrolled by accident.\n     */\n    show: function() {\n        this.base();\n\n        $('html').addClass('noscroll');\n    },\n\n    /**\n     * Allow the content to scroll.\n     */\n    hide: function() {\n        this.removeAllListeners();\n        this.straighteningInput.removeAllListeners();\n        $('html').removeClass('noscroll');\n        this.base();\n    },\n\n    /**\n     * onSave callback.\n     */\n    onSave: function() {\n        this.settings.onSave();\n        this.trigger('save');\n    },\n\n    /**\n     * Enable the rotation slider.\n     */\n    enableSlider: function() {\n        this.$imageTools.removeClass('hidden');\n    },\n\n    /**\n     * Disable the rotation slider.\n     */\n    disableSlider: function() {\n        this.$imageTools.addClass('hidden');\n    },\n\n    /**\n     * Switch to crop mode.\n     */\n    enableCropMode: function() {\n        var imageDimensions = this.getScaledImageDimensions();\n        this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n        var viewportProperties = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var callback = function() {\n            this._setFittedImageVerticeCoordinates();\n\n            // Restore cropper\n            var state = this.cropperState;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Restore based on the stored information\n            var cropperData = {\n                left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                width: state.width * sizeFactor * this.zoomRatio,\n                height: state.height * sizeFactor * this.zoomRatio\n            };\n\n            this._showCropper(cropperData);\n\n            if (this.focalPoint) {\n                sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        }.bind(this);\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Switch out of crop mode.\n     */\n    disableCropMode: function() {\n        var viewportProperties = {};\n\n        this._hideCropper();\n        var imageDimensions = this.getScaledImageDimensions();\n        var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n        var inverseZoomFactor = targetZoom / this.zoomRatio;\n        this.zoomRatio = targetZoom;\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var offsetX = this.clipper.left - this.image.left;\n        var offsetY = this.clipper.top - this.image.top;\n\n        var imageOffsetX = offsetX * inverseZoomFactor;\n        var imageOffsetY = offsetY * inverseZoomFactor;\n        imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n        imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n        // Calculate the cropper dimensions after all the zooming\n        viewportProperties.height = this.clipper.height * inverseZoomFactor;\n        viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n        if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n            if (this.focalPoint) {\n                this.toggleFocalPoint();\n            }\n\n            this._resetFocalPointPosition();\n        }\n\n        var callback = function() {\n            // Reposition focal point correctly\n            if (this.focalPoint) {\n                var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        }.bind(this);\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Transition between cropping end editor modes\n     *\n     * @param callback\n     * @param imageProperties\n     * @param viewportProperties\n     * @private\n     */\n    _editorModeTransition: function(callback, imageProperties, viewportProperties) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            // Without this it looks semi-broken during animation\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n                this.renderImage();\n            }\n\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    callback();\n                    this.animationInProgress = false;\n                    this.renderImage();\n                }.bind(this)\n            });\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration\n            });\n        }\n    },\n\n    _showSpinner: function() {\n        this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n        var canvas = document.getElementById('spinner-canvas');\n        var context = canvas.getContext('2d');\n        var start = new Date();\n        var lines = 16,\n            cW = context.canvas.width,\n            cH = context.canvas.height;\n\n        var draw = function() {\n            var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n            context.save();\n            context.clearRect(0, 0, cW, cH);\n            context.translate(cW / 2, cH / 2);\n            context.rotate(Math.PI * 2 * rotation);\n            for (var i = 0; i < lines; i++) {\n                context.beginPath();\n                context.rotate(Math.PI * 2 / lines);\n                context.moveTo(cW / 10, 0);\n                context.lineTo(cW / 4, 0);\n                context.lineWidth = cW / 30;\n                context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                context.stroke();\n            }\n            context.restore();\n        };\n        this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n    },\n\n    _hideSpinner: function() {\n        window.clearInterval(this.spinnerInterval);\n        this.$spinnerCanvas.remove();\n        this.$spinnerCanvas = null;\n    },\n\n    /**\n     * Show the cropper.\n     *\n     * @param clipperData\n     */\n    _showCropper: function(clipperData) {\n        this._setupCropperLayer(clipperData);\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Hide the cropper.\n     */\n    _hideCropper: function() {\n        if (this.clipper) {\n            this.croppingCanvas.remove(this.clipper);\n            this.croppingCanvas.remove(this.croppingShade);\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n\n            this.croppingCanvas = null;\n            this.renderCropper = null;\n        }\n    },\n\n    /**\n     * Draw the cropper.\n     *\n     * @param clipperData\n     */\n    _setupCropperLayer: function(clipperData) {\n        // Set up the canvas for cropper\n        this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n            backgroundColor: 'rgba(0,0,0,0)',\n            hoverCursor: 'default',\n            selection: false\n        });\n\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        this.renderCropper = function() {\n            Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n        }.bind(this);\n\n        $('#cropping-canvas', this.$editorContainer).css({\n            position: 'absolute',\n            top: 0,\n            left: 0\n        });\n\n        this.croppingShade = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: this.editorWidth,\n            height: this.editorHeight,\n            fill: 'rgba(0,0,0,0.7)'\n        });\n\n        // Calculate the cropping rectangle size\n        var imageDimensions = this.getScaledImageDimensions();\n        var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n        var rectWidth = imageDimensions.width / rectangleRatio;\n        var rectHeight = imageDimensions.height / rectangleRatio;\n\n        if (this.hasOrientationChanged()) {\n            var temp = rectHeight;\n            rectHeight = rectWidth;\n            rectWidth = temp;\n        }\n\n        // Set up the cropping viewport rectangle\n        this.clipper = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: rectWidth,\n            height: rectHeight,\n            stroke: 'black',\n            fill: 'rgba(128,0,0,1)',\n            strokeWidth: 0\n        });\n\n        // Set from clipper data\n        if (clipperData) {\n            this.clipper.set(clipperData);\n        }\n\n        this.clipper.globalCompositeOperation = 'destination-out';\n        this.croppingCanvas.add(this.croppingShade);\n        this.croppingCanvas.add(this.clipper);\n    },\n\n    /**\n     * Redraw the cropper boundaries\n     */\n    _redrawCropperElements: function() {\n        if (typeof this._redrawCropperElements._ === 'undefined') {\n            this._redrawCropperElements._ = {};\n        }\n\n        if (this.cropperHandles) {\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n        }\n        this._redrawCropperElements._.lineOptions = {\n            strokeWidth: 4,\n            stroke: 'rgb(255,255,255)',\n            fill: false\n        };\n\n        this._redrawCropperElements._.gridOptions = {\n            strokeWidth: 2,\n            stroke: 'rgba(255,255,255,0.5)'\n        };\n\n        // Draw the handles\n        this._redrawCropperElements._.pathGroup = [\n            new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n        ];\n\n        this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n            left: this.clipper.left,\n            top: this.clipper.top,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        // Don't forget the rectangle\n        this.croppingRectangle = new fabric.Rect({\n            left: this.clipper.left,\n            top: this.clipper.top,\n            width: this.clipper.width,\n            height: this.clipper.height,\n            fill: 'rgba(0,0,0,0)',\n            stroke: 'rgba(255,255,255,0.8)',\n            strokeWidth: 2,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        this.cropperGrid = new fabric.Group(\n            [\n                new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n            ], {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n        this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n        this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n        if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n            this._redrawCropperElements._.cropTextTop -= 24;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n        }\n\n        this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n            left: this.croppingRectangle.left,\n            top: this._redrawCropperElements._.cropTextTop,\n            fontSize: 13,\n            fill: 'rgb(200,200,200)',\n            backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n            font: 'Craft',\n            width: 70,\n            height: 15,\n            originX: 'center',\n            originY: 'center',\n            textAlign: 'center'\n        });\n\n        this.croppingCanvas.add(this.cropperHandles);\n        this.croppingCanvas.add(this.cropperGrid);\n        this.croppingCanvas.add(this.croppingRectangle);\n        this.croppingCanvas.add(this.croppingAreaText);\n    },\n\n    /**\n     * Reposition the cropper when the image editor dimensions change.\n     *\n     * @param previousImageArea\n     */\n    _repositionCropper: function(previousImageArea) {\n        if (!this.croppingCanvas) {\n            return;\n        }\n\n        // Get the current clipper offset relative to center\n        var currentOffset = {\n            x: this.clipper.left - this.croppingCanvas.width / 2,\n            y: this.clipper.top - this.croppingCanvas.height / 2\n        };\n\n        // Resize the cropping canvas\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        // Check by what factor will the new final bounding box be different\n        var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n        var areaFactor = currentArea.width / previousImageArea.width;\n\n        // Adjust the cropper size to scale along with the bounding box\n        this.clipper.width = Math.round(this.clipper.width * areaFactor);\n        this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n        // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n        // for editor size changes and then multiply by the size factor to adjust for image size changes\n        this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n        this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n        // Resize the cropping shade\n        this.croppingShade.set({\n            width: this.editorWidth,\n            height: this.editorHeight,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        });\n\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Get the dimensions of a bounding rectangle by a set of four coordinates.\n     *\n     * @param coordinateSet\n     */\n    _getBoundingRectangle: function(coordinateSet) {\n        return {\n            width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n            height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n        };\n    },\n\n    /**\n     * Handle the mouse being clicked.\n     *\n     * @param ev\n     */\n    _handleMouseDown: function(ev) {\n        // Focal before resize before dragging\n        var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n        var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n        var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n        if (handle || move || focal) {\n            this.previousMouseX = ev.pageX;\n            this.previousMouseY = ev.pageY;\n\n            if (focal) {\n                this.draggingFocal = true;\n            } else if (handle) {\n                this.scalingCropper = handle;\n            } else if (move) {\n                this.draggingCropper = true;\n            }\n        }\n    },\n\n    /**\n     * Handle the mouse being moved.\n     *\n     * @param ev\n     */\n    _handleMouseMove: function(ev) {\n        if (this.mouseMoveEvent !== null) {\n            Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n        }\n        this.mouseMoveEvent = ev;\n    },\n\n    _handleMouseMoveInternal: function() {\n        if (this.mouseMoveEvent === null) {\n            return;\n        }\n\n        if (this.focalPoint && this.draggingFocal) {\n            this._handleFocalDrag(this.mouseMoveEvent);\n            this.storeFocalPointState();\n            this.renderImage();\n        } else if (this.draggingCropper || this.scalingCropper) {\n            if (this.draggingCropper) {\n                this._handleCropperDrag(this.mouseMoveEvent);\n            } else {\n                this._handleCropperResize(this.mouseMoveEvent);\n            }\n\n            this._redrawCropperElements();\n\n            this.storeCropperState();\n            this.renderCropper();\n        } else {\n            this._setMouseCursor(this.mouseMoveEvent);\n        }\n\n        this.previousMouseX = this.mouseMoveEvent.pageX;\n        this.previousMouseY = this.mouseMoveEvent.pageY;\n\n        this.mouseMoveEvent = null;\n    },\n\n    /**\n     * Handle mouse being released.\n     *\n     * @param ev\n     */\n    _handleMouseUp: function(ev) {\n        this.draggingCropper = false;\n        this.scalingCropper = false;\n        this.draggingFocal = false;\n    },\n\n    /**\n     * Handle mouse out\n     *\n     * @param ev\n     */\n    _handleMouseOut: function(ev) {\n        this._handleMouseUp(ev);\n        this.mouseMoveEvent = ev;\n        this._handleMouseMoveInternal();\n    },\n\n    /**\n     * Handle cropper being dragged.\n     *\n     * @param ev\n     */\n    _handleCropperDrag: function(ev) {\n        if (typeof this._handleCropperDrag._ === 'undefined') {\n            this._handleCropperDrag._ = {};\n        }\n\n        this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n            return false;\n        }\n\n        this._handleCropperDrag._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n        // If this would drag it outside of the image\n        if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n            // Try to find the furthest point in the same general direction where we can drag it\n\n            // Delta iterator setup\n            this._handleCropperDrag._.dxi = 0;\n            this._handleCropperDrag._.dyi = 0;\n            this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n            this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n            // The furthest we can move\n            this._handleCropperDrag._.furthest = 0;\n            this._handleCropperDrag._.furthestDeltas = {};\n\n            // Loop through every combination of dragging it not so far\n            for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                    this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                    if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                        if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                            this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                            this._handleCropperDrag._.furthestDeltas = {\n                                x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                            }\n                        }\n                    }\n                }\n            }\n\n            // REALLY can't drag along the cursor movement\n            if (this._handleCropperDrag._.furthest == 0) {\n                return;\n            } else {\n                this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n            }\n        }\n\n        this.clipper.set({\n            left: this.clipper.left + this._handleCropperDrag._.deltaX,\n            top: this.clipper.top + this._handleCropperDrag._.deltaY\n        });\n    },\n\n    /**\n     * Handle focal point being dragged.\n     *\n     * @param ev\n     */\n    _handleFocalDrag: function(ev) {\n        if (typeof this._handleFocalDrag._ === 'undefined') {\n            this._handleFocalDrag._ = {};\n        }\n\n        if (this.focalPoint) {\n            this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                return;\n            }\n\n            this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n            this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n            // Just make sure that the focal point stays inside the image\n            if (this.currentView === 'crop') {\n                if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                    return;\n                }\n            } else {\n                if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                    && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                    return;\n                }\n            }\n\n            this.focalPoint.set({\n                left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n            });\n        }\n    },\n\n    /**\n     * Set the cropping constraint\n     * @param constraint\n     */\n    setCroppingConstraint: function(constraint) {\n        // In case this caused the sidebar width to change.\n        this.updateSizeAndPosition();\n\n        switch (constraint) {\n            case 'none':\n                this.croppingConstraint = false;\n                break;\n\n            case 'original':\n                this.croppingConstraint = this.originalWidth / this.originalHeight;\n                break;\n\n            case 'current':\n                this.croppingConstraint = this.clipper.width / this.clipper.height;\n                break;\n\n            case 'custom':\n\n                break;\n            default:\n                this.croppingConstraint = parseFloat(constraint);\n\n                break;\n        }\n    },\n\n    /**\n     * Enforce the cropping constraint\n     */\n    enforceCroppingConstraint: function() {\n        if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n            this.enforceCroppingConstraint._ = {};\n        }\n\n        if (this.animationInProgress || !this.croppingConstraint) {\n            return;\n        }\n\n        this.animationInProgress = true;\n\n        // Mock the clipping rectangle for collision tests\n        this.enforceCroppingConstraint._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        // If wider than it should be\n        if (this.clipper.width > this.clipper.height * this.croppingConstraint) {\n            this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n            // Make it taller!\n            this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n            // Getting really awkward having to convert between 0;0 being center or top-left corner.\n            this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n            // If the clipper would end up out of bounds, make it narrower instead.\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n            }\n        } else {\n            // Follow the same pattern, if taller than it should be.\n            this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n            this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n            this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n            }\n        }\n\n        this.enforceCroppingConstraint._.properties = {\n            height: this.enforceCroppingConstraint._.rectangle.height,\n            width: this.enforceCroppingConstraint._.rectangle.width\n        };\n\n        // Make sure to redraw cropper handles and gridlines when resizing\n        this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n            onChange: function() {\n                this._redrawCropperElements();\n                this.croppingCanvas.renderAll();\n            }.bind(this),\n            duration: this.settings.animationDuration,\n            onComplete: function() {\n                this._redrawCropperElements();\n                this.animationInProgress = false;\n                this.renderCropper();\n                this.storeCropperState();\n            }.bind(this)\n        });\n    },\n\n    /**\n     * Handle cropper being resized.\n     *\n     * @param ev\n     */\n    _handleCropperResize: function(ev) {\n        if (typeof this._handleCropperResize._ === 'undefined') {\n            this._handleCropperResize._ = {};\n        }\n\n        // Size deltas\n        this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n            this._handleCropperResize._.deltaX = 0;\n        }\n\n        if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n            this._handleCropperResize._.deltaY = 0;\n        }\n\n        if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n            return;\n        }\n\n        // Translate from center-center origin to absolute coords\n        this._handleCropperResize._.startingRectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        }\n\n        this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n        if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n            return;\n        }\n\n        if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n            return;\n        }\n\n        // Translate back to center-center origin.\n        this.clipper.set({\n            top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n            left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n            width: this._handleCropperResize._.rectangle.width,\n            height: this._handleCropperResize._.rectangle.height\n        });\n\n        this._redrawCropperElements();\n    },\n\n    _calculateNewCropperSizeByDeltas: function(startingRectangle, deltaX, deltaY, cropperDirection) {\n        if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n            this._calculateNewCropperSizeByDeltas._ = {};\n        }\n\n        // Center deltas\n        this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n        this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n        this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n        this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n        this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n        // Lock the aspect ratio if needed\n        if (this.croppingConstraint) {\n            this._calculateNewCropperSizeByDeltas._.change = 0;\n\n            // Take into account the mouse direction and figure out the \"real\" change in cropper size\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'br':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n\n            if (this.croppingConstraint > 1) {\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n            } else {\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n            // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n        } else {\n            // Lock the aspect ratio\n            if (this.shiftKeyHeld &&\n                (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                    cropperDirection === 'bl' || cropperDirection === 'br')\n            ) {\n                this._calculateNewCropperSizeByDeltas._.ratio;\n                if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                }\n            }\n\n            if (cropperDirection.match(/t/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/b/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/r/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n            if (cropperDirection.match(/l/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n        }\n\n        this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n        this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n        this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n        this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n        return this._calculateNewCropperSizeByDeltas._.rectangle;\n    },\n\n    /**\n     * Set mouse cursor by it's position over cropper.\n     *\n     * @param ev\n     */\n    _setMouseCursor: function(ev) {\n        if (typeof this._setMouseCursor._ === 'undefined') {\n            this._setMouseCursor._ = {};\n        }\n\n        if (Garnish.isMobileBrowser(true)) {\n            return;\n        }\n        this._setMouseCursor._.cursor = 'default';\n        this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n        if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n            this._setMouseCursor._.cursor = 'pointer';\n        } else if (this._setMouseCursor._.handle) {\n            if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                this._setMouseCursor._.cursor = 'ns-resize';\n            } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                this._setMouseCursor._.cursor = 'ew-resize';\n            } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                this._setMouseCursor._.cursor = 'nwse-resize';\n            } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                this._setMouseCursor._.cursor = 'nesw-resize';\n            }\n        } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n            this._setMouseCursor._.cursor = 'move';\n        }\n\n        $('.body').css('cursor', this._setMouseCursor._.cursor);\n    },\n\n    /**\n     * Test whether the mouse cursor is on any cropper handles.\n     *\n     * @param ev\n     */\n    _cropperHandleHitTest: function(ev) {\n        if (typeof this._cropperHandleHitTest._ === 'undefined') {\n            this._cropperHandleHitTest._ = {};\n        }\n\n        this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n        this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n        this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n        this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n        this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n        this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n        // Left side top/bottom\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tl';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'bl';\n            }\n        }\n        // Right side top/bottom\n        if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tr';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'br';\n            }\n        }\n\n        // Left or right\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'l';\n        }\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'r';\n        }\n\n        // Top or bottom\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 't';\n        }\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 'b';\n        }\n\n        return false;\n    },\n\n    /**\n     * Test whether the mouse cursor is on a fabricJS object.\n     *\n     * @param object\n     * @param event\n     *\n     * @return boolean\n     */\n\n    _isMouseOver: function(event, object) {\n        if (typeof this._isMouseOver._ === 'undefined') {\n            this._isMouseOver._ = {};\n        }\n\n        this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n        this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n        this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._isMouseOver._.lb = object.left - object.width / 2;\n        this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n        this._isMouseOver._.tb = object.top - object.height / 2;\n        this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n        return (\n            this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n            this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n            this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n            this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n        );\n    },\n\n    /**\n     * Get vertices of a rectangle defined by left,top,height and width properties.\n     * Optionally it's possible to provide offsetX and offsetY values.\n     * Left and top properties of rectangle reference the top-left corner.\n     *\n     * @param rectangle\n     * @param [offsetX]\n     * @param [offsetY]\n     */\n    _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n        if (typeof this._getRectangleVertices._ === 'undefined') {\n            this._getRectangleVertices._ = {};\n        }\n\n        if (typeof offsetX === 'undefined') {\n            offsetX = 0;\n        }\n        if (typeof offsetY === 'undefined') {\n            offsetY = 0;\n        }\n\n        this._getRectangleVertices._.topLeft = {\n            x: rectangle.left + offsetX,\n            y: rectangle.top + offsetY\n        };\n\n        this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n        this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n        this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n        return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n    },\n\n    /**\n     * Set image vertice coordinates for an image that's been zoomed to fit.\n     */\n    _setFittedImageVerticeCoordinates: function() {\n        this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n    },\n\n    /**\n     * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n     * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n     *\n     * @param zoomMode\n     */\n    getImageVerticeCoords: function(zoomMode) {\n        var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n        var imageDimensions = this.getScaledImageDimensions();\n\n        var ratio;\n\n        if (typeof zoomMode === \"number\") {\n            ratio = zoomMode;\n        } else if (zoomMode === \"cover\") {\n            ratio = this.getZoomToCoverRatio(imageDimensions);\n        } else {\n            ratio = this.getZoomToFitRatio(imageDimensions);\n        }\n\n        // Get the dimensions of the scaled image\n        var scaledHeight = imageDimensions.height * ratio;\n        var scaledWidth = imageDimensions.width * ratio;\n\n        // Calculate the segments of the containing box for the image.\n        // When referring to top/bottom or right/left segments, these are on the\n        // right-side and bottom projection of the containing box for the zoomed out image.\n        var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n        var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n        var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n        var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n        // Calculate the offsets from editor box for the image-containing box\n        var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n        var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n        // Finally, calculate the image vertice coordinates\n        return {\n            a: {\n                x: horizontalOffset + rightHorizontalSegment,\n                y: verticalOffset\n            },\n            b: {\n                x: this.editorWidth - horizontalOffset,\n                y: verticalOffset + topVerticalSegment\n            },\n            c: {\n                x: horizontalOffset + leftHorizontalSegment,\n                y: this.editorHeight - verticalOffset\n            },\n            d: {\n                x: horizontalOffset,\n                y: verticalOffset + bottomVerticalSegment\n            }\n        };\n    },\n\n    /**\n     * Debug stuff by continuously rendering a fabric object on canvas.\n     *\n     * @param fabricObj\n     */\n    _debug: function(fabricObj) {\n        this.canvas.remove(this.debugger);\n        this.debugger = fabricObj;\n        this.canvas.add(this.debugger);\n    },\n\n    /**\n     * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n     * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n     * return true if the point is in the rectangle.\n     *\n     * Adapted from: http://stackoverflow.com/a/2763387/2040791\n     *\n     * @param points\n     * @param rectangle\n     */\n    arePointsInsideRectangle: function(points, rectangle) {\n        if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n            this.arePointsInsideRectangle._ = {};\n        }\n\n        // Pre-calculate the vectors and scalar products for two rectangle edges\n        this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n        this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n        this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n        this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n        for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n            this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n            // Calculate the vectors for two rectangle sides and for\n            // the vector from vertices a and b to the point P\n            this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n            this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n            // Calculate scalar or dot products for some vector combinations\n            this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n            this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n            this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n            this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n            if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                return false;\n            }\n        }\n\n        return true;\n    },\n\n    /**\n     * Returns an object representing the vector between points a and b.\n     *\n     * @param a\n     * @param b\n     */\n    _getVector: function(a, b) {\n        return {x: b.x - a.x, y: b.y - a.y};\n    },\n\n    /**\n     * Returns the scalar product of two vectors\n     *\n     * @param a\n     * @param b\n     */\n    _getScalarProduct: function(a, b) {\n        return a.x * b.x + a.y * b.y;\n    },\n\n    /**\n     * Returns the magnitude of a vector_redrawCropperElements\n     * .\n     *\n     * @param vector\n     */\n    _getVectorMagnitude: function(vector) {\n        return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n    },\n\n    /**\n     * Returns the angle between two vectors in degrees with two decimal points\n     *\n     * @param a\n     * @param b\n     */\n    _getAngleBetweenVectors: function(a, b) {\n        return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n    },\n\n    /**\n     * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n     *\n     * @param rectangle\n     * @param vertex\n     *\n     * @returns {*}\n     */\n    _getEdgeCrossed: function(rectangle, vertex) {\n        // Determine over which edge the vertex is\n        var edgePoints = [\n            [rectangle.a, rectangle.b],\n            [rectangle.b, rectangle.c],\n            [rectangle.c, rectangle.d],\n            [rectangle.d, rectangle.a]\n        ];\n\n        var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n        var smallestDiff = 180;\n        var edgeCrossed = null;\n\n        // Test each edge\n        for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n            var edge = edgePoints[edgeIndex];\n            var toCenter = this._getVector(edge[0], centerPoint);\n            var edgeVector = this._getVector(edge[0], edge[1]);\n            var toVertex = this._getVector(edge[0], vertex);\n\n            // If the angle between toCenter/toVertex is the sum of\n            // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n            // the edgeVector is between the other two meaning that this is the offending vertex.\n            // To avoid the rounding errors, we'll take the closest match\n            var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n            if (diff < smallestDiff) {\n                smallestDiff = diff;\n                edgeCrossed = edge;\n            }\n        }\n\n        return edgeCrossed;\n    },\n\n    /**\n     * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n     *\n     * @param dimensions\n     */\n    _getImageBoundingBox: function(dimensions) {\n        var box = {};\n\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        var proportion = dimensions.height / dimensions.width;\n        box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n        box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n        if (this.hasOrientationChanged()) {\n            var temp = box.width;\n            box.width = box.height;\n            box.height = temp;\n        }\n\n        return box;\n    }\n}, {\n    defaults: {\n        animationDuration: 100,\n        allowSavingAsNew: true,\n        onSave: $.noop,\n        allowDegreeFractions: null,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend({\n    $includeSubfoldersContainer: null,\n    $includeSubfoldersCheckbox: null,\n    showingIncludeSubfoldersCheckbox: false,\n\n    $uploadButton: null,\n    $uploadInput: null,\n    $progressBar: null,\n    $folders: null,\n\n    uploader: null,\n    promptHandler: null,\n    progressBar: null,\n\n    _uploadTotalFiles: 0,\n    _uploadFileProgress: {},\n    _uploadedAssetIds: [],\n    _currentUploaderSettings: {},\n\n    _assetDrag: null,\n    _folderDrag: null,\n    _expandDropTargetFolderTimeout: null,\n    _tempExpandedFolders: [],\n\n    _fileConflictTemplate: {\n        choices: [\n            {value: 'keepBoth', title: Craft.t('app', 'Keep both')}, {value: 'replace', title: Craft.t('app', 'Replace it')}\n        ]\n    },\n    _folderConflictTemplate: {\n        choices: [\n            {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')}, {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n        ]\n    },\n\n    init: function(elementType, $container, settings) {\n        this.base(elementType, $container, settings);\n\n        if (this.settings.context === 'index') {\n            if (!this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n        } else {\n            this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n            if (this.settings.modal) {\n                this.settings.modal.on('updateSizeAndPosition', $.proxy(this, '_positionProgressBar'));\n            }\n        }\n    },\n\n    initSources: function() {\n        if (this.settings.context === 'index' && !this._folderDrag) {\n            this._initIndexPageMode();\n        }\n\n        return this.base();\n    },\n\n    initSource: function($source) {\n        this.base($source);\n\n        this._createFolderContextMenu($source);\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                if ($source.data('folder-id')) {\n                    this._folderDrag.addItems($source.parent());\n                }\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    deinitSource: function($source) {\n        this.base($source);\n\n        // Does this source have a context menu?\n        var contextMenu = $source.data('contextmenu');\n\n        if (contextMenu) {\n            contextMenu.destroy();\n        }\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                this._folderDrag.removeItems($source.parent());\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    _getSourceLevel: function($source) {\n        return $source.parentsUntil('nav', 'ul').length;\n    },\n\n    /**\n     * Initialize the index page-specific features\n     */\n    _initIndexPageMode: function() {\n        if (this._folderDrag) {\n            return;\n        }\n\n        // Make the elements selectable\n        this.settings.selectable = true;\n        this.settings.multiSelect = true;\n\n        var onDragStartProxy = $.proxy(this, '_onDragStart'),\n            onDropTargetChangeProxy = $.proxy(this, '_onDropTargetChange');\n\n        // Asset dragging\n        // ---------------------------------------------------------------------\n\n        this._assetDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n\n            filter: $.proxy(function() {\n                return this.view.getSelectedElements().has('div.element[data-movable]');\n            }, this),\n\n            helper: $.proxy(function($file) {\n                return this._getFileDragHelper($file);\n            }, this),\n\n            dropTargets: $.proxy(function() {\n                // Which data attribute should we be checking?\n                var attr;\n                if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                    attr = 'data-can-move-peer-files-to';\n                } else {\n                    attr = 'data-can-move-to';\n                }\n\n                var targets = [];\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder\n                    var $source = this.$sources.eq(i);\n                    if (Garnish.hasAttr($source, attr)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            }, this),\n\n            onDragStart: onDragStartProxy,\n            onDropTargetChange: onDropTargetChangeProxy,\n            onDragStop: $.proxy(this, '_onFileDragStop'),\n            helperBaseZindex: 800\n        });\n\n        // Folder dragging\n        // ---------------------------------------------------------------------\n\n        this._folderDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n\n            filter: $.proxy(function() {\n                // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                var $selected = this.sourceSelect.getSelectedItems(),\n                    draggees = [];\n\n                for (var i = 0; i < $selected.length; i++) {\n                    var $source = $selected.eq(i);\n\n                    if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                        continue;\n                    }\n\n                    if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                        draggees.push($source.parent()[0]);\n                    }\n                }\n\n                return $(draggees);\n            }, this),\n\n            helper: $.proxy(function($draggeeHelper) {\n                var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                    $helperNav = $('<nav/>').appendTo($helperSidebar),\n                    $helperUl = $('<ul/>').appendTo($helperNav);\n\n                $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                $draggeeHelper.children('a').addClass('sel');\n\n                // Match the style\n                $draggeeHelper.css({\n                    'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                    'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                    'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                    'padding-left': this._folderDrag.$draggee.css('padding-left')\n                });\n\n                return $helperSidebar;\n            }, this),\n\n            dropTargets: $.proxy(function() {\n                var targets = [];\n\n                // Tag the dragged folder and it's subfolders\n                var draggedSourceIds = [];\n                this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                    draggedSourceIds.push($(this).data('key'));\n                });\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder and not one of the dragged folders\n                    var $source = this.$sources.eq(i),\n                        key = $source.data('key');\n\n                    if (!this._getFolderUidFromSourceKey(key)) {\n                        continue;\n                    }\n\n                    if (!Craft.inArray(key, draggedSourceIds)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            }, this),\n\n            onDragStart: onDragStartProxy,\n            onDropTargetChange: onDropTargetChangeProxy,\n            onDragStop: $.proxy(this, '_onFolderDragStop')\n        });\n    },\n\n    /**\n     * On file drag stop\n     */\n    _onFileDragStop: function() {\n        if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n            // Keep it selected\n            var originatingSource = this.$source;\n\n            var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                originalAssetIds = [];\n\n            // For each file, prepare array data.\n            for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                originalAssetIds.push(originalAssetId);\n            }\n\n            // Are any files actually getting moved?\n            if (originalAssetIds.length) {\n                this.setIndexBusy();\n\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(originalAssetIds.length);\n                this.progressBar.showProgressBar();\n\n                // For each file to move a separate request\n                var parameterArray = [];\n                for (i = 0; i < originalAssetIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: {\n                            assetId: originalAssetIds[i],\n                            folderId: targetFolderId\n                        }\n                    });\n                }\n\n                // Define the callback for when all file moves are complete\n                var onMoveFinish = $.proxy(function(responseArray) {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var response = responseArray[i];\n\n                        // Push prompt into prompt array\n                        if (response.conflict) {\n                            this.promptHandler.addPrompt({\n                                assetId: response.assetId,\n                                suggestedFilename: response.suggestedFilename,\n                                prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                            });\n                        }\n\n                        if (response.error) {\n                            alert(response.error);\n                        }\n                    }\n\n                    this.setIndexAvailable();\n                    this.progressBar.hideProgressBar();\n                    var reloadIndex = false;\n\n                    var performAfterMoveActions = function() {\n                        // Select original source\n                        this.sourceSelect.selectItem(originatingSource);\n\n                        // Make sure we use the correct offset when fetching the next page\n                        this._totalVisible -= this._assetDrag.$draggee.length;\n\n                        // And remove the elements that have been moved away\n                        for (var i = 0; i < originalAssetIds.length; i++) {\n                            $('[data-id=' + originalAssetIds[i] + ']').remove();\n                        }\n\n                        this.view.deselectAllElements();\n                        this._collapseExtraExpandedFolders(targetFolderId);\n\n                        if (reloadIndex) {\n                            this.updateElements();\n                        }\n                    };\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = $.proxy(function(returnData) {\n                            var newParameterArray = [];\n\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    reloadIndex = true;\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'keepBoth') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            filename: returnData[i].suggestedFilename\n                                        }\n                                    });\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            force: true\n                                        }\n                                    });\n                                }\n                            }\n\n                            // Nothing to do, carry on\n                            if (newParameterArray.length === 0) {\n                                performAfterMoveActions.apply(this);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                // Move conflicting files again with resolutions now\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        }, this);\n\n                        this._assetDrag.fadeOutHelpers();\n                        this.promptHandler.showBatchPrompts(promptCallback);\n                    } else {\n                        performAfterMoveActions.apply(this);\n                        this._assetDrag.fadeOutHelpers();\n                    }\n                }, this);\n\n                // Initiate the file move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._assetDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * On folder drag stop\n     */\n    _onFolderDragStop: function() {\n        // Only move if we have a valid target and we're not trying to move into our direct parent\n        if (\n            this._folderDrag.$activeDropTarget &&\n            this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n        ) {\n            var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n            this._collapseExtraExpandedFolders(targetFolderId);\n\n            // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n            var folderIds = [];\n\n            for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                    folderId = $a.data('folder-id');\n\n                // Make sure it's not already in the target folder and use this single folder Id.\n                if (folderId != targetFolderId) {\n                    folderIds.push(folderId);\n                    break;\n                }\n            }\n\n            if (folderIds.length) {\n                folderIds.sort();\n                folderIds.reverse();\n\n                this.setIndexBusy();\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(folderIds.length);\n                this.progressBar.showProgressBar();\n\n                var parameterArray = [];\n\n                for (i = 0; i < folderIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-folder',\n                        params: {\n                            folderId: folderIds[i],\n                            parentId: targetFolderId\n                        }\n                    });\n                }\n\n                // Increment, so to avoid displaying folder files that are being moved\n                this.requestId++;\n\n                /*\n                 Here's the rundown:\n                 1) Send all the folders being moved\n                 2) Get results:\n                 a) For all conflicting, receive prompts and resolve them to get:\n                 b) For all valid move operations: by now server has created the needed folders\n                 in target destination. Server returns an array of file move operations\n                 c) server also returns a list of all the folder id changes\n                 d) and the data-id of node to be removed, in case of conflict\n                 e) and a list of folders to delete after the move\n                 3) From data in 2) build a large file move operation array\n                 4) Create a request loop based on this, so we can display progress bar\n                 5) when done, delete all the folders and perform other maintenance\n                 6) Champagne\n                 */\n\n                // This will hold the final list of files to move\n                var fileMoveList = [];\n\n                var newSourceKey = '';\n\n                var onMoveFinish = function(responseArray) {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var data = responseArray[i];\n\n                        // If successful and have data, then update\n                        if (data.success) {\n                            if (data.transferList) {\n                                fileMoveList = data.transferList;\n                            }\n\n                            if (data.newFolderId) {\n                                newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                            }\n                        }\n\n                        // Push prompt into prompt array\n                        if (data.conflict) {\n                            data.prompt = {\n                                message: data.conflict,\n                                choices: this._folderConflictTemplate.choices\n                            };\n\n                            this.promptHandler.addPrompt(data);\n                        }\n\n                        if (data.error) {\n                            alert(data.error);\n                        }\n                    }\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = $.proxy(function(returnData) {\n                            this.promptHandler.resetPrompts();\n\n                            var newParameterArray = [];\n\n                            var params = {};\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    params.force = true;\n                                }\n\n                                if (returnData[i].choice === 'merge') {\n                                    params.merge = true;\n                                }\n\n                                params.folderId = data.folderId;\n                                params.parentId = data.parentId;\n\n                                newParameterArray.push({\n                                    action: 'assets/move-folder',\n                                    params: params\n                                });\n                            }\n\n                            // Start working on them lists, baby\n                            if (newParameterArray.length === 0) {\n                                $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        }, this);\n\n                        this.promptHandler.showBatchPrompts(promptCallback);\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                    } else {\n                        $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                    }\n                }.bind(this);\n\n                // Initiate the folder move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees until we get the Ajax response\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._folderDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * Really move the folder. Like really. For real.\n     */\n    _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n        this.progressBar.setItemCount(1);\n        this.progressBar.showProgressBar();\n\n        var moveCallback = function(folderDeleteList) {\n            // Delete the old folders\n            var counter = 0;\n            var limit = folderDeleteList.length;\n            for (var i = 0; i < folderDeleteList.length; i++) {\n                // When all folders are deleted, reload the sources.\n                Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, function() {\n                    if (++counter === limit) {\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        this._folderDrag.returnHelpersToDraggees();\n                        this.setInstanceState('selectedSource', newSourceKey);\n                        this.refreshSources();\n                    }\n                }.bind(this));\n            }\n        }.bind(this);\n\n        if (fileMoveList.length > 0) {\n            var parameterArray = [];\n\n            for (var i = 0; i < fileMoveList.length; i++) {\n                parameterArray.push({\n                    action: 'assets/move-asset',\n                    params: fileMoveList[i]\n                });\n            }\n            this._performBatchRequests(parameterArray, function() {\n                moveCallback(folderDeleteList);\n            });\n        } else {\n            moveCallback(folderDeleteList);\n        }\n    },\n\n    /**\n     * Returns the root level source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getRootSource: function($source) {\n        var $parent;\n        while (($parent = this._getParentSource($source)) && $parent.length) {\n            $source = $parent;\n        }\n        return $source;\n    },\n\n    /**\n     * Get parent source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getParentSource: function($source) {\n        if (this._getSourceLevel($source) > 1) {\n            return $source.parent().parent().siblings('a');\n        }\n    },\n\n    _selectSourceByFolderId: function(targetFolderId) {\n        var $targetSource = this._getSourceByKey(targetFolderId);\n\n        // Make sure that all the parent sources are expanded and this source is visible.\n        var $parentSources = $targetSource.parent().parents('li');\n\n        for (var i = 0; i < $parentSources.length; i++) {\n            var $parentSource = $($parentSources[i]);\n\n            if (!$parentSource.hasClass('expanded')) {\n                $parentSource.children('.toggle').trigger('click');\n            }\n        }\n\n        this.selectSource($targetSource);\n        this.updateElements();\n    },\n\n    /**\n     * Initialize the uploader.\n     *\n     * @private\n     */\n    afterInit: function() {\n        if (!this.$uploadButton) {\n            this.$uploadButton = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                'data-icon': 'upload',\n                style: 'position: relative; overflow: hidden;',\n                text: Craft.t('app', 'Upload files'),\n            });\n            this.addButton(this.$uploadButton);\n\n            this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n        }\n\n        this.promptHandler = new Craft.PromptHandler();\n        this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            fileInput: this.$uploadInput,\n            dropZone: this.$container\n        };\n\n        options.events = {\n            fileuploadstart: $.proxy(this, '_onUploadStart'),\n            fileuploadprogressall: $.proxy(this, '_onUploadProgress'),\n            fileuploaddone: $.proxy(this, '_onUploadComplete')\n        };\n\n        if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        this._currentUploaderSettings = options;\n\n        this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n        this.$uploadButton.on('click', $.proxy(function() {\n            if (this.$uploadButton.hasClass('disabled')) {\n                return;\n            }\n            if (!this.isIndexBusy) {\n                this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n            }\n        }, this));\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific volume in the URL?\n        if (this.settings.context === 'index' && typeof defaultVolumeHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n                if ($source.data('volume-handle') === defaultVolumeHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    onSelectSource: function() {\n        var $source = this._getSourceByKey(this.sourceKey);\n        var folderId = $source.data('folder-id');\n\n        if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n            this.uploader.setParams({\n                folderId: this.$source.attr('data-folder-id')\n            });\n            this.$uploadButton.removeClass('disabled');\n        } else {\n            this.$uploadButton.addClass('disabled');\n        }\n\n        // Update the URL if we're on the Assets index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'assets';\n            var $rootSource = this._getRootSource($source);\n            if ($rootSource && $rootSource.data('volume-handle')) {\n                uri += '/' + $rootSource.data('volume-handle');\n            }\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n\n        this.base();\n    },\n\n    _getFolderUidFromSourceKey: function(sourceKey) {\n        var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n        return m ? m[1] : null;\n    },\n\n    startSearching: function() {\n        // Does this source have subfolders?\n        if (!this.settings.hideSidebar && this.$source.siblings('ul').length) {\n            if (this.$includeSubfoldersContainer === null) {\n                var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                    this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                    this.updateElements();\n                });\n            } else {\n                this.$includeSubfoldersContainer.velocity('stop');\n            }\n\n            var checked = this.getSelectedSourceState('includeSubfolders', false);\n            this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: 0,\n                opacity: 1\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = true;\n        }\n\n        this.base();\n    },\n\n    stopSearching: function() {\n        if (this.showingIncludeSubfoldersCheckbox) {\n            this.$includeSubfoldersContainer.velocity('stop');\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: -25,\n                opacity: 0\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = false;\n        }\n\n        this.base();\n    },\n\n    getViewParams: function() {\n        var data = this.base();\n\n        if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n            data.criteria.includeSubfolders = true;\n        }\n\n        return data;\n    },\n\n    /**\n     * React on upload submit.\n     *\n     * @private\n     */\n    _onUploadStart: function() {\n        this.setIndexBusy();\n\n        // Initial values\n        this._positionProgressBar();\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n\n        this.promptHandler.resetPrompts();\n    },\n\n    /**\n     * Update uploaded byte count.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On Upload Complete.\n     */\n    _onUploadComplete: function(event, data) {\n        var response = data.result;\n        var filename = data.files[0].name;\n\n        var doReload = true;\n\n        if (response.success || response.conflict) {\n            // Add the uploaded file to the selected ones, if appropriate\n            this._uploadedAssetIds.push(response.assetId);\n\n            // If there is a prompt, add it to the queue\n            if (response.conflict) {\n                response.prompt = {\n                    message: Craft.t('app', response.conflict, {file: response.filename}),\n                    choices: this._fileConflictTemplate.choices\n                };\n\n                this.promptHandler.addPrompt(response);\n            }\n\n            Craft.cp.runQueue();\n        } else {\n            if (response.error) {\n                alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n            } else {\n                alert(Craft.t('app', 'Upload failed for {filename}.', {filename: filename}));\n            }\n\n            doReload = false;\n        }\n\n        // For the last file, display prompts, if any. If not - just update the element view.\n        if (this.uploader.isLastUpload()) {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n\n            if (this.promptHandler.getPromptCount()) {\n                this.promptHandler.showBatchPrompts($.proxy(this, '_uploadFollowup'));\n            } else {\n                if (doReload) {\n                    this._updateAfterUpload();\n                }\n            }\n        }\n    },\n\n    /**\n     * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n     *\n     * @private\n     */\n    _updateAfterUpload: function() {\n        if (this.settings.context !== 'index') {\n            this.setSortAttribute('dateModified');\n            this.setSortDirection('desc');\n        }\n        this.updateElements();\n    },\n\n    /**\n     * Follow up to an upload that triggered at least one conflict resolution prompt.\n     *\n     * @param returnData\n     * @private\n     */\n    _uploadFollowup: function(returnData) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n\n        this.promptHandler.resetPrompts();\n\n        var finalCallback = function() {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n            this._updateAfterUpload();\n        }.bind(this);\n\n        this.progressBar.setItemCount(returnData.length);\n\n        var doFollowup = function(parameterArray, parameterIndex, callback) {\n            var postData = {};\n            var action = null;\n\n            var followupCallback = function(data, textStatus) {\n                if (textStatus === 'success' && data.assetId) {\n                    this._uploadedAssetIds.push(data.assetId);\n                } else if (data.error) {\n                    alert(data.error);\n                }\n                parameterIndex++;\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (parameterIndex === parameterArray.length) {\n                    callback();\n                } else {\n                    doFollowup(parameterArray, parameterIndex, callback);\n                }\n            }.bind(this);\n\n            if (parameterArray[parameterIndex].choice === 'replace') {\n                action = 'assets/replace-file';\n                postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                if (parameterArray[parameterIndex].conflictingAssetId) {\n                    postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                } else {\n                    postData.targetFilename = parameterArray[parameterIndex].filename;\n                }\n            } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                action = 'assets/delete-asset';\n                postData.assetId = parameterArray[parameterIndex].assetId;\n            }\n\n            if (!action) {\n                // We don't really need to do another request, so let's pretend that already happened\n                followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n            } else {\n                Craft.postActionRequest(action, postData, followupCallback);\n            }\n        }.bind(this);\n\n        this.progressBar.showProgressBar();\n        doFollowup(returnData, 0, finalCallback);\n    },\n\n    /**\n     * Perform actions after updating elements\n     * @private\n     */\n    onUpdateElements: function() {\n        this._onUpdateElements(false, this.view.getAllElements());\n        this.view.on('appendElements', $.proxy(function(ev) {\n            this._onUpdateElements(true, ev.newElements);\n        }, this));\n\n        this.base();\n    },\n\n    /**\n     * Do the after-update initializations\n     * @private\n     */\n    _onUpdateElements: function(append, $newElements) {\n        if (this.settings.context === 'index') {\n            if (!append) {\n                this._assetDrag.removeAllItems();\n            }\n\n            this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n        }\n\n        // See if we have freshly uploaded files to add to selection\n        if (this._uploadedAssetIds.length) {\n            if (this.view.settings.selectable) {\n                for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                    this.view.selectElementById(this._uploadedAssetIds[i]);\n                }\n            }\n\n            // Reset the list.\n            this._uploadedAssetIds = [];\n        }\n\n        this.base(append, $newElements);\n\n        this.removeListener(this.$elements, 'keydown');\n        this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n        this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item).find('.element');\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    _onDragStart: function() {\n        this._tempExpandedFolders = [];\n    },\n\n    /**\n     * Get File Drag Helper\n     */\n    _getFileDragHelper: function($element) {\n        var currentView = this.getSelectedSourceState('mode');\n        var $outerContainer;\n        var $innerContainer;\n\n        switch (currentView) {\n            case 'table': {\n                $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                var $tbody = $('<tbody/>').appendTo($table);\n\n                $element.appendTo($tbody);\n\n                // Copy the column widths\n                this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                var $helperCells = $element.children();\n\n                for (var i = 0; i < $helperCells.length; i++) {\n                    // Hard-set the cell widths\n                    var $helperCell = $($helperCells[i]);\n\n                    // Skip the checkbox cell\n                    if ($helperCell.hasClass('checkbox-cell')) {\n                        $helperCell.remove();\n                        $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                        continue;\n                    }\n\n                    var $firstRowCell = $(this._$firstRowCells[i]),\n                        width = $firstRowCell.width();\n\n                    $firstRowCell.width(width);\n                    $helperCell.width(width);\n                }\n\n                return $outerContainer;\n            }\n            case 'thumbs': {\n                $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                $element.appendTo($innerContainer);\n\n                return $outerContainer;\n            }\n        }\n\n        return $();\n    },\n\n    /**\n     * On Drop Target Change\n     */\n    _onDropTargetChange: function($dropTarget) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        if ($dropTarget) {\n            var folderId = $dropTarget.data('folder-id');\n\n            if (folderId) {\n                this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                    this._expandDropTargetFolderTimeout = setTimeout($.proxy(this, '_expandFolder'), 500);\n                }\n            } else {\n                this.dropTargetFolder = null;\n            }\n        }\n\n        if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n            // Temporarily remove the .sel class on the active source\n            this.$source.removeClass('sel');\n        } else {\n            this.$source.addClass('sel');\n        }\n    },\n\n    /**\n     * Collapse Extra Expanded Folders\n     */\n    _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        // If a source ID is passed in, exclude its parents\n        var $excludedSources;\n\n        if (dropTargetFolderId) {\n            $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n        }\n\n        for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n            var $source = this._tempExpandedFolders[i];\n\n            // Check the parent list, if a source id is passed in\n            if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                this._collapseFolder($source);\n                this._tempExpandedFolders.splice(i, 1);\n            }\n        }\n    },\n\n    _getSourceByKey: function(key) {\n        return this.$sources.filter('[data-key$=\"' + key + '\"]');\n    },\n\n    _hasSubfolders: function($source) {\n        return $source.siblings('ul').find('li').length;\n    },\n\n    _isExpanded: function($source) {\n        return $source.parent('li').hasClass('expanded');\n    },\n\n    _expandFolder: function() {\n        // Collapse any temp-expanded drop targets that aren't parents of this one\n        this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n        this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n        // Keep a record of that\n        this._tempExpandedFolders.push(this.dropTargetFolder);\n    },\n\n    _collapseFolder: function($source) {\n        if ($source.parent().hasClass('expanded')) {\n            $source.siblings('.toggle').trigger('click');\n        }\n    },\n\n    _createFolderContextMenu: function($source) {\n        // Make sure it's a volume folder\n        if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n            return;\n        }\n\n        var menuOptions = [{label: Craft.t('app', 'New subfolder'), onClick: $.proxy(this, '_createSubfolder', $source)}];\n\n        // For all folders that are not top folders\n        if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n            menuOptions.push({label: Craft.t('app', 'Rename folder'), onClick: $.proxy(this, '_renameFolder', $source)});\n            menuOptions.push({label: Craft.t('app', 'Delete folder'), onClick: $.proxy(this, '_deleteFolder', $source)});\n        }\n\n        new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n    },\n\n    _createSubfolder: function($parentFolder) {\n        var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n        if (subfolderName) {\n            var params = {\n                parentId: $parentFolder.data('folder-id'),\n                folderName: subfolderName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/create-folder', params, $.proxy(function(data, textStatus) {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    this._prepareParentForChildren($parentFolder);\n\n                    var $subfolder = $(\n                        '<li>' +\n                        '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                        ' data-folder-id=\"' + data.folderId + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                        '>' +\n                        data.folderName +\n                        '</a>' +\n                        '</li>'\n                    );\n\n                    var $a = $subfolder.children('a:first');\n                    this._appendSubfolder($parentFolder, $subfolder);\n                    this.initSource($a);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            }, this));\n        }\n    },\n\n    _deleteFolder: function($targetFolder) {\n        if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n            var params = {\n                folderId: $targetFolder.data('folder-id')\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/delete-folder', params, $.proxy(function(data, textStatus) {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    var $parentFolder = this._getParentSource($targetFolder);\n\n                    // Remove folder and any trace from its parent, if needed\n                    this.deinitSource($targetFolder);\n\n                    $targetFolder.parent().remove();\n                    this._cleanUpTree($parentFolder);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            }, this));\n        }\n    },\n\n    /**\n     * Rename\n     */\n    _renameFolder: function($targetFolder) {\n        var oldName = $.trim($targetFolder.text()),\n            newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n        if (newName && newName !== oldName) {\n            var params = {\n                folderId: $targetFolder.data('folder-id'),\n                newName: newName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/rename-folder', params, $.proxy(function(data, textStatus) {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    $targetFolder.text(data.newName);\n\n                    // If the current folder was renamed.\n                    if (this._getFolderUidFromSourceKey(this.sourceSelect.$selectedItems.data('key')) === this._getFolderUidFromSourceKey($targetFolder.data('key'))) {\n                        this.updateElements();\n                    }\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            }, this), 'json');\n        }\n    },\n\n    /**\n     * Prepare a source folder for children folder.\n     *\n     * @param $parentFolder\n     * @private\n     */\n    _prepareParentForChildren: function($parentFolder) {\n        if (!this._hasSubfolders($parentFolder)) {\n            $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n            this.initSourceToggle($parentFolder);\n        }\n    },\n\n    /**\n     * Appends a subfolder to the parent folder at the correct spot.\n     *\n     * @param $parentFolder\n     * @param $subfolder\n     * @private\n     */\n    _appendSubfolder: function($parentFolder, $subfolder) {\n        var $subfolderList = $parentFolder.siblings('ul'),\n            $existingChildren = $subfolderList.children('li'),\n            subfolderLabel = $.trim($subfolder.children('a:first').text()),\n            folderInserted = false;\n\n        for (var i = 0; i < $existingChildren.length; i++) {\n            var $existingChild = $($existingChildren[i]);\n\n            if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                $existingChild.before($subfolder);\n                folderInserted = true;\n                break;\n            }\n        }\n\n        if (!folderInserted) {\n            $parentFolder.siblings('ul').append($subfolder);\n        }\n    },\n\n    _cleanUpTree: function($parentFolder) {\n        if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n            this.deinitSourceToggle($parentFolder);\n            $parentFolder.siblings('ul').remove();\n            $parentFolder.siblings('.toggle').remove();\n            $parentFolder.parent().removeClass('expanded');\n        }\n    },\n\n    _positionProgressBar: function() {\n        if (!this.progressBar) {\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n        }\n\n        var $container = $(),\n            scrollTop = 0,\n            offset = 0;\n\n        if (this.settings.context === 'index') {\n            $container = this.progressBar.$progressBar.closest('#content');\n            scrollTop = Garnish.$win.scrollTop();\n        } else {\n            $container = this.progressBar.$progressBar.closest('.main');\n            scrollTop = this.$main.scrollTop();\n        }\n\n        var containerTop = $container.offset().top;\n        var diff = scrollTop - containerTop;\n        var windowHeight = Garnish.$win.height();\n\n        if ($container.height() > windowHeight) {\n            offset = (windowHeight / 2) - 6 + diff;\n        } else {\n            offset = ($container.height() / 2) - 6;\n        }\n\n        if (this.settings.context !== 'index') {\n            offset = scrollTop + (($container.height() / 2) - 6);\n        }\n\n        this.progressBar.$progressBar.css({\n            top: offset\n        });\n    },\n\n    _performBatchRequests: function(parameterArray, finalCallback) {\n        var responseArray = [];\n\n        var doRequest = function(parameters) {\n            Craft.postActionRequest(parameters.action, parameters.params, function(data, textStatus) {\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (textStatus === 'success') {\n                    responseArray.push(data);\n\n                    // If assets were just merged we should get the reference tags updated right away\n                    Craft.cp.runQueue();\n                }\n\n                if (responseArray.length >= parameterArray.length) {\n                    finalCallback(responseArray);\n                }\n            }.bind(this));\n        }.bind(this);\n\n        for (var i = 0; i < parameterArray.length; i++) {\n            doRequest(parameterArray[i]);\n        }\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend({\n    requestId: 0,\n    hud: null,\n    $uploadBtn: null,\n    uploader: null,\n    progressBar: null,\n\n    originalFilename: '',\n    originalExtension: '',\n\n    init: function() {\n        if (arguments.length > 0 && typeof arguments[0] === 'object') {\n            arguments[0].editorSettings = {\n                onShowHud: $.proxy(this.resetOriginalFilename, this),\n                onCreateForm: $.proxy(this._renameHelper, this),\n                validators: [$.proxy(this.validateElementForm, this)]\n            };\n        }\n\n        this.base.apply(this, arguments);\n\n        if (this.settings.canUpload) {\n            this._attachUploader();\n        }\n\n        this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n        this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.elementSelect.$focusedItem;\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item);\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n    },\n\n    /**\n     * Create the element editor\n     */\n    createElementEditor: function($element) {\n        return this.base($element, {\n            params: {\n                defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n            },\n            input: this\n        });\n    },\n\n    /**\n     * Attach the uploader with drag event handler\n     */\n    _attachUploader: function() {\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            dropZone: this.$container,\n            formData: {\n                fieldId: this.settings.fieldId,\n            }\n        };\n\n        if (this.settings.sourceElementId) {\n            options.formData.elementId = this.settings.sourceElementId;\n        }\n\n        if (this.settings.criteria.siteId) {\n            options.formData.siteId = this.settings.criteria.siteId;\n        }\n\n        if (this.$addElementBtn) {\n            this.$uploadBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn dashed',\n                'data-icon': 'upload',\n                text: this.settings.limit == 1 ? Craft.t('app', 'Upload a file') : Craft.t('app', 'Upload files'),\n            }).insertAfter(this.$addElementBtn);\n            options.fileInput = $('<input/>', {\n                type: 'file',\n                class: 'hidden',\n                multiple: this.settings.limit != 1,\n            }).insertAfter(this.$uploadBtn);\n\n            // Trigger a window resize in case the field is inside an element editor HUD\n            Garnish.$win.trigger('resize');\n        }\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        if (typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        options.canAddMoreFiles = $.proxy(this, 'canAddMoreFiles');\n\n        options.events = {};\n        options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n        options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n        options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        if (this.$uploadBtn) {\n            this.$uploadBtn.on('click', $.proxy(function(ev) {\n                // We can't store a reference to the file input, because it gets replaced with a new input\n                // each time a new file is uploaded - see https://stackoverflow.com/a/25034721/1688568\n                this.$uploadBtn.next('input[type=file]').trigger('click');\n            }, this));\n        }\n    },\n\n    refreshThumbnail: function(elementId) {\n        var parameters = {\n            elementId: elementId,\n            siteId: this.settings.criteria.siteId,\n            size: this.settings.viewMode\n        };\n\n        Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n            if (data.error) {\n                alert(data.error);\n            } else {\n                var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                this.thumbLoader.load($existing);\n            }\n        }.bind(this));\n    },\n\n    /**\n     * Add the freshly uploaded file to the input field.\n     */\n    selectUploadedFile: function(element) {\n        // Check if we're able to add new elements\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        var $newElement = element.$element;\n\n        // Make a couple tweaks\n        $newElement.addClass('removable');\n        $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        $newElement.appendTo(this.$elementsContainer);\n\n        var margin = -($newElement.outerWidth() + 10);\n\n        this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addElementBtn.velocity(animateCss, 'fast');\n\n        this.addElements($newElement);\n\n        delete this.modal;\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function() {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var parameters = {\n                elementId: data.result.assetId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var html = $(data.html);\n                    Craft.appendHeadHtml(data.headHtml);\n                    this.selectUploadedFile(Craft.getElementInfo(html));\n                }\n\n                // Last file\n                if (this.uploader.isLastUpload()) {\n                    this.progressBar.hideProgressBar();\n                    this.$container.removeClass('uploading');\n\n                    if (window.draftEditor) {\n                        window.draftEditor.checkForm();\n                    }\n                }\n            }.bind(this));\n\n            Craft.cp.runQueue();\n        }\n    },\n\n    /**\n     * We have to take into account files about to be added as well\n     */\n    canAddMoreFiles: function(slotsTaken) {\n        return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n    },\n\n    /**\n     * Parse the passed filename into the base filename and extension.\n     *\n     * @param filename\n     * @returns {{extension: string, baseFileName: string}}\n     */\n    _parseFilename: function(filename) {\n        var parts = filename.split('.'),\n            extension = '';\n\n        if (parts.length > 1) {\n            extension = parts.pop();\n        }\n        var baseFileName = parts.join('.');\n        return {extension: extension, baseFileName: baseFileName};\n    },\n\n    /**\n     * A helper function or the filename field.\n     * @private\n     */\n    _renameHelper: function($form) {\n        $('.renameHelper', $form).on('focus', $.proxy(function(e) {\n            var input = e.currentTarget,\n                filename = this._parseFilename(input.value);\n\n            if (this.originalFilename === '' && this.originalExtension === '') {\n                this.originalFilename = filename.baseFileName;\n                this.originalExtension = filename.extension;\n            }\n\n            var startPos = 0,\n                endPos = filename.baseFileName.length;\n\n            if (typeof input.selectionStart !== 'undefined') {\n                input.selectionStart = startPos;\n                input.selectionEnd = endPos;\n            } else if (document.selection && document.selection.createRange) {\n                // IE branch\n                input.select();\n                var range = document.selection.createRange();\n                range.collapse(true);\n                range.moveEnd(\"character\", endPos);\n                range.moveStart(\"character\", startPos);\n                range.select();\n            }\n        }, this));\n    },\n\n    resetOriginalFilename: function() {\n        this.originalFilename = \"\";\n        this.originalExtension = \"\";\n    },\n\n    validateElementForm: function() {\n        var $filenameField = $('.renameHelper', this.elementEditor.hud.$hud.data('elementEditor').$form);\n        var filename = this._parseFilename($filenameField.val());\n\n        if (filename.extension !== this.originalExtension) {\n            // Blank extension\n            if (filename.extension === '') {\n                // If filename changed as well, assume removal of extension a mistake\n                if (this.originalFilename !== filename.baseFileName) {\n                    $filenameField.val(filename.baseFileName + '.' + this.originalExtension);\n                    return true;\n                } else {\n                    // If filename hasn't changed, make sure they want to remove extension\n                    return confirm(Craft.t('app', \"Are you sure you want to remove the extension “.{ext}”?\", {ext: this.originalExtension}));\n                }\n            } else {\n                // If the extension has changed, make sure it s intentional\n                return confirm(Craft.t('app', \"Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?\",\n                    {\n                        oldExt: this.originalExtension,\n                        newExt: filename.extension\n                    }));\n            }\n        }\n        return true;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend({\n    $selectTransformBtn: null,\n    _selectedTransform: null,\n\n    init: function(elementType, settings) {\n        settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n        this.base(elementType, settings);\n\n        if (settings.transforms.length) {\n            this.createSelectTransformButton(settings.transforms);\n        }\n    },\n\n    createSelectTransformButton: function(transforms) {\n        if (!transforms || !transforms.length) {\n            return;\n        }\n\n        var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n        this.$selectBtn.appendTo($btnGroup);\n\n        this.$selectTransformBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn menubtn disabled',\n            text: Craft.t('app', 'Select transform'),\n        }).appendTo($btnGroup);\n\n        var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n            $menuList = $('<ul></ul>').appendTo($menu);\n\n        for (var i = 0; i < transforms.length; i++) {\n            $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n        }\n\n        var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n            onOptionSelect: $.proxy(this, 'onSelectTransform')\n        });\n        MenuButton.disable();\n\n        this.$selectTransformBtn.data('menuButton', MenuButton);\n    },\n\n    onSelectionChange: function(ev) {\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            allowTransforms = false;\n\n        if ($selectedElements.length && this.settings.transforms.length) {\n            allowTransforms = true;\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                    break;\n                }\n            }\n        }\n\n        var MenuBtn = null;\n\n        if (this.$selectTransformBtn) {\n            MenuBtn = this.$selectTransformBtn.data('menuButton');\n        }\n\n        if (allowTransforms) {\n            if (MenuBtn) {\n                MenuBtn.enable();\n            }\n\n            this.$selectTransformBtn.removeClass('disabled');\n        } else if (this.$selectTransformBtn) {\n            if (MenuBtn) {\n                MenuBtn.disable();\n            }\n\n            this.$selectTransformBtn.addClass('disabled');\n        }\n\n        this.base();\n    },\n\n    onSelectTransform: function(option) {\n        var transform = $(option).data('transform');\n        this.selectImagesWithTransform(transform);\n    },\n\n    selectImagesWithTransform: function(transform) {\n        // First we must get any missing transform URLs\n        if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n            Craft.AssetSelectorModal.transformUrls[transform] = {};\n        }\n\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            imageIdsWithMissingUrls = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $item = $($selectedElements[i]),\n                elementId = Craft.getElementInfo($item).id;\n\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                imageIdsWithMissingUrls.push(elementId);\n            }\n        }\n\n        if (imageIdsWithMissingUrls.length) {\n            this.showFooterSpinner();\n\n            this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, $.proxy(function() {\n                this.hideFooterSpinner();\n                this.selectImagesWithTransform(transform);\n            }, this));\n        } else {\n            this._selectedTransform = transform;\n            this.selectElements();\n            this._selectedTransform = null;\n        }\n    },\n\n    fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n        var elementId = imageIdsWithMissingUrls.pop();\n\n        var data = {\n            assetId: elementId,\n            handle: transform\n        };\n\n        Craft.postActionRequest('assets/generate-transform', data, $.proxy(function(response, textStatus) {\n            Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n            if (textStatus === 'success') {\n                if (response.url) {\n                    Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                }\n            }\n\n            // More to load?\n            if (imageIdsWithMissingUrls.length) {\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n            } else {\n                callback();\n            }\n        }, this));\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = this.base($selectedElements);\n\n        if (this._selectedTransform) {\n            for (var i = 0; i < info.length; i++) {\n                var elementId = info[i].id;\n\n                if (\n                    typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                    Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                ) {\n                    info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                }\n            }\n        }\n\n        return info;\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo, this._selectedTransform);\n    }\n}, {\n    defaults: {\n        canSelectImageTransforms: false,\n        transforms: []\n    },\n\n    transformUrls: {}\n});\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend({\n    remainingSessionTime: null,\n    checkRemainingSessionTimer: null,\n    showLoginModalTimer: null,\n    decrementLogoutWarningInterval: null,\n\n    showingLogoutWarningModal: false,\n    showingLoginModal: false,\n\n    logoutWarningModal: null,\n    loginModal: null,\n\n    $logoutWarningPara: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $loginBtn: null,\n    $loginErrorPara: null,\n\n    submitLoginIfLoggedOut: false,\n\n    /**\n     * Init\n     */\n    init: function() {\n        this.updateRemainingSessionTime(Craft.remainingSessionTime);\n    },\n\n    /**\n     * Sets a timer for the next time to check the auth timeout.\n     */\n    setCheckRemainingSessionTimer: function(seconds) {\n        if (this.checkRemainingSessionTimer) {\n            clearTimeout(this.checkRemainingSessionTimer);\n        }\n\n        this.checkRemainingSessionTimer = setTimeout($.proxy(this, 'checkRemainingSessionTime'), seconds * 1000);\n    },\n\n    /**\n     * Pings the server to see how many seconds are left on the current user session, and handles the response.\n     */\n    checkRemainingSessionTime: function(extendSession) {\n        $.ajax({\n            url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n            type: 'GET',\n            dataType: 'json',\n            complete: $.proxy(function(jqXHR, textStatus) {\n                if (textStatus === 'success') {\n                    if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                        Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                    }\n\n                    this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                    this.submitLoginIfLoggedOut = false;\n                } else {\n                    this.updateRemainingSessionTime(-1);\n                }\n            }, this)\n        });\n    },\n\n    /**\n     * Updates our record of the auth timeout, and handles it.\n     */\n    updateRemainingSessionTime: function(remainingSessionTime) {\n        this.remainingSessionTime = parseInt(remainingSessionTime);\n\n        // Are we within the warning window?\n        if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n            // Is there still time to renew the session?\n            if (this.remainingSessionTime) {\n                if (!this.showingLogoutWarningModal) {\n                    // Show the warning modal\n                    this.showLogoutWarningModal();\n                }\n\n                // Will the session expire before the next checkup?\n                if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                    if (this.showLoginModalTimer) {\n                        clearTimeout(this.showLoginModalTimer);\n                    }\n\n                    this.showLoginModalTimer = setTimeout($.proxy(this, 'showLoginModal'), this.remainingSessionTime * 1000);\n                }\n            } else {\n                if (this.showingLoginModal) {\n                    if (this.submitLoginIfLoggedOut) {\n                        this.submitLogin();\n                    }\n                } else {\n                    // Show the login modal\n                    this.showLoginModal();\n                }\n            }\n\n            this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n        } else {\n            // Everything's good!\n            this.hideLogoutWarningModal();\n            this.hideLoginModal();\n\n            // Will be be within the minSafeSessionTime before the next update?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n            } else {\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the logout warning modal.\n     */\n    showLogoutWarningModal: function() {\n        var quickShow;\n\n        if (this.showingLoginModal) {\n            this.hideLoginModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLogoutWarningModal = true;\n\n        if (!this.logoutWarningModal) {\n            let $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>');\n            let $body = $('<div class=\"body\"/>').appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $logoutBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Log out now'),\n            }).appendTo($buttons);\n            let $renewSessionBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Keep me logged in'),\n            }).appendTo($buttons);\n\n            this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n            this.logoutWarningModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                onFadeIn: function() {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the renew button\n                        setTimeout(function() {\n                            $renewSessionBtn.trigger('focus');\n                        }, 100);\n                    }\n                }\n            });\n\n            this.addListener($logoutBtn, 'activate', 'logout');\n            this.addListener($form, 'submit', 'renewSession');\n        }\n\n        if (quickShow) {\n            this.logoutWarningModal.quickShow();\n        } else {\n            this.logoutWarningModal.show();\n        }\n\n        this.updateLogoutWarningMessage();\n\n        this.decrementLogoutWarningInterval = setInterval($.proxy(this, 'decrementLogoutWarning'), 1000);\n    },\n\n    /**\n     * Updates the logout warning message indicating that the session is about to expire.\n     */\n    updateLogoutWarningMessage: function() {\n        this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n            time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n        }));\n\n        this.logoutWarningModal.updateSizeAndPosition();\n    },\n\n    decrementLogoutWarning: function() {\n        if (this.remainingSessionTime > 0) {\n            this.remainingSessionTime--;\n            this.updateLogoutWarningMessage();\n        }\n\n        if (this.remainingSessionTime === 0) {\n            clearInterval(this.decrementLogoutWarningInterval);\n        }\n    },\n\n    /**\n     * Hides the logout warning modal.\n     */\n    hideLogoutWarningModal: function(quick) {\n        this.showingLogoutWarningModal = false;\n\n        if (this.logoutWarningModal) {\n            if (quick) {\n                this.logoutWarningModal.quickHide();\n            } else {\n                this.logoutWarningModal.hide();\n            }\n\n            if (this.decrementLogoutWarningInterval) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the login modal.\n     */\n    showLoginModal: function() {\n        var quickShow;\n\n        if (this.showingLogoutWarningModal) {\n            this.hideLogoutWarningModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLoginModal = true;\n\n        if (!this.loginModal) {\n            var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$loginBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Login'),\n            }).appendTo($buttonContainer);\n            this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.loginModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark loginmodalshade',\n                onFadeIn: $.proxy(function() {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the password input\n                        setTimeout($.proxy(function() {\n                            this.$passwordInput.trigger('focus');\n                        }, this), 100);\n                    }\n                }, this),\n                onFadeOut: $.proxy(function() {\n                    this.$passwordInput.val('');\n                }, this)\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $.proxy(function($newPasswordInput) {\n                    this.$passwordInput = $newPasswordInput;\n                }, this)\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($form, 'submit', 'login');\n        }\n\n        if (quickShow) {\n            this.loginModal.quickShow();\n        } else {\n            this.loginModal.show();\n        }\n    },\n\n    /**\n     * Hides the login modal.\n     */\n    hideLoginModal: function(quick) {\n        this.showingLoginModal = false;\n\n        if (this.loginModal) {\n            if (quick) {\n                this.loginModal.quickHide();\n            } else {\n                this.loginModal.hide();\n            }\n        }\n    },\n\n    logout: function() {\n        $.get({\n            url: Craft.getActionUrl('users/logout'),\n            dataType: 'json',\n            success: $.proxy(function() {\n                Craft.redirectTo('');\n            }, this)\n        });\n    },\n\n    renewSession: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        this.hideLogoutWarningModal();\n        this.checkRemainingSessionTime(true);\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$loginBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$loginBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    login: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.validatePassword()) {\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            if (typeof Craft.csrfTokenValue !== 'undefined') {\n                // Check the auth status one last time before sending this off,\n                // in case the user has already logged back in from another window/tab\n                this.submitLoginIfLoggedOut = true;\n                this.checkRemainingSessionTime();\n            } else {\n                this.submitLogin();\n            }\n        }\n    },\n\n    submitLogin: function() {\n        var data = {\n            loginName: Craft.username,\n            password: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/login', data, $.proxy(function(response, textStatus) {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.hideLoginModal();\n                    this.checkRemainingSessionTime();\n                } else {\n                    this.showLoginError(response.error);\n                    Garnish.shake(this.loginModal.$container);\n\n                    if (!Garnish.isMobileBrowser(true)) {\n                        this.$passwordInput.trigger('focus');\n                    }\n                }\n            } else {\n                this.showLoginError();\n            }\n        }, this));\n    },\n\n    showLoginError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$loginErrorPara.text(error);\n        this.loginModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showLoginError('');\n    }\n}, {\n    checkInterval: 60,\n    minSafeSessionTime: 120\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend({\n    authManager: null,\n\n    $nav: null,\n    $mainContainer: null,\n    $alerts: null,\n    $crumbs: null,\n    $notificationContainer: null,\n    $main: null,\n    $primaryForm: null,\n    $headerContainer: null,\n    $header: null,\n    $mainContent: null,\n    $details: null,\n    $tabsContainer: null,\n    $tabsList: null,\n    $tabs: null,\n    $overflowTabBtn: null,\n    $overflowTabList: null,\n    $selectedTab: null,\n    selectedTabIndex: null,\n    $sidebarContainer: null,\n    $sidebar: null,\n    $contentContainer: null,\n    $edition: null,\n\n    $confirmUnloadForms: null,\n    $deltaForms: null,\n    $collapsibleTables: null,\n\n    fixedHeader: false,\n\n    enableQueue: true,\n    totalJobs: 0,\n    jobInfo: null,\n    displayedJobInfo: null,\n    displayedJobInfoUnchanged: 1,\n    trackJobProgressTimeout: null,\n    jobProgressIcon: null,\n\n    checkingForUpdates: false,\n    forcingRefreshOnUpdatesCheck: false,\n    includingDetailsOnUpdatesCheck: false,\n    checkForUpdatesCallbacks: null,\n\n    init: function() {\n        // Is this session going to expire?\n        if (Craft.remainingSessionTime !== 0) {\n            this.authManager = new Craft.AuthManager();\n        }\n\n        // Find all the key elements\n        this.$nav = $('#nav');\n        this.$mainContainer = $('#main-container');\n        this.$alerts = $('#alerts');\n        this.$crumbs = $('#crumbs');\n        this.$notificationContainer = $('#notifications');\n        this.$main = $('#main');\n        this.$primaryForm = $('#main-form');\n        this.$headerContainer = $('#header-container');\n        this.$header = $('#header');\n        this.$mainContent = $('#main-content');\n        this.$details = $('#details');\n        this.$sidebarContainer = $('#sidebar-container');\n        this.$sidebar = $('#sidebar');\n        this.$contentContainer = $('#content-container');\n        this.$collapsibleTables = $('table.collapsible');\n\n        this.updateSidebarMenuLabel();\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$details.find('.meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        if (this.$header.length) {\n            this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n            this.updateFixedHeader();\n        }\n\n        Garnish.$doc.ready($.proxy(function() {\n            // Update responsive tables on window resize\n            this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n            this.handleWindowResize();\n\n            // Fade the notification out two seconds after page load\n            var $errorNotifications = this.$notificationContainer.children('.error'),\n                $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n            $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n            $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n            // Wait a frame before initializing any confirm-unload forms,\n            // so other JS that runs on ready() has a chance to initialize\n            Garnish.requestAnimationFrame($.proxy(this, 'initSpecialForms'));\n        }, this));\n\n        // Alerts\n        if (this.$alerts.length) {\n            this.initAlerts();\n        }\n\n        // Toggles\n        this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n        this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n        // Does this page have a primary form?\n        if (!this.$primaryForm.length) {\n            this.$primaryForm = $('form[data-saveshortcut]:first');\n        }\n\n        // Does the primary form support the save shortcut?\n        if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n            let shortcuts = [];\n            let actions = this.$primaryForm.data('actions');\n            if (typeof actions === 'undefined') {\n                shortcuts.push([\n                    {\n                        keyCode: Garnish.S_KEY,\n                        ctrl: true,\n                    }, {\n                        redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                        retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                    }\n                ]);\n            } else {\n                for (let i = 0; i < actions.length; i++) {\n                    let action = actions[i];\n                    if (!action.shortcut) {\n                        continue;\n                    }\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                            shift: !!action.shift,\n                        }, {\n                            action: action.action,\n                            redirect: action.redirect,\n                            confirm: action.confirm,\n                            params: action.params,\n                            data: action.data,\n                            retainScroll: action.retainScroll,\n                        }\n                    ]);\n                }\n            }\n            for (let i = 0; i < shortcuts.length; i++) {\n                Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                    this.submitPrimaryForm(shortcuts[i][1]);\n                });\n            }\n        }\n\n        this.initTabs();\n\n        // Should we match the previous scroll position?\n        let scrollY = Craft.getLocalStorage('scrollY');\n        if (typeof scrollY !== 'undefined') {\n            Craft.removeLocalStorage('scrollY');\n            Garnish.$doc.ready(() => {\n                Garnish.requestAnimationFrame(() => {\n                    window.scrollTo(0, scrollY);\n                });\n            });\n        }\n\n        if ($.isTouchCapable()) {\n            this.$mainContainer.on('focus', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputFocus'));\n            this.$mainContainer.on('blur', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputBlur'));\n        }\n    },\n\n    initSpecialForms: function() {\n        // Look for forms that we should watch for changes on\n        this.$confirmUnloadForms = $('form[data-confirm-unload]');\n        this.$deltaForms = $('form[data-delta]');\n\n        if (!this.$confirmUnloadForms.length) {\n            return;\n        }\n\n        var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n        var $form, serialized;\n\n        for (var i = 0; i < $forms.length; i++) {\n            $form = $forms.eq(i);\n            if (!$form.data('initialSerializedValue')) {\n                if (typeof $form.data('serializer') === 'function') {\n                    serialized = $form.data('serializer')();\n                } else {\n                    serialized = $form.serialize();\n                }\n                $form.data('initialSerializedValue', serialized);\n            }\n            this.addListener($form, 'submit', function(ev) {\n                if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                    this.removeListener(Garnish.$win, 'beforeunload');\n                }\n                if (Garnish.hasAttr($form, 'data-delta')) {\n                    ev.preventDefault();\n                    var serialized;\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                    Craft.createForm(data)\n                        .appendTo(Garnish.$bod)\n                        .submit();\n                }\n            });\n        }\n\n        this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n            var confirmUnload = false;\n            var $form, serialized;\n            if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                confirmUnload = true;\n            } else {\n                for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                    $form = this.$confirmUnloadForms.eq(i);\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    if ($form.data('initialSerializedValue') !== serialized) {\n                        confirmUnload = true;\n                        break;\n                    }\n                }\n            }\n\n            if (confirmUnload) {\n                var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                if (ev) {\n                    ev.originalEvent.returnValue = message;\n                } else {\n                    window.event.returnValue = message;\n                }\n\n                return message;\n            }\n        });\n    },\n\n    _handleInputFocus: function() {\n        this.updateFixedHeader();\n    },\n\n    _handleInputBlur: function() {\n        this.updateFixedHeader();\n    },\n\n    /**\n     * Submits a form.\n     * @param {Object} [options]\n     * @param {string} [options.action] The `action` param value override\n     * @param {string} [options.redirect] The `redirect` param value override\n     * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n     * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n     * @param {Object} [options.data] Additional data to be passed to the submit event\n     * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n     */\n    submitPrimaryForm: function(options) {\n        // Give other stuff on the page a chance to prepare\n        this.trigger('beforeSaveShortcut');\n\n        if (typeof options !== 'object' || !$.isPlainObject(options)) {\n            options = {};\n        }\n\n        if (!options.redirect) {\n            options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n        }\n\n        if (!options.data) {\n            options.data = {};\n        }\n        options.data.saveShortcut = true;\n\n        Craft.submitForm(this.$primaryForm, options);\n    },\n\n    updateSidebarMenuLabel: function() {\n        var $item = this.$sidebar.find('a.sel:first');\n        var $label = $item.children('.label');\n        $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n        Garnish.$bod.removeClass('showing-sidebar');\n    },\n\n    toggleNav: function() {\n        Garnish.$bod.toggleClass('showing-nav');\n    },\n\n    toggleSidebar: function() {\n        Garnish.$bod.toggleClass('showing-sidebar');\n    },\n\n    initTabs: function() {\n        // Clear out all our old info in case the tabs were just replaced\n        this.$tabsList = this.$tabs = this.$overflowTabBtn = this.$overflowTabList = this.$selectedTab =\n            this.selectedTabIndex = null;\n\n        this.$tabsContainer = $('#tabs');\n        if (!this.$tabsContainer.length) {\n            this.$tabsContainer = null;\n            return;\n        }\n\n        this.$tabsList = this.$tabsContainer.find('> ul');\n        this.$tabs = this.$tabsList.find('> li');\n        this.$overflowTabBtn = $('#overflow-tab-btn');\n        if (!this.$overflowTabBtn.data('menubtn')) {\n            new Garnish.MenuBtn(this.$overflowTabBtn);\n        }\n        this.$overflowTabList = this.$overflowTabBtn.data('menubtn').menu.$container.find('> ul');\n\n        for (let i = 0; i < this.$tabs.length; i++) {\n            const $tab = this.$tabs.eq(i);\n            this.removeAllListeners($tab);\n\n            // Does it link to an anchor?\n            const $a = $tab.children('a');\n            const href = $a.attr('href');\n            if (href && href.charAt(0) === '#') {\n                this.addListener($a, 'keydown', ev => {\n                    if ([Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                        ev.preventDefault();\n                        this.selectTab(ev.currentTarget);\n                        $a.focus();\n                    }\n                });\n                this.addListener($a, 'click', ev => {\n                    ev.preventDefault();\n                    this.selectTab(ev.currentTarget);\n                });\n\n                if (encodeURIComponent(href.substr(1)) === document.location.hash.substr(1)) {\n                    this.selectTab($a);\n                }\n            }\n\n            if (!this.$selectedTab && $a.hasClass('sel')) {\n                this._selectTab($a, i);\n            }\n        }\n    },\n\n    selectTab: function(tab) {\n        var $tab = $(tab);\n\n        if (this.$selectedTab) {\n            if (this.$selectedTab.get(0) === $tab.get(0)) {\n                return;\n            }\n            this.deselectTab();\n        }\n\n        $tab.addClass('sel');\n        var href = $tab.attr('href')\n        $(href).removeClass('hidden');\n        if (typeof history !== 'undefined') {\n            history.replaceState(undefined, undefined, href);\n        }\n        this._selectTab($tab, this.$tabs.index($tab.parent()));\n        this.updateTabs();\n        this.$overflowTabBtn.data('menubtn').menu.hide();\n    },\n\n    _selectTab: function($tab, index) {\n        if ($tab === this.$selectedTab) {\n            return;\n        }\n\n        this.$selectedTab = $tab;\n        this.selectedTabIndex = index;\n        if (index === 0) {\n            $('#content').addClass('square');\n        } else {\n            $('#content').removeClass('square');\n        }\n\n        Garnish.$win.trigger('resize');\n        // Fixes Redactor fixed toolbars on previously hidden panes\n        Garnish.$doc.trigger('scroll');\n\n        // If there is a revision menu, set its links to this tab ID\n        let href = $tab && $tab.attr('href');\n        if (href && href.charAt(0) === '#') {\n            let menubtn = $('#context-btn').menubtn().data('menubtn');\n            if (menubtn) {\n                for (let i = 0; i < menubtn.menu.$options.length; i++) {\n                    let a = menubtn.menu.$options[i];\n                    if (a.href) {\n                        a.href = a.href.match(/^[^#]*/)[0] + href;\n                    }\n                }\n            }\n        }\n    },\n\n    deselectTab: function() {\n        if (!this.$selectedTab) {\n            return;\n        }\n\n        this.$selectedTab.removeClass('sel');\n        if (this.$selectedTab.attr('href').charAt(0) === '#') {\n            $(this.$selectedTab.attr('href')).addClass('hidden');\n        }\n        this._selectTab(null, null);\n    },\n\n    handleWindowResize: function() {\n        this.updateTabs();\n        this.updateResponsiveTables();\n    },\n\n    updateTabs: function() {\n        if (!this.$tabsContainer) {\n            return;\n        }\n\n        var maxWidth = Math.floor(this.$tabsContainer.width()) - 40;\n        var totalWidth = 0;\n        var showOverflowMenu = false;\n        var tabMargin = Garnish.$bod.width() >= 768 ? -12 : -7;\n        var $tab;\n\n        // Start with the selected tab, because that needs to be visible\n        if (this.$selectedTab) {\n            this.$selectedTab.parent('li').appendTo(this.$tabsList);\n            totalWidth = Math.ceil(this.$selectedTab.parent('li').width());\n        }\n\n        for (var i = 0; i < this.$tabs.length; i++) {\n            $tab = this.$tabs.eq(i).appendTo(this.$tabsList);\n            if (i !== this.selectedTabIndex) {\n                totalWidth += Math.ceil($tab.width());\n                // account for the negative margin\n                if (i !== 0 || this.$selectedTab) {\n                    totalWidth += tabMargin;\n                }\n            }\n\n            if (i === this.selectedTabIndex || totalWidth <= maxWidth) {\n                $tab.find('> a').removeAttr('role').removeAttr('tabindex');\n            } else {\n                const $a = $tab.appendTo(this.$overflowTabList).find('> a');\n                this.$overflowTabBtn.data('menubtn').menu.addOptions($a);\n                showOverflowMenu = true;\n            }\n        }\n\n        if (showOverflowMenu) {\n            this.$overflowTabBtn.removeClass('hidden');\n        } else {\n            this.$overflowTabBtn.addClass('hidden');\n        }\n    },\n\n    updateResponsiveTables: function() {\n        for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n            this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n            this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n            this.updateResponsiveTables._check = false;\n\n            if (this.updateResponsiveTables._containerWidth > 0) {\n                // Is this the first time we've checked this table?\n                if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                    this.updateResponsiveTables._check = true;\n                } else {\n                    this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                    // Getting wider?\n                    if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                        if (this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._$table.removeClass('collapsed');\n                            this.updateResponsiveTables._check = true;\n                        }\n                    } else if (!this.updateResponsiveTables._isCollapsed) {\n                        this.updateResponsiveTables._check = true;\n                    }\n                }\n\n                // Are we checking the table width?\n                if (this.updateResponsiveTables._check) {\n                    if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                        this.updateResponsiveTables._$table.addClass('collapsed');\n                    }\n                }\n\n                // Remember the container width for next time\n                this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n            }\n        }\n    },\n\n    updateFixedHeader: function() {\n        // Have we scrolled passed the top of #main?\n        if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n            if (!this.fixedHeader) {\n                var headerHeight = this.$headerContainer.height();\n\n                // Hard-set the minimum content container height\n                this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                // Hard-set the header container height\n                this.$headerContainer.height(headerHeight);\n                Garnish.$bod.addClass('fixed-header');\n\n                // Fix the sidebar and details pane positions if they are taller than #content-container\n                var contentHeight = this.$contentContainer.outerHeight();\n                var $detailsHeight = this.$details.outerHeight();\n                var css = {\n                    top: headerHeight + 'px',\n                    'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                };\n                this.$sidebar.addClass('fixed').css(css);\n                this.$details.addClass('fixed').css(css);\n                this.fixedHeader = true;\n            }\n        } else if (this.fixedHeader) {\n            this.$headerContainer.height('auto');\n            Garnish.$bod.removeClass('fixed-header');\n            this.$contentContainer.css('min-height', '');\n            this.$sidebar.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.$details.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.fixedHeader = false;\n        }\n    },\n\n    /**\n     * Dispays a notification.\n     *\n     * @param {string} type\n     * @param {string} message\n     */\n    displayNotification: function(type, message) {\n        var notificationDuration = Craft.CP.notificationDuration;\n\n        if (type === 'error') {\n            notificationDuration *= 2;\n        }\n\n        var $notification = $('<div class=\"notification ' + type + '\">' + message + '</div>')\n            .appendTo(this.$notificationContainer);\n\n        var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n        $notification\n            .hide()\n            .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n            .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n            .delay(notificationDuration)\n            .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                complete: function() {\n                    $notification.remove();\n                }\n            });\n\n        this.trigger('displayNotification', {\n            notificationType: type,\n            message: message\n        });\n    },\n\n    /**\n     * Displays a notice.\n     *\n     * @param {string} message\n     */\n    displayNotice: function(message) {\n        this.displayNotification('notice', message);\n    },\n\n    /**\n     * Displays an error.\n     *\n     * @param {string} message\n     */\n    displayError: function(message) {\n        if (!message) {\n            message = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.displayNotification('error', message);\n    },\n\n    fetchAlerts: function() {\n        var data = {\n            path: Craft.path\n        };\n\n        Craft.queueActionRequest('app/get-cp-alerts', data, $.proxy(this, 'displayAlerts'));\n    },\n\n    displayAlerts: function(alerts) {\n        this.$alerts.remove();\n\n        if (Garnish.isArray(alerts) && alerts.length) {\n            this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n            for (var i = 0; i < alerts.length; i++) {\n                $('<li>' + alerts[i] + '</li>').appendTo(this.$alerts);\n            }\n\n            var height = this.$alerts.outerHeight();\n            this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n            this.initAlerts();\n        }\n    },\n\n    initAlerts: function() {\n        // Are there any shunnable alerts?\n        var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n        for (var i = 0; i < $shunnableAlerts.length; i++) {\n            this.addListener($shunnableAlerts[i], 'click', $.proxy(function(ev) {\n                ev.preventDefault();\n\n                var $link = $(ev.currentTarget);\n\n                var data = {\n                    message: $link.prop('className').substr(5)\n                };\n\n                Craft.queueActionRequest('app/shun-cp-alert', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            $link.parent().remove();\n                        } else {\n                            this.displayError(response.error);\n                        }\n                    }\n                }, this));\n            }, this));\n        }\n    },\n\n    checkForUpdates: function(forceRefresh, includeDetails, callback) {\n        // Make 'includeDetails' optional\n        if (typeof includeDetails === 'function') {\n            callback = includeDetails;\n            includeDetails = false;\n        }\n\n        // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n        // then just set a new callback that re-checks for updates when the current one is done.\n        if (this.checkingForUpdates && (\n            (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n            (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n        )) {\n            var realCallback = callback;\n\n            callback = function() {\n                this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n            }.bind(this);\n        }\n\n        // Callback function?\n        if (typeof callback === 'function') {\n            if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                this.checkForUpdatesCallbacks = [];\n            }\n\n            this.checkForUpdatesCallbacks.push(callback);\n        }\n\n        if (!this.checkingForUpdates) {\n            this.checkingForUpdates = true;\n            this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n            this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n            this._checkForUpdates(forceRefresh, includeDetails)\n                .then(function(info) {\n                    this.updateUtilitiesBadge();\n                    this.checkingForUpdates = false;\n\n                    if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                        var callbacks = this.checkForUpdatesCallbacks;\n                        this.checkForUpdatesCallbacks = null;\n\n                        for (var i = 0; i < callbacks.length; i++) {\n                            callbacks[i](info);\n                        }\n                    }\n\n                    this.trigger('checkForUpdates', {\n                        updateInfo: info\n                    });\n                }.bind(this));\n        }\n    },\n\n    _checkForUpdates: function(forceRefresh, includeDetails) {\n        return new Promise(function(resolve, reject) {\n            if (!forceRefresh) {\n                this._checkForCachedUpdates(includeDetails)\n                    .then(function(info) {\n                        if (info.cached !== false) {\n                            resolve(info);\n                        }\n\n                        this._getUpdates(includeDetails)\n                            .then(function(info) {\n                                resolve(info);\n                            });\n                    }.bind(this));\n            } else {\n                this._getUpdates(includeDetails)\n                    .then(function(info) {\n                        resolve(info);\n                    });\n            }\n        }.bind(this));\n    },\n\n    _checkForCachedUpdates: function(includeDetails) {\n        return new Promise(function(resolve, reject) {\n            var data = {\n                onlyIfCached: true,\n                includeDetails: includeDetails,\n            };\n            Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    resolve({cached: false});\n                }\n            });\n        });\n    },\n\n    _getUpdates: function(includeDetails) {\n        return new Promise(function(resolve, reject) {\n            Craft.sendApiRequest('GET', 'updates')\n                .then(function(updates) {\n                    this._cacheUpdates(updates, includeDetails).then(resolve);\n                }.bind(this))\n                .catch(function(e) {\n                    this._cacheUpdates({}).then(resolve);\n                }.bind(this));\n        }.bind(this));\n    },\n\n    _cacheUpdates: function(updates, includeDetails) {\n        return new Promise(function(resolve, reject) {\n            Craft.postActionRequest('app/cache-updates', {\n                updates: updates,\n                includeDetails: includeDetails,\n            }, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    reject();\n                }\n            }, {\n                contentType: 'json'\n            });\n        });\n    },\n\n    updateUtilitiesBadge: function() {\n        var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n        // Ignore if there is no (non-selected) Utilities nav item\n        if (!$utilitiesLink.length) {\n            return;\n        }\n\n        Craft.queueActionRequest('app/get-utilities-badge-count', $.proxy(function(response) {\n            // Get the existing utility nav badge, if any\n            var $badge = $utilitiesLink.children('.badge');\n\n            if (response.badgeCount) {\n                if (!$badge.length) {\n                    $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                }\n                $badge.text(response.badgeCount);\n            } else if ($badge.length) {\n                $badge.remove();\n            }\n        }, this));\n    },\n\n    runQueue: function() {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        if (Craft.runQueueAutomatically) {\n            Craft.queueActionRequest('queue/run', $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.trackJobProgress(false, true);\n                }\n            }, this));\n        } else {\n            this.trackJobProgress(false, true);\n        }\n    },\n\n    trackJobProgress: function(delay, force) {\n        if (force && this.trackJobProgressTimeout) {\n            clearTimeout(this.trackJobProgressTimeout);\n            this.trackJobProgressTimeout = null;\n        }\n\n        // Ignore if we're already tracking jobs, or the queue is disabled\n        if (this.trackJobProgressTimeout || !this.enableQueue) {\n            return;\n        }\n\n        if (delay === true) {\n            // Determine the delay based on how long the displayed job info has remained unchanged\n            var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n            this.trackJobProgressTimeout = setTimeout($.proxy(this, '_trackJobProgressInternal'), timeout);\n        } else {\n            this._trackJobProgressInternal();\n        }\n    },\n\n    _trackJobProgressInternal: function() {\n        Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                this.trackJobProgressTimeout = null;\n                this.totalJobs = response.total;\n                this.setJobInfo(response.jobs);\n\n                if (this.jobInfo.length) {\n                    // Check again after a delay\n                    this.trackJobProgress(true);\n                }\n            }\n        }, this));\n    },\n\n    setJobInfo: function(jobInfo) {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        this.jobInfo = jobInfo;\n\n        // Update the displayed job info\n        var oldInfo = this.displayedJobInfo;\n        this.displayedJobInfo = this.getDisplayedJobInfo();\n\n        // Same old same old?\n        if (\n            oldInfo &&\n            this.displayedJobInfo &&\n            oldInfo.id === this.displayedJobInfo.id &&\n            oldInfo.progress === this.displayedJobInfo.progress &&\n            oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n            oldInfo.status === this.displayedJobInfo.status\n        ) {\n            this.displayedJobInfoUnchanged++;\n        } else {\n            // Reset the counter\n            this.displayedJobInfoUnchanged = 1;\n        }\n\n        this.updateJobIcon();\n\n        // Fire a setJobInfo event\n        this.trigger('setJobInfo');\n    },\n\n    /**\n     * Returns info for the job that should be displayed in the CP sidebar\n     */\n    getDisplayedJobInfo: function() {\n        if (!this.enableQueue) {\n            return null;\n        }\n\n        // Set the status preference order\n        var statuses = [\n            Craft.CP.JOB_STATUS_RESERVED,\n            Craft.CP.JOB_STATUS_FAILED,\n            Craft.CP.JOB_STATUS_WAITING\n        ];\n\n        for (var i = 0; i < statuses.length; i++) {\n            for (var j = 0; j < this.jobInfo.length; j++) {\n                if (this.jobInfo[j].status === statuses[i]) {\n                    return this.jobInfo[j];\n                }\n            }\n        }\n    },\n\n    updateJobIcon: function() {\n        if (!this.enableQueue || !this.$nav.length) {\n            return;\n        }\n\n        if (this.displayedJobInfo) {\n            if (!this.jobProgressIcon) {\n                this.jobProgressIcon = new JobProgressIcon();\n            }\n\n            if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n            } else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n            }\n        } else {\n            if (this.jobProgressIcon) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.complete();\n                delete this.jobProgressIcon;\n            }\n        }\n    },\n\n    /**\n     * Returns the active site for the control panel\n     *\n     * @return {number}\n     */\n    getSiteId: function() {\n        // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n        let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n        if (typeof siteId !== 'undefined') {\n            Craft.removeLocalStorage('BaseElementIndex.siteId');\n            this.setSiteId(siteId);\n            return siteId;\n        }\n        return Craft.getCookie('siteId');\n    },\n\n    /**\n     * Sets the active site for the control panel\n     * @param {number} siteId\n     */\n    setSiteId: function(siteId) {\n        Craft.setCookie('siteId', siteId, {\n            maxAge: 31536000 // 1 year\n        });\n    }\n}, {\n    //maxWidth: 1051, //1024,\n    notificationDuration: 2000,\n\n    JOB_STATUS_WAITING: 1,\n    JOB_STATUS_RESERVED: 2,\n    JOB_STATUS_DONE: 3,\n    JOB_STATUS_FAILED: 4\n});\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend({\n    $li: null,\n    $a: null,\n    $label: null,\n    $progressLabel: null,\n\n    progress: null,\n    failMode: false,\n\n    _$bgCanvas: null,\n    _$staticCanvas: null,\n    _$hoverCanvas: null,\n    _$failCanvas: null,\n\n    _staticCtx: null,\n    _hoverCtx: null,\n    _canvasSize: null,\n    _arcPos: null,\n    _arcRadius: null,\n    _lineWidth: null,\n\n    _arcStartPos: 0,\n    _arcEndPos: 0,\n    _arcStartStepSize: null,\n    _arcEndStepSize: null,\n    _arcStep: null,\n    _arcStepTimeout: null,\n    _arcAnimateCallback: null,\n\n    _progressBar: null,\n\n    init: function() {\n        this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n        this.$a = $('<a/>', {\n            id: 'job-icon',\n            href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n        }).appendTo(this.$li);\n        this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n        var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n        this.$label = $('<span/>').appendTo($labelContainer);\n        this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n        let m = (window.devicePixelRatio > 1 ? 2 : 1);\n        this._canvasSize = 18 * m;\n        this._arcPos = this._canvasSize / 2;\n        this._arcRadius = 7 * m;\n        this._lineWidth = 3 * m;\n\n        this._$bgCanvas = this._createCanvas('bg', '#61666b');\n        this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n        this._$hoverCanvas = this._createCanvas('hover', '#fff');\n        this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n        this._staticCtx = this._$staticCanvas[0].getContext('2d');\n        this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n        this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n        this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n    },\n\n    setDescription: function(description, progressLabel) {\n        this.$a.attr('title', description);\n        this.$label.text(description);\n        if (progressLabel) {\n            this.$progressLabel.text(progressLabel).show();\n        } else {\n            this.$progressLabel.hide();\n        }\n    },\n\n    setProgress: function(progress) {\n        if (progress == 0) {\n            this._$staticCanvas.hide();\n            this._$hoverCanvas.hide();\n        } else {\n            this._$staticCanvas.show();\n            this._$hoverCanvas.show();\n            if (this.progress && progress > this.progress) {\n                this._animateArc(0, progress / 100);\n            } else {\n                this._setArc(0, progress / 100);\n            }\n        }\n\n        this.progress = progress;\n    },\n\n    complete: function() {\n        this._animateArc(0, 1, $.proxy(function() {\n            this._$bgCanvas.velocity('fadeOut');\n\n            this._animateArc(1, 1, $.proxy(function() {\n                this.$a.remove();\n                this.destroy();\n            }, this));\n        }, this));\n    },\n\n    showFailMode: function(message) {\n        if (this.failMode) {\n            return;\n        }\n\n        this.failMode = true;\n        this.progress = null;\n\n        this._$bgCanvas.hide();\n        this._$staticCanvas.hide();\n        this._$hoverCanvas.hide();\n        this._$failCanvas.show();\n\n        this.setDescription(message);\n    },\n\n    hideFailMode: function() {\n        if (!this.failMode) {\n            return;\n        }\n\n        this.failMode = false;\n\n        this._$bgCanvas.show();\n        this._$staticCanvas.show();\n        this._$hoverCanvas.show();\n        this._$failCanvas.hide();\n    },\n\n    _createCanvas: function(id, color) {\n        var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n            ctx = $canvas[0].getContext('2d');\n\n        ctx.strokeStyle = color;\n        ctx.lineWidth = this._lineWidth;\n        ctx.lineCap = 'round';\n        return $canvas;\n    },\n\n    _setArc: function(startPos, endPos) {\n        this._arcStartPos = startPos;\n        this._arcEndPos = endPos;\n\n        this._drawArc(this._staticCtx, startPos, endPos);\n        this._drawArc(this._hoverCtx, startPos, endPos);\n    },\n\n    _drawArc: function(ctx, startPos, endPos) {\n        ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n        ctx.beginPath();\n        ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n    },\n\n    _animateArc: function(targetStartPos, targetEndPos, callback) {\n        if (this._arcStepTimeout) {\n            clearTimeout(this._arcStepTimeout);\n        }\n\n        this._arcStep = 0;\n        this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n        this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n        this._arcAnimateCallback = callback;\n        this._takeNextArcStep();\n    },\n\n    _takeNextArcStep: function() {\n        this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n        this._arcStep++;\n\n        if (this._arcStep < 10) {\n            this._arcStepTimeout = setTimeout($.proxy(this, '_takeNextArcStep'), 50);\n        } else if (this._arcAnimateCallback) {\n            this._arcAnimateCallback();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend({\n    editableGroups: null,\n    $newCategoryBtnGroup: null,\n    $newCategoryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', $.proxy(this, 'updateButton'));\n        this.on('selectSite', $.proxy(this, 'updateButton'));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible groups the user has permission to create new categories in\n        this.editableGroups = [];\n\n        for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n            var group = Craft.editableCategoryGroups[i];\n\n            if (this.getSourceByKey('group:' + group.uid)) {\n                this.editableGroups.push(group);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific category group in the URL?\n        if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n\n                if ($source.data('handle') === defaultGroupHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        // Get the handle of the selected source\n        var selectedSourceHandle = this.$source.data('handle');\n\n        var i, href, label;\n\n        // Update the New Category button\n        // ---------------------------------------------------------------------\n\n        if (this.editableGroups.length) {\n            // Remove the old button, if there is one\n            if (this.$newCategoryBtnGroup) {\n                this.$newCategoryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a group that they have permission to create categories in\n            var selectedGroup;\n\n            if (selectedSourceHandle) {\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    if (this.editableGroups[i].handle === selectedSourceHandle) {\n                        selectedGroup = this.editableGroups[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n            // Otherwise only show a menu button\n            if (selectedGroup) {\n                href = this._getGroupTriggerHref(selectedGroup);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                        this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.editableGroups.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newCategoryBtnGroup);\n                }\n            } else {\n                this.$newCategoryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New category'),\n                }).appendTo(this.$newCategoryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    var group = this.editableGroups[i];\n\n                    if (this.settings.context === 'index' || group !== selectedGroup) {\n                        href = this._getGroupTriggerHref(group);\n                        label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', $.proxy(function(ev) {\n                        this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                    }, this));\n                }\n            }\n\n            this.addButton(this.$newCategoryBtnGroup);\n        }\n\n        // Update the URL if we're on the Categories index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'categories';\n\n            if (selectedSourceHandle) {\n                uri += '/' + selectedSourceHandle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getGroupTriggerHref: function(group) {\n        if (this.settings.context === 'index') {\n            var uri = 'categories/' + group.handle + '/new';\n            if (this.siteId && this.siteId != Craft.primarySiteId) {\n                for (var i = 0; i < Craft.sites.length; i++) {\n                    if (Craft.sites[i].id == this.siteId) {\n                        uri += '/' + Craft.sites[i].handle;\n                    }\n                }\n            }\n            return 'href=\"' + Craft.getUrl(uri) + '\"';\n        } else {\n            return 'data-id=\"' + group.id + '\"';\n        }\n    },\n\n    _openCreateCategoryModal: function(groupId) {\n        if (this.$newCategoryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the group\n        var group;\n\n        for (var i = 0; i < this.editableGroups.length; i++) {\n            if (this.editableGroups[i].id == groupId) {\n                group = this.editableGroups[i];\n                break;\n            }\n        }\n\n        if (!group) {\n            return;\n        }\n\n        this.$newCategoryBtn.addClass('inactive');\n        var newCategoryBtnText = this.$newCategoryBtn.text();\n        this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newCategoryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                groupId: groupId\n            },\n            onBeginLoading: $.proxy(function() {\n                this.$newCategoryBtn.addClass('loading');\n            }, this),\n            onEndLoading: $.proxy(function() {\n                this.$newCategoryBtn.removeClass('loading');\n            }, this),\n            onHideHud: $.proxy(function() {\n                this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n            }, this),\n            onSaveElement: $.proxy(function(response) {\n                // Make sure the right group is selected\n                var groupSourceKey = 'group:' + group.uid;\n\n                if (this.sourceKey !== groupSourceKey) {\n                    this.selectSourceByKey(groupSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            }, this)\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend({\n    setSettings: function() {\n        this.base.apply(this, arguments);\n        this.settings.sortable = false;\n    },\n\n    getModalSettings: function() {\n        var settings = this.base();\n        settings.hideOnSelect = false;\n        return settings;\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.find('.element');\n    },\n\n    onModalSelect: function(elements) {\n        // Disable the modal\n        this.modal.disable();\n        this.modal.disableCancelBtn();\n        this.modal.disableSelectBtn();\n        this.modal.showFooterSpinner();\n\n        // Get the new category HTML\n        var selectedCategoryIds = this.getSelectedElementIds();\n\n        for (var i = 0; i < elements.length; i++) {\n            selectedCategoryIds.push(elements[i].id);\n        }\n\n        var data = {\n            categoryIds: selectedCategoryIds,\n            siteId: elements[0].siteId,\n            id: this.settings.id,\n            name: this.settings.name,\n            branchLimit: this.settings.branchLimit,\n            selectionLabel: this.settings.selectionLabel\n        };\n\n        Craft.postActionRequest('elements/get-categories-input-html', data, $.proxy(function(response, textStatus) {\n            this.modal.enable();\n            this.modal.enableCancelBtn();\n            this.modal.enableSelectBtn();\n            this.modal.hideFooterSpinner();\n\n            if (textStatus === 'success') {\n                var $newInput = $(response.html),\n                    $newElementsContainer = $newInput.children('.elements');\n\n                this.$elementsContainer.replaceWith($newElementsContainer);\n                this.$elementsContainer = $newElementsContainer;\n                this.resetElements();\n\n                var filteredElements = [];\n\n                for (var i = 0; i < elements.length; i++) {\n                    var element = elements[i],\n                        $element = this.getElementById(element.id);\n\n                    if ($element) {\n                        this.animateElementIntoPlace(element.$element, $element);\n                        filteredElements.push(element);\n                    }\n                }\n\n                this.updateDisabledElementsInModal();\n                this.modal.hide();\n                this.onSelectElements(filteredElements);\n            }\n        }, this));\n    },\n\n    removeElement: function($element) {\n        // Find any descendants this category might have\n        var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n        // Remove our record of them all at once\n        this.removeElements($allCategories);\n\n        // Animate them away one at a time\n        for (var i = 0; i < $allCategories.length; i++) {\n            this._animateCategoryAway($allCategories, i);\n        }\n    },\n\n    _animateCategoryAway: function($allCategories, i) {\n        var callback;\n\n        // Is this the last one?\n        if (i === $allCategories.length - 1) {\n            callback = $.proxy(function() {\n                var $li = $allCategories.first().parent().parent(),\n                    $ul = $li.parent();\n\n                if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                    $li.remove();\n                } else {\n                    $ul.remove();\n                }\n            }, this);\n        }\n\n        var func = $.proxy(function() {\n            this.animateElementAway($allCategories.eq(i), callback);\n        }, this);\n\n        if (i === 0) {\n            func();\n        } else {\n            setTimeout(func, 100 * i);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend({\n    columns: null,\n    rows: null,\n\n    init: function(data) {\n        let columns = data.columns;\n        let rows = data.rows;\n\n        rows.forEach($.proxy(function(d) {\n            $.each(d, function(cellIndex) {\n                var column = columns[cellIndex];\n\n                var parseTime;\n\n                switch (column.type) {\n                    case 'date':\n                        parseTime = d3.timeParse(\"%Y-%m-%d\");\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'datetime':\n                        parseTime = d3.timeParse(\"%Y-%m-%d %H:00:00\");\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'percent':\n                        d[cellIndex] = d[cellIndex] / 100;\n                        break;\n\n                    case 'number':\n                        d[cellIndex] = +d[cellIndex];\n                        break;\n\n                    default:\n                    // do nothing\n                }\n            });\n        }, this));\n\n        this.columns = columns;\n        this.rows = rows;\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend({\n    $container: null,\n    $tip: null,\n\n    init: function($container) {\n        this.$container = $container;\n\n        this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n        this.hide();\n    },\n\n    setContent: function(html) {\n        this.$tip.html(html);\n    },\n\n    setPosition: function(position) {\n        this.$tip.css(\"left\", position.left + \"px\");\n        this.$tip.css(\"top\", position.top + \"px\");\n    },\n\n    show: function() {\n        this.$tip.css(\"display\", 'block');\n    },\n\n    hide: function() {\n        this.$tip.css(\"display\", 'none');\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend({\n    $container: null,\n    $chart: null,\n\n    chartBaseClass: 'cp-chart',\n    dataTable: null,\n\n    formatLocale: null,\n    timeFormatLocale: null,\n    orientation: null,\n\n    svg: null,\n    width: null,\n    height: null,\n\n    init: function(container, settings) {\n        this.$container = container;\n\n        this.setSettings(Craft.charts.BaseChart.defaults);\n        this.setSettings(settings);\n\n        var globalSettings = {\n            formats: window.d3Formats,\n            formatLocaleDefinition: window.d3FormatLocaleDefinition,\n            timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n        };\n\n        this.setSettings(globalSettings);\n\n        d3.select(window).on('resize', $.proxy(function() {\n            this.resize();\n        }, this));\n    },\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n        this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n    },\n\n    draw: function(dataTable, settings) {\n        // Settings and chart attributes\n\n        this.setSettings(settings);\n\n        this.dataTable = dataTable;\n        this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n        this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n        this.orientation = this.settings.orientation;\n\n        // Set (or reset) the chart element\n\n        if (this.$chart) {\n            this.$chart.remove();\n        }\n\n        var className = this.chartBaseClass;\n\n        if (this.settings.chartClass) {\n            className += ' ' + this.settings.chartClass;\n        }\n\n        this.$chart = $('<div class=\"' + className + '\" />').appendTo(this.$container);\n    },\n\n    resize: function() {\n        this.draw(this.dataTable, this.settings);\n    },\n\n    onAfterDrawTicks: function() {\n        // White border for ticks' text\n        $('.tick', this.$chart).each(function(tickKey, tick) {\n            var $tickText = $('text', tick);\n\n            var $clone = $tickText.clone();\n            $clone.appendTo(tick);\n\n            $tickText.attr('stroke', '#ffffff');\n            $tickText.attr('stroke-width', 3);\n        });\n    }\n}, {\n    defaults: {\n        formatLocaleDefinition: null,\n        timeFormatLocaleDefinition: null,\n        formats: {\n            numberFormat: ',.2f',\n            percentFormat: ',.2%',\n            currencyFormat: '$,.2f',\n            shortDateFormats: {\n                day: \"%-m/%-d\",\n                month: \"%-m/%y\",\n                year: \"%Y\"\n            }\n        },\n        margin: {top: 0, right: 0, bottom: 0, left: 0},\n        chartClass: null,\n        colors: [\"#0594D1\", \"#DE3800\", \"#FF9A00\", \"#009802\", \"#9B009B\"]\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend({\n    tip: null,\n    drawingArea: null,\n\n    init: function(container, settings) {\n        this.base(container, Craft.charts.Area.defaults);\n\n        this.setSettings(settings);\n    },\n\n    draw: function(dataTable, settings) {\n        this.base(dataTable, settings);\n\n        if (this.tip) {\n            this.tip = null;\n        }\n\n        var margin = this.getChartMargin();\n\n        this.width = this.$chart.width() - margin.left - margin.right;\n        this.height = this.$chart.height() - margin.top - margin.bottom;\n\n        // Append SVG to chart element\n\n        var svg = {\n            width: this.width + (margin.left + margin.right),\n            height: this.height + (margin.top + margin.bottom),\n            translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n            translateY: margin.top\n        };\n\n        this.svg = d3.select(this.$chart.get(0)).append(\"svg\")\n            .attr(\"width\", svg.width)\n            .attr(\"height\", svg.height);\n\n        this.drawingArea = this.svg.append(\"g\")\n            .attr(\"transform\", \"translate(\" + svg.translateX + \",\" + svg.translateY + \")\");\n\n        // Draw elements\n\n        this.drawTicks();\n        this.drawAxes();\n        this.drawChart();\n        this.drawTipTriggers();\n    },\n\n    drawTicks: function() {\n        // Draw X ticks\n\n        var x = this.getX(true);\n        var xTicks = 3;\n        var xAxis = d3.axisBottom(x)\n            .tickFormat(this.getXFormatter())\n            .ticks(xTicks);\n\n        this.drawingArea.append(\"g\")\n            .attr(\"class\", \"x ticks-axis\")\n            .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n            .call(xAxis);\n\n        // Draw Y ticks\n\n        var y = this.getY();\n        var yTicks = 2;\n        var yAxis;\n\n        if (this.orientation !== 'rtl') {\n            yAxis = d3.axisLeft(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"y ticks-axis\")\n                .call(yAxis);\n        } else {\n            yAxis = d3.axisRight(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"y ticks-axis\")\n                .attr(\"transform\", \"translate(\" + this.width + \",0)\")\n                .call(yAxis);\n        }\n\n        // On after draw ticks\n\n        this.onAfterDrawTicks();\n    },\n\n    drawAxes: function() {\n        if (this.settings.xAxis.showAxis) {\n            var x = this.getX();\n            var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"x axis\")\n                .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n                .call(xAxis);\n        }\n\n        if (this.settings.yAxis.showAxis) {\n            var y = this.getY();\n            var chartPadding = 0;\n            var yAxis;\n\n            if (this.orientation === 'rtl') {\n                yAxis = d3.axisLeft(y).ticks(0);\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y axis\")\n                    .attr(\"transform\", \"translate(\" + (this.width - chartPadding) + \", 0)\")\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y).ticks(0);\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y axis\")\n                    .attr(\"transform\", \"translate(\" + chartPadding + \", 0)\")\n                    .call(yAxis);\n            }\n        }\n    },\n\n    drawChart: function() {\n        var x = this.getX(true);\n        var y = this.getY();\n\n        // X & Y grid lines\n\n        if (this.settings.xAxis.gridlines) {\n            var xLineAxis = d3.axisBottom(x);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"x grid-line\")\n                .attr(\"transform\", \"translate(0,\" + this.height + \")\")\n                .call(xLineAxis\n                    .tickSize(-this.height, 0, 0)\n                    .tickFormat(\"\")\n                );\n        }\n\n        var yTicks = 2;\n\n        if (this.settings.yAxis.gridlines) {\n            var yLineAxis = d3.axisLeft(y);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"y grid-line\")\n                .attr(\"transform\", \"translate(0 , 0)\")\n                .call(yLineAxis\n                    .tickSize(-(this.width), 0)\n                    .tickFormat(\"\")\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks)\n                );\n        }\n\n        // Line\n\n        var line = d3.line()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append(\"g\")\n            .attr(\"class\", \"chart-line\")\n            .append(\"path\")\n            .datum(this.dataTable.rows)\n            .style('fill', 'none')\n            .style('stroke', this.settings.colors[0])\n            .style('stroke-width', '3px')\n            .attr(\"d\", line);\n\n        // Area\n\n        var area = d3.area()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y0(this.height)\n            .y1(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append(\"g\")\n            .attr(\"class\", \"chart-area\")\n            .append(\"path\")\n            .datum(this.dataTable.rows)\n            .style('fill', this.settings.colors[0])\n            .style('fill-opacity', '0.3')\n            .attr(\"d\", area);\n\n        // Plots\n\n        if (this.settings.plots) {\n            this.drawingArea.append('g')\n                .attr(\"class\", \"plots\")\n                .selectAll(\"circle\")\n                .data(this.dataTable.rows)\n                .enter()\n                .append(\"circle\")\n                .style('fill', this.settings.colors[0])\n                .attr(\"class\", $.proxy(function(d, index) {\n                    return 'plot plot-' + index;\n                }, this))\n                .attr(\"r\", 4)\n                .attr(\"cx\", $.proxy(function(d) {\n                    return x(d[0]);\n                }, this))\n                .attr(\"cy\", $.proxy(function(d) {\n                    return y(d[1]);\n                }, this));\n        }\n    },\n\n    drawTipTriggers: function() {\n        if (this.settings.tips) {\n            if (!this.tip) {\n                this.tip = new Craft.charts.Tip(this.$chart);\n            }\n\n            // Define xAxisTickInterval\n\n            var chartMargin = this.getChartMargin();\n            var tickSizeOuter = 6;\n            var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n            var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n            // Tip trigger width\n\n            var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n            // Draw triggers\n\n            var x = this.getX(true);\n            var y = this.getY();\n\n            this.drawingArea.append('g')\n                .attr(\"class\", \"tip-triggers\")\n                .selectAll(\"rect\")\n                .data(this.dataTable.rows)\n                .enter().append(\"rect\")\n                .attr(\"class\", \"tip-trigger\")\n                .style('fill', 'transparent')\n                .style('fill-opacity', '1')\n                .attr(\"width\", tipTriggerWidth)\n                .attr(\"height\", this.height)\n                .attr(\"x\", $.proxy(function(d) {\n                    return x(d[0]) - tipTriggerWidth / 2;\n                }, this))\n                .on(\"mouseover\", $.proxy(function(d, index) {\n                    // Expand plot\n\n                    this.drawingArea.select('.plot-' + index).attr(\"r\", 5);\n\n                    // Set tip content\n\n                    var $content = $('<div />');\n                    var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                    var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                    $xValue.html(this.getXFormatter()(d[0]));\n                    $yValue.html(this.getYFormatter()(d[1]));\n\n                    var content = $content.get(0);\n\n                    this.tip.setContent(content);\n\n                    // Set tip position\n\n                    var margin = this.getChartMargin();\n\n                    var offset = 24;\n                    var top = (y(d[1]) + offset);\n                    var left;\n\n                    if (this.orientation !== 'rtl') {\n                        left = (x(d[0]) + margin.left + offset);\n\n                        var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                        var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                        if (calcLeft > maxLeft) {\n                            left = x(d[0]) - (this.tip.$tip.width() + offset);\n                        }\n                    } else {\n                        left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                    }\n\n                    if (left < 0) {\n                        left = (x(d[0]) + margin.left + offset);\n                    }\n\n                    var position = {\n                        top: top,\n                        left: left\n                    };\n\n                    this.tip.setPosition(position);\n\n                    // Show tip\n\n                    this.tip.show();\n                }, this))\n                .on(\"mouseout\", $.proxy(function(d, index) {\n                    // Unexpand Plot\n                    this.drawingArea.select('.plot-' + index).attr(\"r\", 4);\n\n                    // Hide tip\n                    this.tip.hide();\n                }, this));\n        }\n    },\n\n    getChartMargin: function() {\n        var margin = this.settings.margin;\n\n        // Estimate the max width of y ticks and set it as the left margin\n\n        var values = this.getYTickValues();\n        var yTicksMaxWidth = 0;\n\n        $.each(values, $.proxy(function(key, value) {\n            var characterWidth = 8;\n\n            var formatter = this.getYFormatter();\n\n            var formattedValue = formatter(value);\n            var computedTickWidth = formattedValue.length * characterWidth;\n\n            if (computedTickWidth > yTicksMaxWidth) {\n                yTicksMaxWidth = computedTickWidth;\n            }\n        }, this));\n\n        yTicksMaxWidth += 10;\n\n        margin.left = yTicksMaxWidth;\n\n        return margin;\n    },\n\n    getX: function(padded) {\n        var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomain = [xDomainMin, xDomainMax];\n\n        if (this.orientation === 'rtl') {\n            xDomain = [xDomainMax, xDomainMin];\n        }\n\n        var left = 0;\n        var right = 0;\n\n        if (padded) {\n            left = 0;\n            right = 0;\n        }\n\n        var x = d3.scaleTime().range([left, (this.width - right)]);\n\n        x.domain(xDomain);\n\n        return x;\n    },\n\n    getY: function() {\n        var yDomain = [0, this.getYMaxValue()];\n\n        var y = d3.scaleLinear().range([this.height, 0]);\n\n        y.domain(yDomain);\n\n        return y;\n    },\n\n    getXFormatter: function() {\n        var formatter;\n\n        if (this.settings.xAxis.formatter !== $.noop) {\n            formatter = this.settings.xAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYFormatter: function() {\n        var formatter;\n\n        if (this.settings.yAxis.formatter !== $.noop) {\n            formatter = this.settings.yAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYMaxValue: function() {\n        return d3.max(this.dataTable.rows, function(d) {\n            return d[1];\n        });\n    },\n\n    getYTickValues: function() {\n        var maxValue = this.getYMaxValue();\n\n        if (maxValue > 1) {\n            return [(maxValue / 2), maxValue];\n        } else {\n            return [0, maxValue];\n        }\n    }\n}, {\n    defaults: {\n        chartClass: 'area',\n        margin: {top: 25, right: 5, bottom: 25, left: 0},\n        plots: true,\n        tips: true,\n        xAxis: {\n            gridlines: false,\n            showAxis: true,\n            formatter: $.noop\n        },\n        yAxis: {\n            gridlines: true,\n            showAxis: false,\n            formatter: $.noop\n        }\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = \"0\" + duration.hours;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = \"0\" + duration.minutes;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = \"0\" + duration.seconds;\n        }\n\n        return duration.hours + ':' + duration.minutes + ':' + duration.seconds;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day + \" %H:00:00\");\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.children('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorInput, 'click', function (ev) {\n            ev.stopPropagation();\n        });\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'input', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        var val = this.$input.val();\n\n        // If empty, set the preview to transparent\n        if (!val.length || val === '#') {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Make sure the value starts with a #\n        if (val[0] !== '#') {\n            val = '#' + val;\n            this.$input.val(val);\n        }\n\n        this.$colorPreview.css('background-color', val);\n\n        if (this.$colorInput) {\n            this.$colorInput.val(val);\n        }\n    }\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function() {\n        if (Craft.ColorInput._browserSupportsColorInputs === null) {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend({\n    elementIndex: null,\n    $elementIndexSourcesContainer: null,\n\n    $sidebar: null,\n    $sourcesContainer: null,\n    $sourceSettingsContainer: null,\n    $newHeadingBtn: null,\n    $footer: null,\n    $footerBtnContainer: null,\n    $saveBtn: null,\n    $cancelBtn: null,\n    $saveSpinner: null,\n    $loadingSpinner: null,\n\n    sourceSort: null,\n    sources: null,\n    selectedSource: null,\n    updateSourcesOnSave: false,\n\n    availableTableAttributes: null,\n\n    init: function(elementIndex, settings) {\n        this.base();\n\n        this.setSettings(settings, {\n            resizable: true\n        });\n\n        this.elementIndex = elementIndex;\n        this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n        var $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n        this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n        this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n        this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n        this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n        this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n        this.$newHeadingBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit add icon',\n            text: Craft.t('app', 'New heading'),\n        }).appendTo($('<div class=\"buttons left secondary-buttons\"/>').appendTo(this.$footer));\n\n        this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n        this.setContainer($container);\n        this.show();\n\n        var data = {\n            elementType: this.elementIndex.elementType\n        };\n\n        Craft.postActionRequest('element-index-settings/get-customize-sources-modal-data', data, $.proxy(function(response, textStatus) {\n            this.$loadingSpinner.remove();\n\n            if (textStatus === 'success') {\n                this.$saveBtn.removeClass('disabled');\n                this.buildModal(response);\n            }\n        }, this));\n\n        this.addListener(this.$newHeadingBtn, 'click', 'handleNewHeadingBtnClick');\n        this.addListener(this.$cancelBtn, 'click', 'hide');\n        this.addListener(this.$saveBtn, 'click', 'save');\n        this.addListener(this.$container, 'submit', 'save');\n    },\n\n    buildModal: function(response) {\n        // Store the available table attribute options\n        this.availableTableAttributes = response.availableTableAttributes;\n\n        // Create the source item sorter\n        this.sourceSort = new Garnish.DragSort({\n            handle: '.move',\n            axis: 'y',\n            onSortChange: $.proxy(function() {\n                this.updateSourcesOnSave = true;\n            }, this)\n        });\n\n        // Create the sources\n        this.sources = [];\n\n        for (var i = 0; i < response.sources.length; i++) {\n            var source = this.addSource(response.sources[i]);\n            this.sources.push(source);\n        }\n\n        if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n            this.sources[0].select();\n        }\n    },\n\n    addSource: function(sourceData) {\n        var $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n        var $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n        var $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n        $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n        var source;\n\n        // Is this a heading?\n        if (typeof sourceData.heading !== 'undefined') {\n            $item.addClass('heading');\n            $itemInput.attr('name', 'sourceOrder[][heading]');\n            source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.heading);\n        } else {\n            $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n            source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.label);\n\n            // Select this by default?\n            if ((this.elementIndex.sourceKey + '/').substr(0, sourceData.key.length + 1) === sourceData.key + '/') {\n                source.select();\n            }\n        }\n\n        this.sourceSort.addItems($item);\n\n        return source;\n    },\n\n    handleNewHeadingBtnClick: function() {\n        var source = this.addSource({\n            heading: ''\n        });\n\n        Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n\n        source.select();\n        this.updateSourcesOnSave = true;\n    },\n\n    save: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n            return;\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n        var data = this.$container.serialize() + '&elementType=' + this.elementIndex.elementType;\n\n        Craft.postActionRequest('element-index-settings/save-customize-sources-modal-settings', data, $.proxy(function(response, textStatus) {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success' && response.success) {\n                // Have any changes been made to the source list?\n                if (this.updateSourcesOnSave) {\n                    if (this.$elementIndexSourcesContainer.length) {\n                        var $lastSource = null,\n                            $pendingHeading;\n\n                        for (var i = 0; i < this.sourceSort.$items.length; i++) {\n                            var $item = this.sourceSort.$items.eq(i),\n                                source = $item.data('source'),\n                                $indexSource = source.getIndexSource();\n\n                            if (!$indexSource) {\n                                continue;\n                            }\n\n                            if (source.isHeading()) {\n                                $pendingHeading = $indexSource;\n                            } else {\n                                if ($pendingHeading) {\n                                    this.appendSource($pendingHeading, $lastSource);\n                                    $lastSource = $pendingHeading;\n                                    $pendingHeading = null;\n                                }\n\n                                this.appendSource($indexSource, $lastSource);\n                                $lastSource = $indexSource;\n                            }\n                        }\n\n                        // Remove any additional sources (most likely just old headings)\n                        if ($lastSource) {\n                            var $extraSources = $lastSource.nextAll();\n                            this.elementIndex.sourceSelect.removeItems($extraSources);\n                            $extraSources.remove();\n                        }\n                    }\n                }\n\n                // If a source is selected, have the element index select that one by default on the next request\n                if (this.selectedSource && this.selectedSource.sourceData.key) {\n                    this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                    this.elementIndex.updateElements();\n                }\n\n                Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n                this.hide();\n            } else {\n                var error = (textStatus === 'success' && response.error ? response.error : Craft.t('app', 'A server error occurred.'));\n                Craft.cp.displayError(error);\n            }\n        }, this));\n    },\n\n    appendSource: function($source, $lastSource) {\n        if (!$lastSource) {\n            $source.prependTo(this.$elementIndexSourcesContainer);\n        } else {\n            $source.insertAfter($lastSource);\n        }\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.sources.length; i++) {\n            this.sources[i].destroy();\n        }\n\n        delete this.sources;\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend({\n    modal: null,\n\n    $item: null,\n    $itemLabel: null,\n    $itemInput: null,\n    $settingsContainer: null,\n\n    sourceData: null,\n\n    init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n        this.modal = modal;\n        this.$item = $item;\n        this.$itemLabel = $itemLabel;\n        this.$itemInput = $itemInput;\n        this.sourceData = sourceData;\n\n        this.$item.data('source', this);\n\n        this.addListener(this.$item, 'click', 'select');\n    },\n\n    isHeading: function() {\n        return false;\n    },\n\n    isSelected: function() {\n        return (this.modal.selectedSource === this);\n    },\n\n    select: function() {\n        if (this.isSelected()) {\n            return;\n        }\n\n        if (this.modal.selectedSource) {\n            this.modal.selectedSource.deselect();\n        }\n\n        this.$item.addClass('sel');\n        this.modal.selectedSource = this;\n\n        if (!this.$settingsContainer) {\n            this.$settingsContainer = this.createSettings()\n                .appendTo(this.modal.$sourceSettingsContainer);\n        } else {\n            this.$settingsContainer.removeClass('hidden');\n        }\n\n        this.modal.$sourceSettingsContainer.scrollTop(0);\n    },\n\n    createSettings: function() {\n        return $('<div/>');\n    },\n\n    getIndexSource: function() {\n    },\n\n    deselect: function() {\n        this.$item.removeClass('sel');\n        this.modal.selectedSource = null;\n        this.$settingsContainer.addClass('hidden');\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.text(val);\n    },\n\n    destroy: function() {\n        this.$item.data('source', null);\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend({\n    createSettings: function() {\n        let $settings = $('<div/>').append(Craft.ui.createTextField({\n            label: Craft.t('app', 'Header Column Heading'),\n            id: 'defaultHeaderColHeading' + Math.floor(Math.random() * 100000),\n            name: `sources[${this.sourceData.key}][headerColHeading]`,\n            value: this.sourceData.headerColHeading,\n            placeholder: this.sourceData.defaultHeaderColHeading,\n        }));\n\n        if (this.sourceData.tableAttributes.length) {\n            $settings.append(this.createTableColumnsField());\n        }\n\n        return $settings;\n    },\n\n    createTableColumnsField: function() {\n        // Create the title column option\n        let [firstKey, firstLabel] = this.sourceData.tableAttributes[0];\n        let $titleColumnCheckbox = this.createTableColumnOption(firstKey, firstLabel, true, true);\n\n        // Create the rest of the options\n        let $columnCheckboxes = $('<div/>');\n        let selectedAttributes = [firstKey];\n\n        $('<input type=\"hidden\" name=\"sources[' + this.sourceData.key + '][tableAttributes][]\" value=\"\"/>').appendTo($columnCheckboxes);\n\n        // Add the selected columns, in the selected order\n        for (let i = 1; i < this.sourceData.tableAttributes.length; i++) {\n            let [key, label] = this.sourceData.tableAttributes[i];\n            $columnCheckboxes.append(this.createTableColumnOption(key, label, false, true));\n            selectedAttributes.push(key);\n        }\n\n        // Add the rest\n        let availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n        availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n        for (let i = 0; i < availableTableAttributes.length; i++) {\n            let [key, label] = availableTableAttributes[i];\n            if (!Craft.inArray(key, selectedAttributes)) {\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false, false));\n            }\n        }\n\n        new Garnish.DragSort($columnCheckboxes.children(), {\n            handle: '.move',\n            axis: 'y'\n        });\n\n        return Craft.ui.createField($([$titleColumnCheckbox[0], $columnCheckboxes[0]]), {\n            label: Craft.t('app', 'Table Columns'),\n            instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n        });\n    },\n\n    createTableColumnOption: function(key, label, first, checked) {\n        var $option = $('<div class=\"customize-sources-table-column\"/>')\n            .append('<div class=\"icon move\"/>')\n            .append(\n                Craft.ui.createCheckbox({\n                    label: Craft.escapeHtml(label),\n                    name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                    value: key,\n                    checked: checked,\n                    disabled: first\n                })\n            );\n\n        if (first) {\n            $option.children('.move').addClass('disabled');\n        }\n\n        return $option;\n    },\n\n    getIndexSource: function() {\n        var $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n        if ($source) {\n            return $source.closest('li');\n        }\n    }\n});\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend({\n    $labelField: null,\n    $labelInput: null,\n    $deleteBtn: null,\n\n    isHeading: function() {\n        return true;\n    },\n\n    select: function() {\n        this.base();\n        this.$labelInput.trigger('focus');\n    },\n\n    createSettings: function() {\n        let $settings = $('<div/>');\n\n        this.$labelField = Craft.ui.createTextField({\n            label: Craft.t('app', 'Heading'),\n            instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n            value: this.sourceData.heading\n        }).appendTo($settings);\n\n        this.$labelInput = this.$labelField.find('.text');\n\n        $settings.append('<hr/>');\n\n        this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n            .appendTo($settings);\n\n        this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n        this.addListener(this.$deleteBtn, 'click', 'deleteHeading');\n\n        return $settings;\n    },\n\n    handleLabelInputChange: function() {\n        this.updateItemLabel(this.$labelInput.val());\n        this.modal.updateSourcesOnSave = true;\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n        this.$itemInput.val(val);\n    },\n\n    deleteHeading: function() {\n        this.modal.sourceSort.removeItems(this.$item);\n        this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n        this.modal.updateSourcesOnSave = true;\n\n        if (this.isSelected()) {\n            this.deselect();\n\n            if (this.modal.sources.length) {\n                this.modal.sources[0].select();\n            }\n        }\n\n        this.$item.remove();\n        this.$settingsContainer.remove();\n        this.destroy();\n    },\n\n    getIndexSource: function() {\n        var label = (this.$labelInput ? this.$labelInput.val() : this.sourceData.heading);\n        return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend({\n    $table: null,\n\n    init: function(table, settings) {\n        this.$table = $(table);\n        var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n        settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n        settings.container = this.$table.children('tbody');\n        settings.helper = $.proxy(this, 'getHelper');\n        settings.caboose = '<tr/>';\n        settings.axis = Garnish.Y_AXIS;\n        settings.magnetStrength = 4;\n        settings.helperLagBase = 1.5;\n\n        this.base($rows, settings);\n    },\n\n    getHelper: function($helperRow) {\n        var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n            $table = $('<table/>').appendTo($helper),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the table width and classes\n        $table.width(this.$table.width());\n        $table.prop('className', this.$table.prop('className'));\n\n        // Copy the column widths\n        var $firstRow = this.$table.find('tr:first'),\n            $cells = $firstRow.children(),\n            $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            $($helperCells[i]).width($($cells[i]).width());\n        }\n\n        return $helper;\n    }\n}, {\n    defaults: {\n        handle: '.move',\n        helperClass: 'datatablesorthelper'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend({\n    id: null,\n    userId: null,\n\n    $deleteActionRadios: null,\n    $deleteSpinner: null,\n\n    userSelect: null,\n    _deleting: false,\n\n    init: function(userId, settings) {\n        this.id = Math.floor(Math.random() * 1000000000);\n        this.userId = userId;\n        settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n        let $form = $(\n            '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n            Craft.getCsrfInput() +\n            '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n            (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n            (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n            '</form>'\n        ).appendTo(Garnish.$bod);\n        let $body = $(\n            '<div class=\"body\">' +\n            '<div class=\"content-summary\">' +\n            '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n            '<ul class=\"bullets\"></ul>' +\n            '</div>' +\n            '<div class=\"options\">' +\n            '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n            '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n            '<div class=\"elements\"></div>' +\n            '<button type=\"button\" class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</button>' +\n            '</div>' +\n            '</div>' +\n            '<div>' +\n            '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete their content') + '</label>' +\n            '</div>' +\n            '</div>'\n        ).appendTo($form);\n        let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo($buttons);\n\n        if (settings.contentSummary.length) {\n            for (let i = 0; i < settings.contentSummary.length; i++) {\n                $body.find('ul').append($('<li/>', {text: settings.contentSummary[i]}));\n            }\n        } else {\n            $body.find('ul').remove();\n        }\n\n        this.$deleteActionRadios = $body.find('input[type=radio]');\n        this.$deleteSubmitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: this._submitBtnLabel(false),\n        }).appendTo($buttons);\n        this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n        var idParam;\n\n        if (Garnish.isArray(this.userId)) {\n            idParam = ['and'];\n\n            for (let i = 0; i < this.userId.length; i++) {\n                idParam.push('not ' + this.userId[i]);\n            }\n        } else {\n            idParam = 'not ' + this.userId;\n        }\n\n        this.userSelect = new Craft.BaseElementSelectInput({\n            id: 'transferselect' + this.id,\n            name: 'transferContentTo',\n            elementType: 'craft\\\\elements\\\\User',\n            criteria: {\n                id: idParam\n            },\n            limit: 1,\n            modalSettings: {\n                closeOtherModals: false\n            },\n            onSelectElements: $.proxy(function() {\n                this.updateSizeAndPosition();\n\n                if (!this.$deleteActionRadios.first().prop('checked')) {\n                    this.$deleteActionRadios.first().trigger('click');\n                } else {\n                    this.validateDeleteInputs();\n                }\n            }, this),\n            onRemoveElements: $.proxy(this, 'validateDeleteInputs'),\n            selectable: false,\n            editable: false\n        });\n\n        this.addListener($cancelBtn, 'click', 'hide');\n\n        this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n        this.addListener($form, 'submit', 'handleSubmit');\n\n        this.base($form, settings);\n    },\n\n    _submitBtnLabel: function(withContent) {\n        let message = withContent\n            ? 'Delete {num, plural, =1{user} other{users}} and content'\n            : 'Delete {num, plural, =1{user} other{users}}';\n\n        return Craft.t('app', message, {\n            num: Garnish.isArray(this.userId) ? this.userId.length : 1,\n        });\n    },\n\n    validateDeleteInputs: function() {\n        var validates = false;\n\n        if (this.$deleteActionRadios.eq(1).prop('checked')) {\n            validates = true;\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(true));\n        } else {\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(false));\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n        }\n\n        this.updateSizeAndPosition();\n\n        if (validates) {\n            this.$deleteSubmitBtn.removeClass('disabled');\n        } else {\n            this.$deleteSubmitBtn.addClass('disabled');\n        }\n\n        return validates;\n    },\n\n    handleSubmit: function(ev) {\n        if (this._deleting || !this.validateDeleteInputs()) {\n            ev.preventDefault();\n            return;\n        }\n\n        this.$deleteSubmitBtn.addClass('active');\n        this.$deleteSpinner.removeClass('hidden');\n        this.disable();\n        this.userSelect.disable();\n        this._deleting = true;\n\n        // Let the onSubmit callback prevent the form from getting submitted\n        try {\n            if (this.settings.onSubmit() === false) {\n                ev.preventDefault();\n            }\n        } catch (e) {\n            ev.preventDefault();\n            this.$deleteSpinner.addClass('hidden');\n            throw e;\n        }\n    },\n\n    onFadeIn: function() {\n        // Auto-focus the first radio\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$deleteActionRadios.first().trigger('focus');\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        contentSummary: [],\n        onSubmit: $.noop,\n        redirect: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Monitor\n */\nCraft.DraftEditor = Garnish.Base.extend({\n    $revisionBtn: null,\n    $revisionLabel: null,\n    $spinner: null,\n    $expandSiteStatusesBtn: null,\n    $statusIcon: null,\n\n    $editMetaBtn: null,\n    metaHud: null,\n    $nameTextInput: null,\n    $saveMetaBtn: null,\n\n    $siteStatusPane: null,\n    $globalLightswitch: null,\n    $siteLightswitches: null,\n    $addlSiteField: null,\n\n    siteIds: null,\n    newSiteIds: null,\n\n    enableAutosave: null,\n    lastSerializedValue: null,\n    listeningForChanges: false,\n    pauseLevel: 0,\n    timeout: null,\n    saving: false,\n    saveXhr: null,\n    queue: null,\n    submittingForm: false,\n\n    duplicatedElements: null,\n    errors: null,\n\n    openingPreview: false,\n    preview: null,\n    previewToken: null,\n    createdDraftInPreview: false,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.DraftEditor.defaults);\n\n        this.queue = [];\n        this.duplicatedElements = {};\n        this.enableAutosave = Craft.autosaveDrafts;\n\n        this.siteIds = Object.keys(this.settings.siteStatuses).map(siteId => {\n            return parseInt(siteId)\n        });\n\n        this.$revisionBtn = $('#context-btn');\n        this.$revisionLabel = $('#revision-label');\n        this.$spinner = $('#revision-spinner');\n        this.$expandSiteStatusesBtn = $('#expand-status-btn');\n        this.$statusIcon = $('#revision-status');\n\n        if (this.settings.canEditMultipleSites) {\n            this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n        }\n\n        if (this.settings.previewTargets.length) {\n            if (this.settings.enablePreview) {\n                this.addListener($('#preview-btn'), 'click', 'openPreview');\n            }\n\n            const $shareBtn = $('#share-btn');\n\n            if (this.settings.previewTargets.length === 1) {\n                this.addListener($shareBtn, 'click', function() {\n                    this.openShareLink(this.settings.previewTargets[0].url);\n                });\n            } else {\n                this.createShareMenu($shareBtn);\n            }\n        }\n\n        // If this is a revision, we're done here\n        if (this.settings.revisionId) {\n            return;\n        }\n\n        // Override the serializer to use our own\n        Craft.cp.$primaryForm.data('serializer', function() {\n            return this.serializeForm(true)\n        }.bind(this));\n\n        this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n        if (this.settings.draftId) {\n            this.initForDraft();\n        } else {\n            // If the \"Create a draft\" button is a secondary button, then add special handling for it\n            this.addListener($('#save-draft-btn'), 'click', function(ev) {\n                ev.preventDefault();\n                this.createDraft();\n                this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n            }.bind(this));\n\n            // If they're not allowed to update the source element, override the save shortcut to create a draft too\n            if (!this.settings.canUpdateSource) {\n                this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', function(ev) {\n                    if (ev.saveShortcut) {\n                        ev.preventDefault();\n                        this.createDraft();\n                        this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                    }\n                }.bind(this));\n            }\n        }\n    },\n\n    listenForChanges: function() {\n        if (this.listeningForChanges || this.pauseLevel > 0 || !this.enableAutosave) {\n            return;\n        }\n\n        this.listeningForChanges = true;\n\n        this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n            if ($(ev.target).is(this.statusIcons())) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            // If they are typing, wait half a second before checking the form\n            if (['keypress', 'keyup', 'change'].includes(ev.type)) {\n                this.timeout = setTimeout(this.checkForm.bind(this), 500);\n            } else {\n                this.checkForm();\n            }\n        });\n    },\n\n    stopListeningForChanges: function() {\n        if (!this.listeningForChanges) {\n            return;\n        }\n\n        this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n        clearTimeout(this.timeout);\n        this.listeningForChanges = false;\n    },\n\n    pause: function() {\n        this.pauseLevel++;\n        this.stopListeningForChanges();\n    },\n\n    resume: function() {\n        if (this.pauseLevel === 0) {\n            throw 'Craft.DraftEditor::resume() should only be called after pause().';\n        }\n\n        // Only actually resume operation if this has been called the same\n        // number of times that pause() was called\n        this.pauseLevel--;\n        if (this.pauseLevel === 0) {\n            if (this.enableAutosave) {\n                this.checkForm();\n            }\n            this.listenForChanges();\n        }\n    },\n\n    initForDraft: function() {\n        // Create the edit draft button\n        this.createEditMetaBtn();\n\n        this.addListener(this.$statusIcon, 'click', function() {\n            this.showStatusHud(this.$statusIcon);\n        }.bind(this));\n\n        this.addListener($('#merge-changes-btn'), 'click', this.mergeChanges);\n\n        if (Craft.autosaveDrafts) {\n            this.listenForChanges();\n        }\n\n        if (this.settings.canUpdateSource) {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n                alt: true\n            }, () => {\n                Craft.submitForm(Craft.cp.$primaryForm, {\n                    action: this.settings.publishDraftAction,\n                    redirect: this.settings.hashedCpEditUrl,\n                });\n            }, 0);\n        }\n    },\n\n    mergeChanges: function() {\n        // Make sure there aren't any unsaved changes\n        this.checkForm();\n\n        // Make sure we aren't currently saving something\n        if (this.saving) {\n            this.queue.push(this.mergeChanges.bind(this));\n            return;\n        }\n\n        this.saving = true;\n        $('#merge-changes-spinner').removeClass('hidden');\n\n        Craft.postActionRequest('drafts/merge-source-changes', {\n            elementType: this.settings.elementType,\n            draftId: this.settings.draftId,\n            siteId: this.settings.siteId,\n        }, function(response, textStatus) {\n            if (textStatus === 'success') {\n                window.location.reload();\n            } else {\n                $('#merge-changes-spinner').addClass('hidden');\n            }\n        });\n    },\n\n    expandSiteStatuses: function() {\n        this.removeListener(this.$expandSiteStatusesBtn, 'click');\n        this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', function() {\n            this.$expandSiteStatusesBtn.remove();\n        }.bind(this));\n\n        const $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n        this.$siteStatusPane = $enabledForSiteField.parent();\n\n        // If this is a revision, just show the site statuses statically and be done\n        if (this.settings.revisionId) {\n            this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n            return;\n        }\n\n        $enabledForSiteField.addClass('nested');\n        const $globalField = Craft.ui.createLightswitchField({\n            id: 'enabled',\n            label: Craft.t('app', 'Enabled'),\n            name: 'enabled',\n        }).insertBefore($enabledForSiteField);\n        $globalField.find('label').css('font-weight', 'bold');\n        this.$globalLightswitch = $globalField.find('.lightswitch');\n\n        if (!this.settings.revisionId) {\n            this._showField($globalField);\n        }\n\n        // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n        const originalEnabledValue = (this.settings.enabled && !Craft.inArray(false, this.settings.siteStatuses))\n            ? '1'\n            : (this.settings.enabledForSite ? '-' : '');\n        const originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n            '=' + (this.settings.enabledForSite ? '1' : '');\n\n        this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n            .on('change', this._updateGlobalStatus.bind(this));\n\n        this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n\n        let serializedStatuses = `enabled=${originalEnabledValue}`;\n        for (let i = 0; i < this.$siteLightswitches.length; i++) {\n            const $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n            serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n        }\n\n        Craft.cp.$primaryForm.data('initialSerializedValue',\n            Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n        // Are there additional sites that can be added?\n        if (this.settings.addlSiteIds && this.settings.addlSiteIds.length) {\n            this._createAddlSiteField();\n        }\n\n        this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n        this._updateGlobalStatus();\n    },\n\n    /**\n     * @returns {Array}\n     */\n    _getOtherSupportedSites: function() {\n        return Craft.sites.filter(s => s.id != this.settings.siteId && this.siteIds.includes(s.id));\n    },\n\n    _showField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .height(0)\n            .velocity({height: height}, 'fast', () => {\n                $field.css({\n                    overflow: '',\n                    height: '',\n                });\n            });\n    },\n\n    _removeField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .velocity({height: 0}, 'fast', () => {\n                $field.remove();\n            });\n    },\n\n    _updateGlobalStatus: function() {\n        let allEnabled = true, allDisabled = true;\n        this.$siteLightswitches.each(function() {\n            const enabled = $(this).data('lightswitch').on;\n            if (enabled) {\n                allDisabled = false;\n            } else {\n                allEnabled = false;\n            }\n            if (!allEnabled && !allDisabled) {\n                return false;\n            }\n        });\n        if (allEnabled) {\n            this.$globalLightswitch.data('lightswitch').turnOn(true);\n        } else if (allDisabled) {\n            this.$globalLightswitch.data('lightswitch').turnOff(true);\n        } else {\n            this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n        }\n    },\n\n    _updateSiteStatuses: function() {\n        const enabled = this.$globalLightswitch.data('lightswitch').on;\n        this.$siteLightswitches.each(function() {\n            if (enabled) {\n                $(this).data('lightswitch').turnOn(true);\n            } else {\n                $(this).data('lightswitch').turnOff(true);\n            }\n        });\n    },\n\n    _createSiteStatusField: function(site) {\n        const $field = Craft.ui.createLightswitchField({\n            id: `enabledForSite-${site.id}`,\n            label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n            name: `enabledForSite[${site.id}]`,\n            on: this.settings.siteStatuses.hasOwnProperty(site.id)\n                ? this.settings.siteStatuses[site.id]\n                : true,\n            disabled: !!this.settings.revisionId,\n        });\n\n        if (this.$addlSiteField) {\n            $field.insertBefore(this.$addlSiteField);\n        } else {\n            $field.appendTo(this.$siteStatusPane);\n        }\n\n        if (!this.settings.revisionId) {\n            $field.addClass('nested');\n            const $lightswitch = $field.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n        }\n\n        this._showField($field);\n\n        return $field;\n    },\n\n    _createAddlSiteField: function() {\n        const addlSites = Craft.sites.filter(s => {\n            return !this.siteIds.includes(s.id) && this.settings.addlSiteIds.includes(s.id);\n        });\n\n        if (!addlSites.length) {\n            return;\n        }\n\n        const $addlSiteSelectContainer = Craft.ui.createSelect({\n            options: [\n                {label: Craft.t('app', 'Add a site…')},\n                ...addlSites.map(s => {\n                    return {label: s.name, value: s.id};\n                }),\n            ],\n        }).addClass('fullwidth');\n\n        this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n            .addClass('nested add')\n            .appendTo(this.$siteStatusPane);\n\n        const $addlSiteSelect = $addlSiteSelectContainer.find('select');\n\n        $addlSiteSelect.on('change', () => {\n            const siteId = parseInt($addlSiteSelect.val());\n            const site = Craft.sites.find(s => s.id === siteId);\n\n            if (!site) {\n                return;\n            }\n\n            this._createSiteStatusField(site);\n\n            $addlSiteSelect\n                .val('')\n                .find(`option[value=\"${siteId}\"]`).remove();\n\n            if (this.newSiteIds === null) {\n                this.newSiteIds = [];\n            }\n\n            this.siteIds.push(siteId);\n            this.newSiteIds.push(siteId);\n\n            // Was that the last site?\n            if ($addlSiteSelect.find('option').length === 1) {\n                this._removeField(this.$addlSiteField);\n            }\n        });\n\n        this._showField(this.$addlSiteField);\n    },\n\n    showStatusHud: function(target) {\n        let bodyHtml;\n\n        if (this.errors === null) {\n            bodyHtml = '<p>' + Craft.t('app', 'The draft has been saved.') + '</p>';\n        } else {\n            bodyHtml = '<p class=\"error\">' + Craft.t('app', 'The draft could not be saved.') + '</p>';\n\n            if (this.errors.length) {\n                bodyHtml += '<ul class=\"errors\">' +\n                    this.errors.map(e => `<li>${Craft.escapeHtml(e)}</li>`).join('') +\n                    '</ul>';\n            }\n        }\n\n        const hud = new Garnish.HUD(target, bodyHtml, {\n            onHide: function() {\n                hud.destroy();\n            }\n        });\n    },\n\n    spinners: function() {\n        return this.preview\n            ? this.$spinner.add(this.preview.$spinner)\n            : this.$spinner;\n    },\n\n    statusIcons: function() {\n        return this.preview\n            ? this.$statusIcon.add(this.preview.$statusIcon)\n            : this.$statusIcon;\n    },\n\n    createEditMetaBtn: function() {\n        this.$editMetaBtn = $('<button/>', {\n            type: 'button',\n            'class': 'btn edit icon',\n            title: Craft.t('app', 'Edit draft settings'),\n        }).appendTo($('#context-btngroup'));\n        this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n    },\n\n    createShareMenu: function($shareBtn) {\n        $shareBtn.addClass('menubtn');\n\n        const $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n        const $ul = $('<ul/>').appendTo($menu);\n\n        this.settings.previewTargets.forEach(target => {\n            const $li = $('<li/>').appendTo($ul);\n            const $a = $('<a/>', {\n                text: target.label,\n            }).appendTo($li);\n            this.addListener($a, 'click', () => {\n                this.openShareLink(target.url);\n            });\n        });\n    },\n\n    getPreviewToken: function() {\n        return new Promise(function(resolve, reject) {\n            if (this.previewToken) {\n                resolve(this.previewToken);\n                return;\n            }\n\n            Craft.postActionRequest('preview/create-token', {\n                elementType: this.settings.elementType,\n                sourceId: this.settings.sourceId,\n                siteId: this.settings.siteId,\n                draftId: this.settings.draftId,\n                revisionId: this.settings.revisionId,\n            }, function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.previewToken = response.token;\n                    resolve(this.previewToken);\n                } else {\n                    reject();\n                }\n            }.bind(this));\n        }.bind(this));\n    },\n\n    getTokenizedPreviewUrl: function(url, randoParam) {\n        return new Promise(function(resolve, reject) {\n            const params = {};\n\n            if (randoParam || !this.settings.isLive) {\n                // Randomize the URL so CDNs don't return cached pages\n                params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n            }\n\n            if (this.settings.siteToken) {\n                params[Craft.siteToken] = this.settings.siteToken;\n            }\n\n            // No need for a token if we're looking at a live element\n            if (this.settings.isLive) {\n                resolve(Craft.getUrl(url, params));\n                return;\n            }\n\n            this.getPreviewToken().then(function(token) {\n                params[Craft.tokenParam] = token;\n                resolve(Craft.getUrl(url, params));\n            }).catch(reject);\n        }.bind(this));\n    },\n\n    openShareLink: function(url) {\n        this.getTokenizedPreviewUrl(url).then(function(url) {\n            window.open(url);\n        });\n    },\n\n    getPreview: function() {\n        if (!this.preview) {\n            this.preview = new Craft.Preview(this);\n            this.preview.on('open', function() {\n                if (!this.settings.draftId || !Craft.autosaveDrafts) {\n                    if (!Craft.autosaveDrafts) {\n                        this.enableAutosave = true;\n                    }\n                    this.listenForChanges();\n                }\n            }.bind(this));\n            this.preview.on('close', function() {\n                if (!this.settings.draftId || !Craft.autosaveDrafts) {\n                    if (!Craft.autosaveDrafts) {\n                        this.enableAutosave = false;\n                        const $statusIcons = this.statusIcons();\n                        if ($statusIcons.hasClass('checkmark-icon')) {\n                            $statusIcons.addClass('hidden');\n                        }\n                    }\n                    this.stopListeningForChanges();\n                }\n\n                // did we just create a draft?\n                if (this.createdDraftInPreview) {\n                    setTimeout(() => {\n                        this.createDraftNoticeHud();\n                        this.createdDraftInPreview = false;\n                    }, 750);\n                }\n            }.bind(this));\n        }\n        return this.preview;\n    },\n\n    createDraftNoticeHud: function() {\n        const $closeBtn = $('<button/>', {\n            class: 'btn',\n            type: 'button',\n            text: Craft.t('app', 'Keep it'),\n        });\n        const $deleteBtn = $('<button/>', {\n            class: 'btn caution',\n            type: 'button',\n            text: Craft.t('app', 'Delete it'),\n        });\n\n        const hud = new Garnish.HUD(\n            $('#context-btngroup'),\n            $('<div/>', {class: 'readable centeralign'})\n                .append(\n                    $('<p/>', {\n                        text: Craft.t('app', 'You’re now editing a draft.'),\n                    })\n                )\n                .append(\n                    $('<div/>', {class: 'flex flex-nowrap'})\n                        .append($closeBtn)\n                        .append($deleteBtn)\n                ),\n            {\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n            }\n        );\n\n        $closeBtn.on('click', () => {\n            hud.hide();\n            hud.destroy();\n        });\n\n        $deleteBtn.on('click', () => {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this draft?'))) {\n                Craft.submitForm(Craft.cp.$primaryForm, {\n                    action: this.settings.deleteDraftAction,\n                    redirect: this.settings.hashedCpEditUrl,\n                });\n            }\n        })\n    },\n\n    openPreview: function() {\n        return new Promise(function(resolve, reject) {\n            this.openingPreview = true;\n            this.ensureIsDraftOrRevision(true)\n                .then(function() {\n                    this.getPreview().open();\n                    this.openingPreview = false;\n                    resolve();\n                }.bind(this))\n                .catch(reject);\n        }.bind(this))\n    },\n\n    ensureIsDraftOrRevision: function(onlyIfChanged) {\n        return new Promise(function(resolve, reject) {\n            if (!this.settings.draftId && !this.settings.revisionId) {\n                if (\n                    onlyIfChanged &&\n                    this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                ) {\n                    resolve();\n                    return;\n                }\n\n                this.createDraft()\n                    .then(resolve)\n                    .catch(reject);\n            } else {\n                resolve();\n            }\n        }.bind(this));\n    },\n\n    serializeForm: function(removeActionParams) {\n        let data = Craft.cp.$primaryForm.serialize();\n\n        if (this.isPreviewActive()) {\n            // Replace the temp input with the preview form data\n            data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n        }\n\n        if (removeActionParams && !this.settings.isUnpublishedDraft) {\n            // Remove action and redirect params\n            data = data.replace(/&action=[^&]*/, '');\n            data = data.replace(/&redirect=[^&]*/, '');\n        }\n\n        return data;\n    },\n\n    checkForm: function(force) {\n        // If this isn't a draft and there's no active preview, then there's nothing to check\n        if (\n            this.settings.revisionId ||\n            (!this.settings.draftId && !this.isPreviewActive()) ||\n            this.pauseLevel > 0\n        ) {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.timeout = null;\n\n        // Has anything changed?\n        const data = this.serializeForm(true);\n        if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n            this.saveDraft(data);\n        }\n    },\n\n    isPreviewActive: function() {\n        return this.preview && this.preview.isActive;\n    },\n\n    createDraft: function() {\n        return new Promise(function(resolve, reject) {\n            this.saveDraft(this.serializeForm(true))\n                .then(resolve)\n                .catch(reject);\n        }.bind(this));\n    },\n\n    saveDraft: function(data) {\n        return new Promise(function(resolve, reject) {\n            // Ignore if we're already submitting the main form\n            if (this.submittingForm) {\n                reject();\n                return;\n            }\n\n            if (this.saving) {\n                this.queue.push(function() {\n                    this.checkForm()\n                }.bind(this));\n                return;\n            }\n\n            this.lastSerializedValue = data;\n            this.saving = true;\n            const $spinners = this.spinners().removeClass('hidden');\n            const $statusIcons = this.statusIcons()\n                .velocity('stop')\n                .css('opacity', '')\n                .removeClass('invisible checkmark-icon alert-icon fade-out')\n                .addClass('hidden');\n            if (this.$saveMetaBtn) {\n                this.$saveMetaBtn.addClass('active');\n            }\n            this.errors = null;\n\n            const url = Craft.getActionUrl(this.settings.saveDraftAction);\n\n            this.saveXhr = Craft.postActionRequest(url, this.prepareData(data), function(response, textStatus) {\n                $spinners.addClass('hidden');\n                if (this.$saveMetaBtn) {\n                    this.$saveMetaBtn.removeClass('active');\n                }\n                this.saving = false;\n\n                if (textStatus === 'abort') {\n                    return;\n                }\n\n                if (textStatus !== 'success' || response.errors) {\n                    this.errors = (response ? response.errors : null) || [];\n                    $statusIcons\n                        .velocity('stop')\n                        .css('opacity', '')\n                        .removeClass('hidden checkmark-icon')\n                        .addClass('alert-icon')\n                        .attr('title', Craft.t('app', 'The draft could not be saved.'));\n                    reject();\n                    return;\n                }\n\n                if (response.title) {\n                    $('#header h1').text(response.title);\n                }\n\n                if (response.docTitle) {\n                    document.title = response.docTitle;\n                }\n\n                this.$revisionLabel.text(response.draftName);\n\n                this.settings.draftName = response.draftName;\n\n                let revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                // Did we just add a site?\n                if (this.newSiteIds) {\n                    // Do we need to create the revision menu?\n                    if (!revisionMenu) {\n                        this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                        new Garnish.MenuBtn(this.$revisionBtn);\n                        revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                        revisionMenu.$container.removeClass('hidden');\n                    }\n                    this.newSiteIds.forEach(siteId => {\n                        const $option = revisionMenu.$options.filter(`[data-site-id=${siteId}]`);\n                        $option.find('.status').removeClass('disabled').addClass('enabled');\n                        const $li = $option.parent().removeClass('hidden');\n                        $li.closest('.site-group').removeClass('hidden');\n                    });\n                    revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                    this.newSiteIds = null;\n                }\n\n                // Did we just create a draft?\n                const draftCreated = !this.settings.draftId;\n                if (draftCreated) {\n                    // Update the document location HREF\n                    let newHref;\n                    const anchorPos = document.location.href.search('#');\n                    if (anchorPos !== -1) {\n                        newHref = document.location.href.substr(0, anchorPos);\n                    } else {\n                        newHref = document.location.href;\n                    }\n                    newHref += (newHref.match(/\\?/) ? '&' : '?') + 'draftId=' + response.draftId;\n                    if (anchorPos !== -1) {\n                        newHref += document.location.href.substr(anchorPos);\n                    }\n                    history.replaceState({}, '', newHref);\n\n                    // Replace the action input\n                    $('#action').remove();\n                    $('<input/>', {\n                        id: 'action',\n                        type: 'hidden',\n                        name: 'action',\n                        value: this.settings.saveDraftAction,\n                    }).appendTo(Craft.cp.$primaryForm);\n\n                    // Remove the \"Create a draft\" and \"Save\" buttons\n                    $('#save-draft-btn-container').remove();\n                    $('#save-btn-container').remove();\n\n                    const $actionButtonContainer = $('#action-buttons');\n\n                    // If they're allowed to update the source, add a \"Publish draft\" button\n                    if (this.settings.canUpdateSource) {\n                        $('<button/>', {\n                            type: 'button',\n                            class: 'btn secondary formsubmit',\n                            text: Craft.t('app', 'Publish draft'),\n                            title: Craft.shortcutText('S', false, true),\n                            data: {\n                                action: this.settings.publishDraftAction,\n                                redirect: this.settings.hashedCpEditUrl,\n                            },\n                        }).appendTo($actionButtonContainer).formsubmit();\n                    }\n\n                    // Add a \"Save draft\" button\n                    const $saveBtnContainer = $('<div/>', {\n                        id: 'save-btn-container',\n                        class: 'btngroup submit',\n                    }).appendTo($actionButtonContainer);\n\n                    $('<button/>', {\n                        type: 'submit',\n                        class: 'btn submit',\n                        text: Craft.t('app', 'Save draft'),\n                    }).appendTo($saveBtnContainer);\n\n                    if (this.settings.saveDraftAction || this.settings.deleteDraftAction) {\n                        const $menuBtn = $('<button/>', {\n                            type: 'button',\n                            class: 'btn submit menubtn',\n                        }).appendTo($saveBtnContainer);\n                        const $menu = $('<div/>', {\n                            class: 'menu',\n                            attr: {\n                                'data-align': 'right',\n                            },\n                        }).appendTo($saveBtnContainer);\n\n                        if (this.settings.saveDraftAction) {\n                            const $ul = $('<ul/>')\n                                .appendTo($menu)\n                                .append(\n                                    $('<li/>')\n                                        .append(\n                                            $('<a/>', {\n                                                class: 'formsubmit',\n                                                data: {\n                                                    action: this.settings.saveDraftAction,\n                                                },\n                                                text: Craft.t('app', 'Save and continue editing'),\n                                            })\n                                                .prepend(\n                                                    $('<span/>', {\n                                                        class: 'shortcut',\n                                                        text: Craft.shortcutText('S'),\n                                                    })\n                                                )\n                                        )\n                                );\n                            if (this.settings.canUpdateSource && this.settings.hashedAddAnotherRedirectUrl) {\n                                $ul.append(\n                                    $('<li/>')\n                                        .append(\n                                            $('<a/>', {\n                                                class: 'formsubmit',\n                                                data: {\n                                                    action: this.settings.publishDraftAction,\n                                                    redirect: this.settings.hashedAddAnotherRedirectUrl,\n                                                },\n                                                text: Craft.t('app', 'Publish and add another'),\n                                            })\n                                        )\n                                );\n                            }\n                            if (this.settings.deleteDraftAction) {\n                                $('<hr/>').appendTo($menu);\n                            }\n                        }\n\n                        if (this.settings.deleteDraftAction) {\n                            $('<ul/>')\n                                .appendTo($menu)\n                                .append(\n                                    $('<li/>')\n                                        .append(\n                                            $('<a/>', {\n                                                class: 'formsubmit error',\n                                                data: {\n                                                    action: this.settings.deleteDraftAction,\n                                                    redirect: this.settings.hashedCpEditUrl,\n                                                    confirm: Craft.t('app', 'Are you sure you want to delete this draft?'),\n                                                },\n                                                text: Craft.t('app', 'Delete draft'),\n                                            })\n                                        )\n                                )\n                        }\n                    }\n\n                    Craft.initUiElements($saveBtnContainer);\n\n                    // Update the editor settings\n                    this.settings.draftId = response.draftId;\n                    this.settings.isLive = false;\n                    this.previewToken = null;\n                    this.initForDraft();\n\n                    // Add the draft to the revision menu\n                    if (revisionMenu) {\n                        revisionMenu.$options.filter(':not(.site-option)').removeClass('sel');\n                        let $draftsUl = revisionMenu.$container.find('.revision-group-drafts');\n                        if (!$draftsUl.length) {\n                            const $draftHeading = $('<h6/>', {\n                                text: Craft.t('app', 'Drafts'),\n                            }).insertAfter(revisionMenu.$container.find('.revision-group-current'));\n                            $draftsUl = $('<ul/>', {\n                                'class': 'padded revision-group-drafts',\n                            }).insertAfter($draftHeading);\n                        }\n                        const $draftLi = $('<li/>').prependTo($draftsUl);\n                        const $draftA = $('<a/>', {\n                            'class': 'sel',\n                            html: '<span class=\"draft-name\"></span> <span class=\"draft-meta light\"></span>',\n                        }).appendTo($draftLi);\n                        revisionMenu.addOptions($draftA);\n                        revisionMenu.selectOption($draftA);\n\n                        // Update the site URLs\n                        const $siteOptions = revisionMenu.$options.filter('.site-option[href]');\n                        for (let i = 0; i < $siteOptions.length; i++) {\n                            const $siteOption = $siteOptions.eq(i);\n                            $siteOption.attr('href', Craft.getUrl($siteOption.attr('href'), {draftId: response.draftId}));\n                        }\n                    }\n\n                    // is Live Preview currently active?\n                    if (this.openingPreview || (this.preview && this.preview.isActive)) {\n                        this.createdDraftInPreview = true;\n                    }\n                }\n\n                if (revisionMenu) {\n                    revisionMenu.$options.filter('.sel').find('.draft-name').text(response.draftName);\n                    revisionMenu.$options.filter('.sel').find('.draft-meta').text('– ' + (response.creator\n                            ? Craft.t('app', 'saved {timestamp} by {creator}', {\n                                timestamp: response.timestamp,\n                                creator: response.creator\n                            })\n                            : Craft.t('app', 'updated {timestamp}', {\n                                timestamp: response.timestamp,\n                            })\n                    ));\n                }\n\n                // Did the controller send us updated preview targets?\n                if (\n                    response.previewTargets &&\n                    JSON.stringify(response.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                ) {\n                    this.updatePreviewTargets(response.previewTargets);\n                }\n\n                this.afterUpdate(data);\n\n                if (draftCreated) {\n                    this.trigger('createDraft');\n                }\n\n                if (this.$nameTextInput) {\n                    this.checkMetaValues();\n                }\n\n                for (const oldId in response.duplicatedElements) {\n                    if (oldId != this.settings.sourceId && response.duplicatedElements.hasOwnProperty(oldId)) {\n                        this.duplicatedElements[oldId] = response.duplicatedElements[oldId];\n                    }\n                }\n\n                resolve();\n            }.bind(this));\n        }.bind(this));\n    },\n\n    prepareData: function(data) {\n        // Swap out element IDs with their duplicated ones\n        data = this.swapDuplicatedElementIds(data);\n\n        // Add the draft info\n        if (this.settings.draftId) {\n            data += `&draftId=${this.settings.draftId}`;\n        }\n\n        if (this.settings.draftName !== null) {\n            data += `&draftName=${this.settings.draftName}`;\n        }\n\n        // Filter out anything that hasn't changed\n        const initialData = this.swapDuplicatedElementIds(Craft.cp.$primaryForm.data('initialSerializedValue'));\n        return Craft.findDeltaData(initialData, data, this.getDeltaNames());\n    },\n\n    swapDuplicatedElementIds: function(data) {\n        const idsRE = Object.keys(this.duplicatedElements).join('|');\n        if (idsRE === '') {\n            return data;\n        }\n        const lb = encodeURIComponent('[');\n        const rb = encodeURIComponent(']');\n        // Keep replacing field IDs until data stops changing\n        while (true) {\n            if (data === (\n                data = data\n                    // &fields[...][X]\n                    .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                        return pre + this.duplicatedElements[id] + post;\n                    })\n                    // &fields[...=X\n                    .replace(new RegExp(`(&fields${lb}[^=]+=)(${idsRE})\\\\b`, 'g'), (m, pre, id) => {\n                        return pre + this.duplicatedElements[id];\n                    })\n            )) {\n                break;\n            }\n        }\n        return data;\n    },\n\n    getDeltaNames: function() {\n        const deltaNames = Craft.deltaNames.slice(0);\n        for (let i = 0; i < deltaNames.length; i++) {\n            for (const oldId in this.duplicatedElements) {\n                if (this.duplicatedElements.hasOwnProperty(oldId)) {\n                    deltaNames[i] = deltaNames[i].replace('][' + oldId + ']', '][' + this.duplicatedElements[oldId] + ']');\n                }\n            }\n        }\n        return deltaNames;\n    },\n\n    updatePreviewTargets: function(previewTargets) {\n        previewTargets.forEach(newTarget => {\n            const currentTarget = this.settings.previewTargets.find(t => t.label === newTarget.label);\n            if (currentTarget) {\n                currentTarget.url = newTarget.url;\n            }\n        });\n    },\n\n    afterUpdate: function(data) {\n        Craft.cp.$primaryForm.data('initialSerializedValue', data);\n        Craft.initialDeltaValues = {};\n        const $statusIcons = this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden')\n            .addClass('checkmark-icon')\n            .attr('title', Craft.t('app', 'The draft has been saved.'));\n\n        if (!this.enableAutosave) {\n            // Fade the icon out after a couple seconds, since it won't be accurate as content continues to change\n            $statusIcons\n                .velocity('stop')\n                .velocity({\n                    opacity: 0,\n                }, {\n                    delay: 2000,\n                    complete: () => {\n                        $statusIcons.addClass('hidden');\n                    },\n                });\n        }\n\n        this.trigger('update');\n\n        this.nextInQueue();\n    },\n\n    nextInQueue: function() {\n        if (this.queue.length) {\n            this.queue.shift()();\n        }\n    },\n\n    showMetaHud: function() {\n        if (!this.metaHud) {\n            this.createMetaHud();\n            this.onMetaHudShow();\n        } else {\n            this.metaHud.show();\n        }\n\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$nameTextInput.trigger('focus');\n        }\n    },\n\n    createMetaHud: function() {\n        const $hudBody = $('<div/>');\n\n        // Add the Name field\n        const $nameField = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n        const $nameInputContainer = $('<div class=\"input\"/>').appendTo($nameField);\n        this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($nameInputContainer).val(this.settings.draftName);\n\n        // HUD footer\n        const $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n        $('<div class=\"flex-grow\"></div>').appendTo($footer);\n        this.$saveMetaBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo($footer);\n\n        this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n            onSubmit: this.saveMeta.bind(this)\n        });\n\n        this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n\n        this.metaHud.on('show', this.onMetaHudShow.bind(this));\n        this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n        this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n    },\n\n    onMetaHudShow: function() {\n        this.$editMetaBtn.addClass('active');\n    },\n\n    onMetaHudHide: function() {\n        this.$editMetaBtn.removeClass('active');\n    },\n\n    onMetaHudEscape: function() {\n        this.$nameTextInput.val(this.settings.draftName);\n    },\n\n    checkMetaValues: function() {\n        if (\n            this.$nameTextInput.val() &&\n            this.$nameTextInput.val() !== this.settings.draftName\n        ) {\n            this.$saveMetaBtn.removeClass('disabled');\n            return true;\n        }\n\n        this.$saveMetaBtn.addClass('disabled');\n        return false;\n    },\n\n    shakeMetaHud: function() {\n        Garnish.shake(this.metaHud.$hud);\n    },\n\n    saveMeta: function() {\n        if (!this.checkMetaValues()) {\n            this.shakeMetaHud();\n            return;\n        }\n\n        this.settings.draftName = this.$nameTextInput.val();\n\n        this.metaHud.hide();\n        this.checkForm(true);\n    },\n\n    handleFormSubmit: function(ev) {\n        ev.preventDefault();\n\n        // Prevent double form submits\n        if (this.submittingForm) {\n            return;\n        }\n\n        // If this a draft and was this a normal save (either via submit button or save shortcut),\n        // then trigger an autosave\n        if (\n            this.settings.draftId &&\n            (typeof ev.autosave === 'undefined' || ev.autosave) &&\n            (ev.saveShortcut || (ev.customTrigger && ev.customTrigger.data('action') === this.settings.saveDraftAction))\n        ) {\n            this.checkForm(true);\n            return;\n        }\n\n        // Prevent the normal unload confirmation dialog\n        Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n        // Abort the current save request if there is one\n        if (this.saving) {\n            this.saveXhr.abort();\n        }\n\n        // Duplicate the form with normalized data\n        const data = this.prepareData(this.serializeForm(false));\n        const $form = Craft.createForm(data);\n\n        $form.appendTo(Garnish.$bod);\n        $form.submit();\n        this.submittingForm = true;\n    },\n}, {\n    defaults: {\n        elementType: null,\n        sourceId: null,\n        siteId: null,\n        isUnpublishedDraft: false,\n        enabled: false,\n        enabledForSite: false,\n        isLive: false,\n        siteStatuses: null,\n        addlSiteIds: [],\n        cpEditUrl: null,\n        draftId: null,\n        revisionId: null,\n        draftName: null,\n        canEditMultipleSites: false,\n        canUpdateSource: false,\n        saveDraftAction: null,\n        deleteDraftAction: null,\n        publishDraftAction: null,\n        hashedCpEditUrl: null,\n        hashedAddAnotherRedirectUrl: null,\n        enablePreview: false,\n        previewTargets: [],\n        siteToken: null,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend({\n    callback: $.noop,\n\n    init: function(source, target, callback) {\n        this.callback = callback;\n        this.base(source, target);\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return this.callback(sourceVal);\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend({\n    initialized: false,\n\n    id: null,\n    baseName: null,\n    columns: null,\n    sorter: null,\n    biggestId: -1,\n\n    $table: null,\n    $tbody: null,\n    $addRowBtn: null,\n\n    rowCount: 0,\n    hasMaxRows: false,\n    hasMinRows: false,\n\n    radioCheckboxes: null,\n\n    init: function(id, baseName, columns, settings) {\n        this.id = id;\n        this.baseName = baseName;\n        this.columns = columns;\n        this.setSettings(settings, Craft.EditableTable.defaults);\n        this.radioCheckboxes = {};\n\n        this.$table = $('#' + id);\n        this.$tbody = this.$table.children('tbody');\n        this.rowCount = this.$tbody.find('tr').length;\n\n        // Is this already an editable table?\n        if (this.$table.data('editable-table')) {\n            Garnish.log('Double-instantiating an editable table on an element');\n            this.$table.data('editable-table').destroy();\n        }\n\n        this.$table.data('editable-table', this);\n\n        this.sorter = new Craft.DataTableSorter(this.$table, {\n            helperClass: 'editabletablesorthelper',\n            copyDraggeeInputValuesToHelper: true\n        });\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            // Give everything a chance to initialize\n            setTimeout($.proxy(this, 'initializeIfVisible'), 500);\n        }\n\n        if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n            for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                this.addRow()\n            }\n        }\n    },\n\n    isVisible: function() {\n        return (this.$table.parent().height() > 0);\n    },\n\n    initialize: function() {\n        if (this.initialized) {\n            return false;\n        }\n\n        this.initialized = true;\n        this.removeListener(Garnish.$win, 'resize');\n\n        var $rows = this.$tbody.children();\n\n        for (var i = 0; i < $rows.length; i++) {\n            this.createRowObj($rows[i]);\n        }\n\n        this.$addRowBtn = this.$table.next('.add');\n        this.updateAddRowButton();\n        this.addListener(this.$addRowBtn, 'activate', 'addRow');\n        return true;\n    },\n    initializeIfVisible: function() {\n        this.removeListener(Garnish.$win, 'resize');\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n        }\n    },\n    updateAddRowButton: function() {\n        if (!this.canAddRow()) {\n            this.$addRowBtn.css('opacity', '0.2');\n            this.$addRowBtn.css('pointer-events', 'none');\n        } else {\n            this.$addRowBtn.css('opacity', '1');\n            this.$addRowBtn.css('pointer-events', 'auto');\n        }\n    },\n    canDeleteRow: function() {\n        return (this.rowCount > this.settings.minRows);\n    },\n    deleteRow: function(row) {\n        if (!this.canDeleteRow()) {\n            return;\n        }\n\n        this.sorter.removeItems(row.$tr);\n        row.$tr.remove();\n\n        this.rowCount--;\n\n        this.updateAddRowButton();\n        if (this.rowCount === 0) {\n            this.$table.addClass('hidden');\n        }\n\n        // onDeleteRow callback\n        this.settings.onDeleteRow(row.$tr);\n\n        row.destroy();\n    },\n    canAddRow: function() {\n        if (this.settings.staticRows) {\n            return false;\n        }\n\n        if (this.settings.maxRows) {\n            return (this.rowCount < this.settings.maxRows);\n        }\n\n        return true;\n    },\n    addRow: function(focus, prepend) {\n        if (!this.canAddRow()) {\n            return;\n        }\n\n        var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n            $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n        if (prepend) {\n            $tr.prependTo(this.$tbody);\n        } else {\n            $tr.appendTo(this.$tbody);\n        }\n\n        var row = this.createRowObj($tr);\n        this.sorter.addItems($tr);\n\n        // Focus the first input in the row\n        if (focus !== false) {\n            $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n        }\n\n        this.rowCount++;\n        this.updateAddRowButton();\n        this.$table.removeClass('hidden');\n\n        // onAddRow callback\n        this.settings.onAddRow($tr);\n\n        return row;\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n    },\n\n    createRowObj: function($tr) {\n        return new Craft.EditableTable.Row(this, $tr);\n    },\n\n    focusOnPrevRow: function($tr, tdIndex, blurTd) {\n        var $prevTr = $tr.prev('tr');\n        var prevRow;\n\n        if ($prevTr.length) {\n            prevRow = $prevTr.data('editable-table-row');\n        } else {\n            prevRow = this.addRow(false, true);\n        }\n\n        // Focus on the same cell in the previous row\n        if (!prevRow) {\n            return;\n        }\n\n        if (!prevRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($prevTr) {\n                this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    focusOnNextRow: function($tr, tdIndex, blurTd) {\n        var $nextTr = $tr.next('tr');\n        var nextRow;\n\n        if ($nextTr.length) {\n            nextRow = $nextTr.data('editable-table-row');\n        } else {\n            nextRow = this.addRow(false);\n        }\n\n        // Focus on the same cell in the next row\n        if (!nextRow) {\n            return;\n        }\n\n        if (!nextRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($nextTr) {\n                this.focusOnNextRow($nextTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    importData: function(data, row, tdIndex) {\n        let lines = data.split(/\\r?\\n|\\r/);\n        for (let i = 0; i < lines.length; i++) {\n            let values = lines[i].split(\"\\t\");\n            for (let j = 0; j < values.length; j++) {\n                let value = values[j];\n                row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                    .val(value)\n                    .trigger('input');\n            }\n\n            // move onto the next row\n            let $nextTr = row.$tr.next('tr');\n            if ($nextTr.length) {\n                row = $nextTr.data('editable-table-row');\n            } else {\n                row = this.addRow(false);\n            }\n        }\n    },\n}, {\n    textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n    defaults: {\n        rowIdPrefix: '',\n        defaultValues: {},\n        staticRows: false,\n        minRows: null,\n        maxRows: null,\n        onAddRow: $.noop,\n        onDeleteRow: $.noop\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        var $tr = $('<tr/>', {\n            'data-id': rowId\n        });\n\n        for (var colId in columns) {\n            if (!columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            var col = columns[colId],\n                value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                $cell;\n\n            if (col.type === 'heading') {\n                $cell = $('<th/>', {\n                    'scope': 'row',\n                    'class': col['class'],\n                    'html': value\n                });\n            } else {\n                var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                $cell = $('<td/>', {\n                    'class': `${col.class} ${col.type}-cell`,\n                    'width': col.width\n                });\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $cell.addClass('textual');\n                }\n\n                if (col.code) {\n                    $cell.addClass('code');\n                }\n\n                switch (col.type) {\n                    case 'checkbox':\n                        $('<div class=\"checkbox-wrapper\"/>')\n                            .append(Craft.ui.createCheckbox({\n                                    name: name,\n                                    value: col.value || '1',\n                                    checked: !!value\n                                })\n                            )\n                            .appendTo($cell);\n                        break;\n\n                    case 'color':\n                        Craft.ui.createColorInput({\n                            name: name,\n                            value: value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'date':\n                        Craft.ui.createDateInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'lightswitch':\n                        Craft.ui.createLightswitch({\n                            name: name,\n                            value: col.value || '1',\n                            on: !!value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'select':\n                        Craft.ui.createSelect({\n                            name: name,\n                            options: col.options,\n                            value: value || (function() {\n                                for (var key in col.options) {\n                                    if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                        return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                    }\n                                }\n                                return null;\n                            })(),\n                            'class': 'small'\n                        }).appendTo($cell);\n                        break;\n\n                    case 'time':\n                        Craft.ui.createTimeInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'email':\n                    case 'url':\n                        Craft.ui.createTextInput({\n                            name: name,\n                            value: value,\n                            type: col.type,\n                            placeholder: col.placeholder || null,\n                        }).appendTo($cell);\n                        break;\n\n                    default:\n                        $('<textarea/>', {\n                            'name': name,\n                            'rows': col.rows || 1,\n                            'val': value,\n                            'placeholder': col.placeholder\n                        }).appendTo($cell);\n                }\n            }\n\n            $cell.appendTo($tr);\n        }\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'move icon',\n                'title': Craft.t('app', 'Reorder')\n            })\n        ).appendTo($tr);\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Delete')\n            })\n        ).appendTo($tr);\n\n        return $tr;\n    }\n});\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend({\n    table: null,\n    id: null,\n    niceTexts: null,\n\n    $tr: null,\n    $tds: null,\n    tds: null,\n    $textareas: null,\n    $deleteBtn: null,\n\n    init: function(table, tr) {\n        this.table = table;\n        this.$tr = $(tr);\n        this.$tds = this.$tr.children();\n        this.tds = [];\n        this.id = this.$tr.attr('data-id');\n\n        this.$tr.data('editable-table-row', this);\n\n        // Get the row ID, sans prefix\n        var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n        if (id > this.table.biggestId) {\n            this.table.biggestId = id;\n        }\n\n        this.$textareas = $();\n        this.niceTexts = [];\n        var textareasByColId = {};\n\n        var i = 0;\n        var colId, col, td, $textarea, $checkbox;\n\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n            td = this.tds[colId] = this.$tds[i];\n\n            if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                $textarea = $('textarea', td);\n                this.$textareas = this.$textareas.add($textarea);\n\n                this.addListener($textarea, 'focus', 'onTextareaFocus');\n                this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                this.niceTexts.push(new Garnish.NiceText($textarea, {\n                    onHeightChange: $.proxy(this, 'onTextareaHeightChange')\n                }));\n\n                this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                $textarea.trigger('input');\n\n                if (col.type !== 'multiline') {\n                    this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                }\n\n                textareasByColId[colId] = $textarea;\n            } else if (col.type === 'checkbox') {\n                $checkbox = $('input[type=\"checkbox\"]', td);\n\n                if (col.radioMode) {\n                    if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                        this.table.radioCheckboxes[colId] = [];\n                    }\n                    this.table.radioCheckboxes[colId].push($checkbox[0]);\n                    this.addListener($checkbox, 'change', {colId: colId}, 'onRadioCheckboxChange');\n                }\n\n                if (col.toggle) {\n                    this.addListener($checkbox, 'change', {colId: colId}, function(ev) {\n                        this.applyToggleCheckbox(ev.data.colId);\n                    });\n                }\n            }\n\n            if (!$(td).hasClass('disabled')) {\n                this.addListener(td, 'click', {td: td}, function(ev) {\n                    if (ev.target === ev.data.td) {\n                        $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                    }\n                });\n            }\n\n            i++;\n        }\n\n        // Now that all of the text cells have been nice-ified, let's normalize the heights\n        this.onTextareaHeightChange();\n\n        // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n            col = this.table.columns[colId];\n            if (col.type === 'checkbox' && col.toggle) {\n                this.applyToggleCheckbox(colId);\n            }\n        }\n\n        // Now look for any autopopulate columns\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n\n            if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                    allowNonAlphaStart: true\n                });\n            }\n        }\n\n        var $deleteBtn = this.$tr.children().last().find('.delete');\n        this.addListener($deleteBtn, 'click', 'deleteRow');\n\n        var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n        this.addListener($inputs, 'focus', function(ev) {\n            $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n        });\n        this.addListener($inputs, 'blur', function(ev) {\n            $(ev.currentTarget).closest('td').removeClass('focus');\n        });\n    },\n\n    onTextareaFocus: function(ev) {\n        this.onTextareaHeightChange();\n\n        var $textarea = $(ev.currentTarget);\n\n        if ($textarea.data('ignoreNextFocus')) {\n            $textarea.data('ignoreNextFocus', false);\n            return;\n        }\n\n        setTimeout(function() {\n            Craft.selectFullValue($textarea);\n        }, 0);\n    },\n\n    onRadioCheckboxChange: function(ev) {\n        if (ev.currentTarget.checked) {\n            for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                checkbox.checked = (checkbox === ev.currentTarget);\n            }\n        }\n    },\n\n    applyToggleCheckbox: function(checkboxColId) {\n        var checkboxCol = this.table.columns[checkboxColId];\n        var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n        var colId, colIndex, neg;\n        for (var i = 0; i < checkboxCol.toggle.length; i++) {\n            colId = checkboxCol.toggle[i];\n            colIndex = this.table.colum;\n            neg = colId[0] === '!';\n            if (neg) {\n                colId = colId.substr(1);\n            }\n            if ((checked && !neg) || (!checked && neg)) {\n                $(this.tds[colId])\n                    .removeClass('disabled')\n                    .find('textarea, input').prop('disabled', false);\n            } else {\n                $(this.tds[colId])\n                    .addClass('disabled')\n                    .find('textarea, input').prop('disabled', true);\n            }\n        }\n    },\n\n    ignoreNextTextareaFocus: function(ev) {\n        $.data(ev.currentTarget, 'ignoreNextFocus', true);\n    },\n\n    handleKeypress: function(ev) {\n        var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n        var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n        // Going to the next/previous row?\n        if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n            ev.preventDefault();\n            if (ev.shiftKey) {\n                this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            } else {\n                this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            }\n            return;\n        }\n\n        // Was this an invalid number character?\n        if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n            ev.preventDefault();\n        }\n    },\n\n    handlePaste: function(ev) {\n        let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n        if (!data.match(/[\\t\\r\\n]/)) {\n            return;\n        }\n        ev.preventDefault();\n        this.table.importData(data, this, ev.data.tdIndex);\n    },\n\n    validateValue: function(ev) {\n        if (ev.data.type === 'multiline') {\n            return;\n        }\n\n        var safeValue;\n\n        if (ev.data.type === 'number') {\n            // Only grab the number at the beginning of the value (if any)\n            var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n            if (match !== null) {\n                safeValue = match[1];\n            } else {\n                safeValue = '';\n            }\n        } else {\n            // Just strip any newlines\n            safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n        }\n\n        if (safeValue !== ev.currentTarget.value) {\n            ev.currentTarget.value = safeValue;\n        }\n    },\n\n    onTextareaHeightChange: function() {\n        // Keep all the textareas' heights in sync\n        var tallestTextareaHeight = -1;\n\n        for (var i = 0; i < this.niceTexts.length; i++) {\n            if (this.niceTexts[i].height > tallestTextareaHeight) {\n                tallestTextareaHeight = this.niceTexts[i].height;\n            }\n        }\n\n        this.$textareas.css('min-height', tallestTextareaHeight);\n\n        // If the <td> is still taller, go with that instead\n        var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n        if (tdHeight > tallestTextareaHeight) {\n            this.$textareas.css('min-height', tdHeight);\n        }\n    },\n\n    deleteRow: function() {\n        this.table.deleteRow(this);\n    }\n}, {\n    numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend({\n    maxLevels: null,\n    newChildUrl: null,\n    $trigger: null,\n    $selectedItems: null,\n    triggerEnabled: true,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n        this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n        // Do we have a custom handler?\n        if (this.settings.activate) {\n            // Prevent the element index's click handler\n            this.$trigger.data('custom-handler', true);\n\n            // Is this a custom trigger?\n            if (this.$trigger.prop('nodeName') === 'FORM') {\n                this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n            } else {\n                this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n            }\n        }\n\n        this.updateTrigger();\n        Craft.elementIndex.on('selectionChange', $.proxy(this, 'updateTrigger'));\n    },\n\n    updateTrigger: function() {\n        // Ignore if the last element was just unselected\n        if (Craft.elementIndex.getSelectedElements().length === 0) {\n            return;\n        }\n\n        if (this.validateSelection()) {\n            this.enableTrigger();\n        } else {\n            this.disableTrigger();\n        }\n    },\n\n    /**\n     * Determines if this action can be performed on the currently selected elements.\n     *\n     * @return boolean\n     */\n    validateSelection: function() {\n        var valid = true;\n        this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n        if (!this.settings.batch && this.$selectedItems.length > 1) {\n            valid = false;\n        } else if (typeof this.settings.validateSelection === 'function') {\n            valid = this.settings.validateSelection(this.$selectedItems);\n        }\n\n        return valid;\n    },\n\n    enableTrigger: function() {\n        if (this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.removeClass('disabled');\n        this.triggerEnabled = true;\n    },\n\n    disableTrigger: function() {\n        if (!this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.addClass('disabled');\n        this.triggerEnabled = false;\n    },\n\n    handleTriggerActivation: function(ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        if (this.triggerEnabled) {\n            this.settings.activate(this.$selectedItems);\n        }\n    }\n}, {\n    defaults: {\n        type: null,\n        batch: true,\n        validateSelection: null,\n        activate: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend({\n    queue: null,\n    workers: [],\n\n    init: function() {\n        this.queue = [];\n\n        for (var i = 0; i < 3; i++) {\n            this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n        }\n    },\n\n    load: function($elements) {\n        // Only immediately load the visible images\n        let $thumbs = $elements.find('.elementthumb');\n        for (let i = 0; i < $thumbs.length; i++) {\n            let $thumb = $thumbs.eq(i);\n            let $scrollParent = $thumb.scrollParent();\n            if (this.isVisible($thumb, $scrollParent)) {\n                this.addToQueue($thumb[0]);\n            } else {\n                let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                $scrollParent.on(`scroll.${key}`, {\n                    $thumb: $thumb,\n                    $scrollParent: $scrollParent,\n                    key: key,\n                }, (ev) => {\n                    if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                        delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                        $scrollParent.off(`scroll.${ev.data.key}`);\n                        this.addToQueue(ev.data.$thumb[0]);\n                    }\n                });\n            }\n        }\n    },\n\n    addToQueue: function(thumb) {\n        this.queue.push(thumb);\n\n        // See if there are any inactive workers\n        for (var i = 0; i < this.workers.length; i++) {\n            if (!this.workers[i].active) {\n                this.workers[i].loadNext();\n            }\n        }\n    },\n\n    isVisible: function($thumb, $scrollParent) {\n        let thumbOffset = $thumb.offset().top;\n        let scrollParentOffset, scrollParentHeight;\n        if ($scrollParent[0] === document) {\n            scrollParentOffset = $scrollParent.scrollTop();\n            scrollParentHeight = Garnish.$win.height();\n        } else {\n            scrollParentOffset = $scrollParent.offset().top;\n            scrollParentHeight = $scrollParent.height();\n        }\n        return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.workers.length; i++) {\n            this.workers[i].destroy();\n        }\n\n        this.base();\n    }\n}, {\n    invisibleThumbs: {},\n    retryAll: function() {\n        for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n            let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n            delete Craft.ElementThumbLoader.invisibleThumbs[key];\n            $scrollParent.off(`scroll.${key}`);\n            queue.load($thumb.parent());\n        }\n    }\n});\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend({\n    loader: null,\n    active: false,\n\n    init: function(loader) {\n        this.loader = loader;\n    },\n\n    loadNext: function() {\n        var container = this.loader.queue.shift();\n        if (typeof container === 'undefined') {\n            this.active = false;\n            return;\n        }\n\n        this.active = true;\n        var $container = $(container);\n        if ($container.find('img').length) {\n            this.loadNext();\n            return;\n        }\n        var $img = $('<img/>', {\n            sizes: $container.attr('data-sizes'),\n            srcset: $container.attr('data-srcset'),\n            alt: ''\n        });\n        this.addListener($img, 'load,error', 'loadNext');\n        $img.appendTo($container);\n        picturefill({\n            elements: [$img[0]]\n        });\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend({\n    $form: null,\n    inputs: null,\n\n    init: function(form, inputs) {\n        this.$form = $(form);\n\n        // Only check specific inputs?\n        if (typeof inputs !== 'undefined') {\n            this.inputs = [];\n            inputs = $.makeArray(inputs);\n\n            for (var i = 0; i < inputs.length; i++) {\n                var $inputs = $(inputs[i]);\n\n                for (var j = 0; j < $inputs.length; j++) {\n                    var $input = $inputs.eq(j);\n\n                    this.inputs.push({\n                        input: $input,\n                        val: Garnish.getInputPostVal($input)\n                    });\n                }\n            }\n        }\n\n        this.addListener(this.$form, 'submit', 'handleFormSubmit');\n    },\n\n    handleFormSubmit: function(ev) {\n        // Ignore if we're in the middle of getting the elevated session timeout\n        if (Craft.elevatedSessionManager.fetchingTimeout) {\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            return;\n        }\n\n        // Are we only interested in certain inputs?\n        if (this.inputs) {\n            var inputsChanged = false;\n            var $input;\n\n            for (var i = 0; i < this.inputs.length; i++) {\n                $input = this.inputs[i].input;\n                // Is this a password input?\n                if ($input.data('passwordInput')) {\n                    $input = $input.data('passwordInput').$currentInput;\n                }\n\n                // Has this input's value changed?\n                if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                    inputsChanged = true;\n                    break;\n                }\n            }\n\n            if (!inputsChanged) {\n                // No need to interrupt the submit\n                return;\n            }\n        }\n\n        // Prevent the form from submitting until the user has an elevated session\n        ev.preventDefault();\n        ev.stopImmediatePropagation();\n        Craft.elevatedSessionManager.requireElevatedSession($.proxy(this, 'submitForm'));\n    },\n\n    submitForm: function() {\n        // Don't let handleFormSubmit() interrupt this time\n        this.disable();\n        this.$form.trigger('submit');\n        this.enable();\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend({\n    fetchingTimeout: false,\n\n    passwordModal: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $submitBtn: null,\n    $errorPara: null,\n\n    callback: null,\n\n    /**\n     * Requires that the user has an elevated session.\n     *\n     * @param {function} callback The callback function that should be called once the user has an elevated session\n     */\n    requireElevatedSession: function(callback) {\n        this.callback = callback;\n\n        // Check the time remaining on the user's elevated session (if any)\n        this.fetchingTimeout = true;\n\n        Craft.postActionRequest('users/get-elevated-session-timeout', $.proxy(function(response, textStatus) {\n            this.fetchingTimeout = false;\n\n            if (textStatus === 'success') {\n                // Is there still enough time left or has it been disabled?\n                if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                    this.callback();\n                } else {\n                    // Show the password modal\n                    this.showPasswordModal();\n                }\n            }\n        }, this));\n    },\n\n    showPasswordModal: function() {\n        if (!this.passwordModal) {\n            var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<td/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$submitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Submit'),\n            }).appendTo($buttonContainer);\n            this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.passwordModal = new Garnish.Modal($passwordModal, {\n                closeOtherModals: false,\n                onFadeIn: $.proxy(function() {\n                    setTimeout($.proxy(this, 'focusPasswordInput'), 100);\n                }, this),\n                onFadeOut: $.proxy(function() {\n                    this.$passwordInput.val('');\n                }, this)\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $.proxy(function($newPasswordInput) {\n                    this.$passwordInput = $newPasswordInput;\n                }, this)\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($passwordModal, 'submit', 'submitPassword');\n        } else {\n            this.passwordModal.show();\n        }\n    },\n\n    focusPasswordInput: function() {\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$passwordInput.trigger('focus');\n        }\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$submitBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$submitBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    submitPassword: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (!this.validatePassword()) {\n            return;\n        }\n\n        this.$passwordSpinner.removeClass('hidden');\n        this.clearLoginError();\n\n        var data = {\n            currentPassword: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/start-elevated-session', data, $.proxy(function(response, textStatus) {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.passwordModal.hide();\n                    this.callback();\n                } else {\n                    this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                    Garnish.shake(this.passwordModal.$container);\n                    this.focusPasswordInput();\n                }\n            } else {\n                this.showPasswordError();\n            }\n        }, this));\n    },\n\n    showPasswordError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$errorPara.text(error);\n        this.passwordModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showPasswordError('');\n    }\n}, {\n    minSafeElevatedSessionTimeout: 5\n});\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend({\n    publishableSections: null,\n    $newEntryBtnGroup: null,\n    $newEntryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', $.proxy(this, 'updateButton'));\n        this.on('selectSite', $.proxy(this, 'updateButton'));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible sections the user has permission to create new entries in\n        this.publishableSections = [];\n\n        for (var i = 0; i < Craft.publishableSections.length; i++) {\n            var section = Craft.publishableSections[i];\n\n            if (this.getSourceByKey('section:' + section.uid)) {\n                this.publishableSections.push(section);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific section in the URL?\n        if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n            if (defaultSectionHandle === 'singles') {\n                return 'singles';\n            } else {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultSectionHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        var handle;\n\n        // Get the handle of the selected source\n        if (this.$source.data('key') === 'singles') {\n            handle = 'singles';\n        } else {\n            handle = this.$source.data('handle');\n        }\n\n        // Update the New Entry button\n        // ---------------------------------------------------------------------\n\n        var i, href, label;\n\n        if (this.publishableSections.length) {\n            // Remove the old button, if there is one\n            if (this.$newEntryBtnGroup) {\n                this.$newEntryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a section that they have permission to create entries in\n            var selectedSection;\n\n            if (handle) {\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    if (this.publishableSections[i].handle === handle) {\n                        selectedSection = this.publishableSections[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n            // Otherwise only show a menu button\n            if (selectedSection) {\n                href = this._getSectionTriggerHref(selectedSection);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + ' role=\"button\" tabindex=\"0\">' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                        this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.publishableSections.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newEntryBtnGroup);\n                }\n            } else {\n                this.$newEntryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New entry'),\n                }).appendTo(this.$newEntryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    var section = this.publishableSections[i];\n\n                    if (\n                        (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                        (this.settings.context !== 'index' && section !== selectedSection)\n                    ) {\n                        href = this._getSectionTriggerHref(section);\n                        label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', $.proxy(function(ev) {\n                        this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                    }, this));\n                }\n            }\n\n            this.addButton(this.$newEntryBtnGroup);\n        }\n\n        // Update the URL if we're on the Entries index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'entries';\n\n            if (handle) {\n                uri += '/' + handle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getSectionTriggerHref: function(section) {\n        if (this.settings.context === 'index') {\n            var uri = 'entries/' + section.handle + '/new';\n            let params = {};\n            if (this.siteId) {\n                for (var i = 0; i < Craft.sites.length; i++) {\n                    if (Craft.sites[i].id == this.siteId) {\n                        params.site = Craft.sites[i].handle;\n                    }\n                }\n            }\n            return 'href=\"' + Craft.getUrl(uri, params) + '\"';\n        } else {\n            return 'data-id=\"' + section.id + '\"';\n        }\n    },\n\n    _openCreateEntryModal: function(sectionId) {\n        if (this.$newEntryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the section\n        var section;\n\n        for (var i = 0; i < this.publishableSections.length; i++) {\n            if (this.publishableSections[i].id == sectionId) {\n                section = this.publishableSections[i];\n                break;\n            }\n        }\n\n        if (!section) {\n            return;\n        }\n\n        this.$newEntryBtn.addClass('inactive');\n        var newEntryBtnText = this.$newEntryBtn.text();\n        this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newEntryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                sectionId: sectionId,\n                typeId: section.entryTypes[0].id,\n                enabled: section.canPublish ? 1 : 0,\n            },\n            onBeginLoading: $.proxy(function() {\n                this.$newEntryBtn.addClass('loading');\n            }, this),\n            onEndLoading: $.proxy(function() {\n                this.$newEntryBtn.removeClass('loading');\n            }, this),\n            onHideHud: $.proxy(function() {\n                this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n            }, this),\n            onSaveElement: $.proxy(function(response) {\n                // Make sure the right section is selected\n                var sectionSourceKey = 'section:' + section.uid;\n\n                if (this.sourceKey !== sectionSourceKey) {\n                    this.selectSourceByKey(sectionSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            }, this)\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n\n/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: $.proxy(this, 'onTabOptionSelect')\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const $labelSpan = $tab.find('.tabs .tab span');\n        const oldName = $labelSpan.text();\n        const newName = this.promptForTabName(oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    promptForTabName: function(oldName) {\n        return prompt(Craft.t('app', 'Give your tab a name.'), oldName);\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const name = this.promptForTabName();\n        if (!name) {\n            return;\n        }\n\n        const $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>${name}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onShow: (e) => {\n                // Hold off a sec until it's positioned...\n                Garnish.requestAnimationFrame(() => {\n                    // Focus on the first text input\n                    this.hud.$main.find('.text:first').trigger('focus');\n                });\n            },\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend({\n    $toggle: null,\n    targetPrefix: null,\n    targetSelector: null,\n    reverseTargetSelector: null,\n\n    _$target: null,\n    _$reverseTarget: null,\n    type: null,\n\n    init: function(toggle) {\n        this.$toggle = $(toggle);\n\n        // Is this already a field toggle?\n        if (this.$toggle.data('fieldtoggle')) {\n            Garnish.log('Double-instantiating a field toggle on an element');\n            this.$toggle.data('fieldtoggle').destroy();\n        }\n\n        this.$toggle.data('fieldtoggle', this);\n\n        this.type = this.getType();\n\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n        } else {\n            this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n            this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n        }\n\n        this.findTargets();\n\n        switch (this.type) {\n            case 'link':\n                this.addListener(this.$toggle, 'click', 'onToggleChange');\n                break;\n            case 'fieldset':\n                this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                break;\n            default:\n                this.addListener(this.$toggle, 'change', 'onToggleChange');\n                this.onToggleChange();\n        }\n    },\n\n    normalizeTargetSelector: function(selector) {\n        if (selector && !selector.match(/^[#\\.]/)) {\n            selector = '#' + selector;\n        }\n\n        return selector;\n    },\n\n    getType: function() {\n        let nodeName = this.$toggle.prop('nodeName');\n        if (\n            (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n            this.$toggle.attr('role') === 'checkbox' ||\n            this.$toggle.attr('role') === 'switch'\n        ) {\n            return 'checkbox';\n        }\n\n        switch (nodeName) {\n            case 'SELECT':\n                return 'select';\n            case 'A':\n                return 'link';\n            case 'FIELDSET':\n                return 'fieldset';\n        }\n\n        console.warn('Unexpected field toggle:', this.$toggle[0]);\n    },\n\n    findTargets: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            var toggleVal = this.getToggleVal();\n            this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n        } else {\n            if (this.targetSelector) {\n                this._$target = $(this.targetSelector);\n            }\n\n            if (this.reverseTargetSelector) {\n                this._$reverseTarget = $(this.reverseTargetSelector);\n            }\n        }\n    },\n\n    getToggleVal: function() {\n        if (this.type === 'checkbox') {\n            if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                return this.$toggle.prop('checked');\n            }\n            return this.$toggle.attr('aria-checked') === 'true';\n        }\n\n        let postVal;\n        if (this.type === 'fieldset') {\n            postVal = this.$toggle.find('input:checked:first').val();\n        } else {\n            postVal = Garnish.getInputPostVal(this.$toggle);\n        }\n\n        // Normalize the value\n        return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[^\\w]+/g, '-');\n    },\n\n    onToggleChange: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.hideTarget(this._$target);\n            this.findTargets();\n            this.showTarget(this._$target);\n        } else {\n            this.findTargets();\n\n            if (this.type === 'link') {\n                this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n            } else {\n                this.onToggleChange._show = !!this.getToggleVal();\n            }\n\n            if (this.onToggleChange._show) {\n                this.showTarget(this._$target);\n                this.hideTarget(this._$reverseTarget);\n            } else {\n                this.hideTarget(this._$target);\n                this.showTarget(this._$reverseTarget);\n            }\n\n            delete this.onToggleChange._show;\n        }\n    },\n\n    showTarget: function($target) {\n        if ($target && $target.length) {\n            this.showTarget._currentHeight = $target.height();\n\n            $target.removeClass('hidden');\n\n            if (this.type !== 'select' && this.type !== 'fieldset') {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('collapsed');\n                    this.$toggle.addClass('expanded');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.prop('nodeName') !== 'SPAN') {\n                            $t.height('auto');\n                            this.showTarget._targetHeight = $t.height();\n                            $t.css({\n                                height: this.showTarget._currentHeight,\n                                overflow: 'hidden'\n                            });\n\n                            $t.velocity('stop');\n\n                            $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                $t.css({\n                                    height: '',\n                                    overflow: ''\n                                });\n                            });\n                        }\n                    })($target.eq(i));\n                }\n\n                delete this.showTarget._targetHeight;\n            }\n\n            delete this.showTarget._currentHeight;\n\n            // Trigger a resize event in case there are any grids in the target that need to initialize\n            Garnish.$win.trigger('resize');\n        }\n    },\n\n    hideTarget: function($target) {\n        if ($target && $target.length) {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                $target.addClass('hidden');\n            } else {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('expanded');\n                    this.$toggle.addClass('collapsed');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.hasClass('hidden')) {\n                            return;\n                        }\n                        if ($t.prop('nodeName') === 'SPAN') {\n                            $t.addClass('hidden');\n                        } else {\n                            $t.css('overflow', 'hidden');\n                            $t.velocity('stop');\n                            $t.velocity({height: 0}, 'fast', function() {\n                                $t.addClass('hidden');\n                            });\n                        }\n                    })($target.eq(i));\n                }\n            }\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend({\n    $container: null,\n\n    $items: null,\n    items: null,\n    totalCols: null,\n    colGutterDrop: null,\n    colPctWidth: null,\n\n    possibleItemColspans: null,\n    possibleItemPositionsByColspan: null,\n\n    itemPositions: null,\n    itemColspansByPosition: null,\n\n    layouts: null,\n    layout: null,\n    itemHeights: null,\n    leftPadding: null,\n\n    _refreshingCols: false,\n    _refreshColsAfterRefresh: false,\n    _forceRefreshColsAfterRefresh: false,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n\n        // Is this already a grid?\n        if (this.$container.data('grid')) {\n            Garnish.log('Double-instantiating a grid on an element');\n            this.$container.data('grid').destroy();\n        }\n\n        this.$container.data('grid', this);\n\n        this.setSettings(settings, Craft.Grid.defaults);\n\n        // Set the refreshCols() proxy that container resizes will trigger\n        this.handleContainerHeightProxy = $.proxy(function() {\n            this.refreshCols(false, true);\n        }, this);\n\n        this.$items = this.$container.children(this.settings.itemSelector);\n        this.setItems();\n        this.refreshCols(true, false);\n\n        Garnish.$doc.ready($.proxy(function() {\n            this.refreshCols(false, false);\n        }, this));\n    },\n\n    addItems: function(items) {\n        this.$items = $().add(this.$items.add(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    removeItems: function(items) {\n        this.$items = $().add(this.$items.not(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    resetItemOrder: function() {\n        this.$items = $().add(this.$items);\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    setItems: function() {\n        this.setItems._ = {};\n\n        this.items = [];\n\n        for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n            this.items.push($(this.$items[this.setItems._.i]));\n        }\n\n        delete this.setItems._;\n    },\n\n    refreshCols: function(force) {\n        if (this._refreshingCols) {\n            this._refreshColsAfterRefresh = true;\n            if (force) {\n                this._forceRefreshColsAfterRefresh = true;\n            }\n            return;\n        }\n\n        this._refreshingCols = true;\n\n        if (!this.items.length) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.refreshCols._ = {};\n\n        // Check to see if the grid is actually visible\n        this.refreshCols._.oldHeight = this.$container[0].style.height;\n        this.$container[0].style.height = 1;\n        this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n        this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n        if (this.refreshCols._.scrollHeight === 0) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        if (this.settings.cols) {\n            this.refreshCols._.totalCols = this.settings.cols;\n        } else {\n            this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n            // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n            if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n            }\n\n            if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                this.refreshCols._.totalCols = this.settings.maxCols;\n            }\n        }\n\n        if (this.refreshCols._.totalCols === 0) {\n            this.refreshCols._.totalCols = 1;\n        }\n\n        // Same number of columns as before?\n        if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.totalCols = this.refreshCols._.totalCols;\n        this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n        // Temporarily stop listening to container resizes\n        this.removeListener(this.$container, 'resize');\n\n        if (this.settings.fillMode === 'grid') {\n            this.refreshCols._.itemIndex = 0;\n\n            while (this.refreshCols._.itemIndex < this.items.length) {\n                // Append the next X items and figure out which one is the tallest\n                this.refreshCols._.tallestItemHeight = -1;\n                this.refreshCols._.colIndex = 0;\n\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                    if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                        this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                    }\n\n                    this.refreshCols._.colIndex++;\n                }\n\n                if (this.settings.snapToGrid) {\n                    this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                    if (this.refreshCols._.remainder) {\n                        this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                    }\n                }\n\n                // Now set their heights to the tallest one\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                }\n\n                // set the this.refreshCols._.itemIndex pointer to the next one up\n                this.refreshCols._.itemIndex += this.totalCols;\n            }\n        } else {\n            this.removeListener(this.$items, 'resize');\n\n            // If there's only one column, sneak out early\n            if (this.totalCols === 1) {\n                this.$container.height('auto');\n                this.$items\n                    .show()\n                    .css({\n                        position: 'relative',\n                        width: 'auto',\n                        top: 0\n                    })\n                    .css(Craft.left, 0);\n            } else {\n                this.$items.css('position', 'absolute');\n                this.colPctWidth = (100 / this.totalCols);\n\n                // The setup\n\n                this.layouts = [];\n\n                this.itemPositions = [];\n                this.itemColspansByPosition = [];\n\n                // Figure out all of the possible colspans for each item,\n                // as well as all the possible positions for each item at each of its colspans\n\n                this.possibleItemColspans = [];\n                this.possibleItemPositionsByColspan = [];\n                this.itemHeightsByColspan = [];\n\n                for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                    this.possibleItemColspans[this.refreshCols._.item] = [];\n                    this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                    this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                    this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                    this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                    this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                    this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                    this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                    if (this.refreshCols._.minColspan > this.totalCols) {\n                        this.refreshCols._.minColspan = this.totalCols;\n                    }\n                    if (this.refreshCols._.maxColspan > this.totalCols) {\n                        this.refreshCols._.maxColspan = this.totalCols;\n                    }\n\n                    for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                        // Get the height for this colspan\n                        this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                        this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                        this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                        if (this.refreshCols._.positionLeft) {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = 0;\n                        } else if (this.refreshCols._.positionRight) {\n                            this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                            this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                        } else {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                        }\n\n                        for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                        }\n                    }\n                }\n\n                // Find all the possible layouts\n\n                this.refreshCols._.colHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                    this.refreshCols._.colHeights.push(0);\n                }\n\n                this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                // Now find the layout that looks the best.\n\n                // First find the layouts with the highest number of used columns\n                this.refreshCols._.layoutTotalCols = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                    for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                        if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                            this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                        }\n                    }\n                }\n\n                this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                // Filter out the ones that aren't using as many columns as they could be\n                for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                    if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                        this.layouts.splice(this.refreshCols._.i, 1);\n                    }\n                }\n\n                // Find the layout(s) with the least overall height\n                this.refreshCols._.layoutHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                }\n\n                this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                this.refreshCols._.shortestLayouts = [];\n                this.refreshCols._.emptySpaces = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                    if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                        this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                        // Now get its total empty space, including any trailing empty space\n                        this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                        }\n\n                        this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                    }\n                }\n\n                // And the layout with the least empty space is...\n                this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                // Set the item widths and left positions\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                    this.refreshCols._.css = {\n                        width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                    };\n                    this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                    this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                }\n\n                // If every item is at position 0, then let them lay out au naturel\n                if (this.isSimpleLayout()) {\n                    this.$container.height('auto');\n                    this.$items.css({\n                        position: 'relative',\n                        top: 0,\n                        'margin-bottom': this.settings.gutter + 'px'\n                    });\n                } else {\n                    this.$items.css('position', 'absolute');\n\n                    // Now position the items\n                    this.positionItems();\n\n                    // Update the positions as the items' heigthts change\n                    this.addListener(this.$items, 'resize', 'onItemResize');\n                }\n            }\n        }\n\n        this.completeRefreshCols();\n\n        // Resume container resize listening\n        this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n        this.onRefreshCols();\n    },\n\n    completeRefreshCols: function() {\n        // Delete the internal variable object\n        if (typeof this.refreshCols._ !== 'undefined') {\n            delete this.refreshCols._;\n        }\n\n        this._refreshingCols = false;\n\n        if (this._refreshColsAfterRefresh) {\n            var force = this._forceRefreshColsAfterRefresh;\n            this._refreshColsAfterRefresh = false;\n            this._forceRefreshColsAfterRefresh = false;\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.refreshCols(force);\n            }, this));\n        }\n    },\n\n    getItemWidth: function(colspan) {\n        return (this.colPctWidth * colspan);\n    },\n\n    getItemWidthCss: function(colspan) {\n        return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n    },\n\n    getItemWidthInPx: function(colspan) {\n        return this.getItemWidth(colspan) / 100 * this.$container.width() - this.colGutterDrop;\n    },\n\n    getItemLeftPosCss: function(position) {\n        return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n    },\n\n    getItemLeftPosInPx: function(position) {\n        return (this.getItemWidth(1) / 100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n    },\n\n    isSimpleLayout: function() {\n        this.isSimpleLayout._ = {};\n\n        for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n            if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                delete this.isSimpleLayout._;\n                return false;\n            }\n        }\n\n        delete this.isSimpleLayout._;\n        return true;\n    },\n\n    positionItems: function() {\n        this.positionItems._ = {};\n\n        this.positionItems._.colHeights = [];\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n            this.positionItems._.colHeights.push(0);\n        }\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n            this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n            this.positionItems._.affectedColHeights = [];\n\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n            }\n\n            this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n            if (this.positionItems._.top > 0) {\n                this.positionItems._.top += this.settings.gutter;\n            }\n\n            this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n            // Now add the new heights to those columns\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n            }\n        }\n\n        // Set the container height\n        this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n        delete this.positionItems._;\n    },\n\n    onItemResize: function(ev) {\n        this.onItemResize._ = {};\n\n        // Prevent this from bubbling up to the container, which has its own resize listener\n        ev.stopPropagation();\n\n        this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n        if (this.onItemResize._.item !== -1) {\n            // Update the height and reposition the items\n            this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n            if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                this.positionItems(false);\n            }\n        }\n\n        delete this.onItemResize._;\n    },\n\n    onRefreshCols: function() {\n        this.trigger('refreshCols');\n        this.settings.onRefreshCols();\n    }\n}, {\n    defaults: {\n        itemSelector: '.item',\n        cols: null,\n        maxCols: null,\n        minColWidth: 320,\n        gutter: 14,\n        fillMode: 'top',\n        colClass: 'col',\n        snapToGrid: null,\n\n        onRefreshCols: $.noop\n    }\n});\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend({\n    grid: null,\n    _: null,\n\n    init: function(grid) {\n        this.grid = grid;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        this._ = {};\n\n        // Loop through all possible colspans\n        for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n            this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n            // Loop through all the possible positions for this colspan,\n            // and find the one that is closest to the top\n\n            this._.tallestColHeightsByPosition = [];\n\n            for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                this._.colHeightsForPosition = [];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                }\n\n                this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n            }\n\n            // And the shortest position for this colspan is...\n            this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n            this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n            // Now log the colspan/position placement\n            this._.positions = prevPositions.slice(0);\n            this._.colspans = prevColspans.slice(0);\n            this._.colHeights = prevColHeights.slice(0);\n            this._.emptySpace = prevEmptySpace;\n\n            this._.positions.push(this._.position);\n            this._.colspans.push(this._.colspan);\n\n            // Add the new heights to those columns\n            this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n            this._.endingCol = this._.position + this._.colspan - 1;\n\n            for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n            }\n\n            // If this is the last item, create the layout\n            if (item === this.grid.items.length - 1) {\n                this.grid.layouts.push({\n                    positions: this._.positions,\n                    colspans: this._.colspans,\n                    colHeights: this._.colHeights,\n                    emptySpace: this._.emptySpace\n                });\n            } else {\n                // Dive deeper\n                this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n            }\n        }\n\n        delete this._;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Remove inner-word punctuation\n        handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        handle = handle.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        handle = Craft.asciiString(handle);\n\n        if (!this.settings.allowNonAlphaStart) {\n            // Handle must start with a letter\n            handle = handle.replace(/^[^a-z]+/, '');\n        }\n\n        // Get the \"words\"\n        var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n        handle = '';\n\n        if (Craft.handleCasing === 'snake') {\n            return words.join('_');\n        }\n\n        // Make it camelCase\n        for (let i = 0; i < words.length; i++) {\n            if (Craft.handleCasing !== 'pascal' && i === 0) {\n                handle += words[i];\n            } else {\n                handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n            }\n        }\n\n        return handle;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend({\n    $container: null,\n    progressBar: null,\n    uploader: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ImageUpload.defaults);\n        this.initImageUpload();\n    },\n\n    initImageUpload: function() {\n        this.$container = $(this.settings.containerSelector);\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl(this.settings.uploadAction),\n            formData: this.settings.postParameters,\n            fileInput: this.$container.find(this.settings.fileInputSelector),\n            paramName: this.settings.uploadParamName\n        };\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        options.events = {};\n        options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n        options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n        options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n        options.events.fileuploadfail = $.proxy(this, '_onUploadError');\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        this.initButtons();\n    },\n\n    initButtons: function() {\n        this.$container.find(this.settings.uploadButtonSelector).on('click', $.proxy(function(ev) {\n            this.$container.find(this.settings.fileInputSelector).trigger('click');\n        }, this));\n\n        this.$container.find(this.settings.deleteButtonSelector).on('click', $.proxy(function(ev) {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this.refreshImage(response);\n                    }\n                }, this));\n            }\n        }, this));\n    },\n\n    refreshImage: function(response) {\n        $(this.settings.containerSelector).replaceWith(response.html);\n        this.settings.onAfterRefreshImage(response);\n        this.initImageUpload();\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function(event) {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var html = $(data.result.html);\n            this.refreshImage(data.result);\n        }\n\n        // Last file\n        if (this.uploader.isLastUpload()) {\n            this.progressBar.hideProgressBar();\n            this.$container.removeClass('uploading');\n        }\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadError: function(event, data) {\n        if (data.jqXHR.responseJSON.error) {\n            alert(data.jqXHR.responseJSON.error);\n            this.$container.removeClass('uploading');\n            this.progressBar.hideProgressBar();\n            this.progressBar.resetProgressBar();\n        }\n    }\n}, {\n    defaults: {\n        postParameters: {},\n        uploadAction: \"\",\n        deleteAction: \"\",\n        fileInputSelector: \"\",\n\n        onAfterRefreshImage: $.noop,\n        containerSelector: null,\n\n        uploadButtonSelector: null,\n        deleteButtonSelector: null,\n\n        uploadParamName: 'files'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend({\n    $icon: null,\n    content: null,\n    hud: null,\n\n    init: function(icon) {\n        this.$icon = $(icon);\n\n        if (this.$icon.data('infoicon')) {\n            Garnish.log('Double-instantiating an info icon on an element');\n            this.content = this.$icon.data('infoicon').content;\n            this.$icon.data('infoicon').destroy();\n        } else {\n            this.content = this.$icon.html();\n            this.$icon\n                .html('')\n                .attr({\n                    tabindex: 0,\n                    'role': 'button',\n                    'aria-label': Craft.t('app', 'Information'),\n                });\n        }\n\n        this.$icon.data('infoicon', this);\n\n        if (this.$icon[0].previousSibling && this.$icon[0].previousSibling.nodeType === Node.TEXT_NODE) {\n            // Make sure it's in a .nowrap container\n            const $parent = this.$icon.parent();\n            if (!$parent.hasClass('nowrap')) {\n                // Find the last word in the text\n                const m = this.$icon[0].previousSibling.nodeValue.match(/[^\\s\\-]+\\s*$/);\n                if (m) {\n                    this.$icon[0].previousSibling.nodeValue = this.$icon[0].previousSibling.nodeValue.substr(0, m.index);\n                    $('<span/>', {\n                        class: 'nowrap',\n                        html: m[0].replace(/\\s+$/, '') + ' ',\n                    })\n                        .insertAfter(this.$icon[0].previousSibling)\n                        .append(this.$icon);\n                }\n            }\n        }\n\n        this.addListener(this.$icon, 'click', ev => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.showHud();\n        });\n\n        this.addListener(this.$icon, 'keydown', ev => {\n            if (!(this.hud && this.hud.showing) && [Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.showHud();\n            }\n        });\n    },\n\n    showHud: function(ev) {\n        if (!this.hud) {\n            this.hud = new Garnish.HUD(this.$icon, this.content, {\n                hudClass: 'hud info-hud',\n                closeOtherHUDs: false,\n                onShow: () => {\n                    Garnish.shortcutManager.registerShortcut(Garnish.SPACE_KEY, () => {\n                        this.hud.hide();\n                    });\n                },\n            });\n            Craft.initUiElements(this.hud.$body);\n        } else {\n            this.hud.show();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend({\n    settings: null,\n    $outerContainer: null,\n    $innerContainer: null,\n    $input: null,\n    small: false,\n    on: false,\n    indeterminate: false,\n    dragger: null,\n\n    dragStartMargin: null,\n\n    init: function(outerContainer, settings) {\n        this.$outerContainer = $(outerContainer);\n\n        // Is this already a lightswitch?\n        if (this.$outerContainer.data('lightswitch')) {\n            Garnish.log('Double-instantiating a lightswitch on an element');\n            this.$outerContainer.data('lightswitch').destroy();\n        }\n\n        this.$outerContainer.data('lightswitch', this);\n\n        this.small = this.$outerContainer.hasClass('small');\n\n        this.setSettings(settings, Craft.LightSwitch.defaults);\n\n        this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n        this.$input = this.$outerContainer.find('input:first');\n\n        // If the input is disabled, go no further\n        if (this.$input.prop('disabled')) {\n            return;\n        }\n\n        this.on = this.$outerContainer.hasClass('on');\n        this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n        this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n        this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n        this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n            axis: Garnish.X_AXIS,\n            ignoreHandleSelector: null,\n            onDragStart: $.proxy(this, '_onDragStart'),\n            onDrag: $.proxy(this, '_onDrag'),\n            onDragStop: $.proxy(this, '_onDragStop')\n        });\n\n        // Does the input have on/off labels?\n        let $wrapper = this.$outerContainer.parent('.lightswitch-inner-container');\n        if ($wrapper.length) {\n            this.addListener($wrapper.children('span[data-toggle=\"off\"]'), 'click', this.turnOff);\n            this.addListener($wrapper.children('span[data-toggle=\"on\"]'), 'click', this.turnOn);\n        }\n    },\n\n    turnOn: function(muteEvent) {\n        var changed = !this.on;\n\n        this.on = true;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n        this.$input.val(this.settings.value);\n        this.$outerContainer.addClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'true');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnOff: function(muteEvent) {\n        var changed = this.on || this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin();\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n        this.$input.val('');\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'false');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnIndeterminate: function(muteEvent) {\n        var changed = !this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = true;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n        this.$input.val(this.settings.indeterminateValue);\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.addClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'mixed');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    toggle: function() {\n        if (this.indeterminate || !this.on) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    onChange: function() {\n        this.trigger('change');\n        this.settings.onChange(this.on);\n        this.$outerContainer.trigger('change');\n    },\n\n    _onMouseDown: function() {\n        this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n    },\n\n    _onMouseUp: function() {\n        this.removeListener(Garnish.$doc, 'mouseup');\n\n        // Was this a click?\n        if (!this.dragger.dragging) {\n            this.toggle();\n        }\n    },\n\n    _onKeyDown: function(event) {\n        switch (event.keyCode) {\n            case Garnish.SPACE_KEY: {\n                this.toggle();\n                event.preventDefault();\n                break;\n            }\n            case Garnish.RIGHT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOn();\n                } else {\n                    this.turnOff();\n                }\n\n                event.preventDefault();\n                break;\n            }\n            case Garnish.LEFT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOff();\n                } else {\n                    this.turnOn();\n                }\n\n                event.preventDefault();\n                break;\n            }\n        }\n    },\n\n    _getMargin: function() {\n        return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n    },\n\n    _onDragStart: function() {\n        this.$outerContainer.addClass('dragging');\n        this.dragStartMargin = this._getMargin();\n    },\n\n    _onDrag: function() {\n        var margin;\n\n        if (Craft.orientation === 'ltr') {\n            margin = this.dragStartMargin + this.dragger.mouseDistX;\n        } else {\n            margin = this.dragStartMargin - this.dragger.mouseDistX;\n        }\n\n        if (margin < this._getOffMargin()) {\n            margin = this._getOffMargin();\n        } else if (margin > 0) {\n            margin = 0;\n        }\n\n        this.$innerContainer.css('margin-' + Craft.left, margin);\n    },\n\n    _onDragStop: function() {\n        var margin = this._getMargin();\n        console.log(margin);\n\n        if (margin > (this._getOffMargin() / 2)) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    _onSettle: function() {\n        this.$outerContainer.removeClass('dragging');\n    },\n\n    destroy: function() {\n        this.base();\n        this.dragger.destroy();\n    },\n\n    _getOffMargin: function() {\n        return (this.small ? -10 : -12);\n    }\n}, {\n    animationDuration: 100,\n    defaults: {\n        value: '1',\n        indeterminateValue: '-',\n        onChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend({\n    $extraFields: null,\n    $trigger: null,\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $iframe: null,\n    $fieldPlaceholder: null,\n\n    previewUrl: null,\n    token: null,\n    basePostData: null,\n    inPreviewMode: false,\n    fields: null,\n    lastPostData: null,\n    updateIframeInterval: null,\n    loading: false,\n    checkAgain: false,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _slideInOnIframeLoad: false,\n    _handleSuccessProxy: null,\n    _handleErrorProxy: null,\n    _forceUpdateIframeProxy: null,\n\n    _scrollX: null,\n    _scrollY: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.LivePreview.defaults);\n\n        // Should preview requests use a specific URL?\n        // This won't affect how the request gets routed (the action param will override it),\n        // but it will allow the templates to change behavior based on the request URI.\n        if (this.settings.previewUrl) {\n            this.previewUrl = this.settings.previewUrl;\n        } else {\n            this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n        }\n\n        // Load the preview over SSL if the current request is\n        if (document.location.protocol === 'https:') {\n            this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n        }\n\n        // Set the base post data\n        this.basePostData = $.extend({}, this.settings.previewParams);\n\n        this._handleSuccessProxy = $.proxy(this, 'handleSuccess');\n        this._handleErrorProxy = $.proxy(this, 'handleError');\n        this._forceUpdateIframeProxy = $.proxy(this, 'forceUpdateIframe');\n\n        // Find the DOM elements\n        this.$extraFields = $(this.settings.extraFields);\n        this.$trigger = $(this.settings.trigger);\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n        // Event Listeners\n        this.addListener(this.$trigger, 'activate', 'toggle');\n\n        Craft.cp.on('beforeSaveShortcut', $.proxy(function() {\n            if (this.inPreviewMode) {\n                this.moveFieldsBack();\n            }\n        }, this));\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n            inPx = Craft.LivePreview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    toggle: function() {\n        if (this.inPreviewMode) {\n            this.exit();\n        } else {\n            this.enter();\n        }\n    },\n\n    enter: function() {\n        if (this.inPreviewMode) {\n            return;\n        }\n\n        if (!this.token) {\n            this.createToken();\n            return;\n        }\n\n        this.trigger('beforeEnter');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            let $saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($editorHeader);\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: $.proxy(this, '_onDragStart'),\n                onDrag: $.proxy(this, '_onDrag'),\n                onDragStop: $.proxy(this, '_onDragStop')\n            });\n\n            this.addListener($closeBtn, 'click', 'exit');\n            this.addListener($saveBtn, 'click', 'save');\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Move all the fields into the editor rather than copying them\n        // so any JS that's referencing the elements won't break.\n        this.fields = [];\n        var $fields = $(this.settings.fields);\n\n        for (var i = 0; i < $fields.length; i++) {\n            var $field = $($fields[i]),\n                $clone = this._getClone($field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter($field);\n            $field.detach();\n            this.$fieldPlaceholder.replaceWith($clone);\n            $field.appendTo(this.$editor);\n\n            this.fields.push({\n                $field: $field,\n                $clone: $clone\n            });\n        }\n\n        if (this.updateIframe()) {\n            this._slideInOnIframeLoad = true;\n        } else {\n            this.slideIn();\n        }\n\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = true;\n        this.trigger('enter');\n    },\n\n    createToken: function() {\n        Craft.postActionRequest('live-preview/create-token', {\n            previewAction: this.settings.previewAction\n        }, $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                this.token = response.token;\n                this.enter();\n            }\n        }, this));\n    },\n\n    save: function() {\n        Craft.cp.submitPrimaryForm();\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', $.proxy(function() {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        }, this));\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', $.proxy(function() {\n            this.updateIframeInterval = setInterval($.proxy(this, 'updateIframe'), 1000);\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.exit();\n                }\n            });\n        }, this));\n    },\n\n    exit: function() {\n        if (!this.inPreviewMode) {\n            return;\n        }\n\n        this.trigger('beforeExit');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        if (this.updateIframeInterval) {\n            clearInterval(this.updateIframeInterval);\n        }\n\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', $.proxy(function() {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        }, this));\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', $.proxy(function() {\n            this.$previewContainer.hide();\n        }, this));\n\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = false;\n        this.trigger('exit');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n    },\n\n    updateIframe: function(force) {\n        if (force) {\n            this.lastPostData = null;\n        }\n\n        if (!this.inPreviewMode) {\n            return false;\n        }\n\n        if (this.loading) {\n            this.checkAgain = true;\n            return false;\n        }\n\n        // Has the post data changed?\n        var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n        if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n            this.lastPostData = postData;\n            this.loading = true;\n\n            var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n            this._scrollX = $doc ? $doc.scrollLeft() : 0;\n            this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n            $.ajax({\n                url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                method: 'POST',\n                data: $.extend({}, postData, this.basePostData),\n                headers: {\n                    'X-Craft-Token': this.token\n                },\n                xhrFields: {\n                    withCredentials: true\n                },\n                crossDomain: true,\n                success: this._handleSuccessProxy,\n                error: this._handleErrorProxy\n            });\n\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    forceUpdateIframe: function() {\n        return this.updateIframe(true);\n    },\n\n    handleSuccess: function(data) {\n        var html = data +\n            '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n        // Create a new iframe\n        var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n        if (this.$iframe) {\n            $iframe.insertBefore(this.$iframe);\n        } else {\n            $iframe.appendTo(this.$iframeContainer);\n        }\n\n        this.addListener($iframe, 'load', function() {\n            if (this.$iframe) {\n                this.$iframe.remove();\n            }\n            this.$iframe = $iframe;\n\n            if (this._slideInOnIframeLoad) {\n                this.slideIn();\n                this._slideInOnIframeLoad = false;\n            }\n\n            this.removeListener($iframe, 'load');\n        });\n\n        Garnish.requestAnimationFrame($.proxy(function() {\n            $iframe[0].contentWindow.document.open();\n            $iframe[0].contentWindow.document.write(html);\n            $iframe[0].contentWindow.document.close();\n            this.onResponse();\n        }, this));\n    },\n\n    handleError: function() {\n        this.onResponse();\n    },\n\n    onResponse: function() {\n        this.loading = false;\n\n        if (this.checkAgain) {\n            this.checkAgain = false;\n            this.updateIframe();\n        }\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n\n    defaults: {\n        trigger: '.livepreviewbtn',\n        fields: null,\n        extraFields: null,\n        previewUrl: null,\n        previewAction: null,\n        previewParams: {}\n    }\n});\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend({\n    $passwordWrapper: null,\n    $passwordInput: null,\n    $textInput: null,\n    $currentInput: null,\n\n    $showPasswordToggle: null,\n    showingPassword: null,\n\n    init: function(passwordInput, settings) {\n        this.$passwordInput = $(passwordInput);\n        this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n        this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n        // Is this already a password input?\n        if (this.$passwordInput.data('passwordInput')) {\n            Garnish.log('Double-instantiating a password input on an element');\n            this.$passwordInput.data('passwordInput').destroy();\n        }\n\n        this.$passwordInput.data('passwordInput', this);\n\n        this.$showPasswordToggle = $('<button type=\"button\" class=\"invisible\" />');\n        this.$showPasswordToggle.addClass('password-toggle');\n        this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n        this.initInputFocusEvents(this.$passwordInput);\n        this.addListener(this.$showPasswordToggle, 'click', 'onClick');\n        this.hidePassword();\n    },\n\n    setCurrentInput: function($input) {\n        if (this.$currentInput) {\n            // Swap the inputs, while preventing the focus animation\n            $input.insertAfter(this.$currentInput);\n            this.$currentInput.detach();\n            $input.trigger('focus');\n\n            // Restore the input value\n            $input.val(this.$currentInput.val());\n        }\n\n        this.$currentInput = $input;\n\n        this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n    },\n\n    updateToggleLabel: function(label) {\n        this.$showPasswordToggle.text(label);\n    },\n\n    initInputFocusEvents: function($input) {\n        this.addListener($input, 'focus', function() {\n            this.$passwordWrapper.addClass('focus');\n        });\n        this.addListener($input, 'blur', function() {\n            this.$passwordWrapper.removeClass('focus');\n        });\n    },\n\n    showPassword: function() {\n        if (this.showingPassword) {\n            return;\n        }\n\n        if (!this.$textInput) {\n            this.$textInput = this.$passwordInput.clone(true);\n            this.$textInput.attr('type', 'text');\n            this.initInputFocusEvents(this.$textInput);\n        }\n\n        this.setCurrentInput(this.$textInput);\n        this.updateToggleLabel(Craft.t('app', 'Hide'));\n        this.showingPassword = true;\n    },\n\n    hidePassword: function() {\n        // showingPassword could be null, which is acceptable\n        if (this.showingPassword === false) {\n            return;\n        }\n\n        this.setCurrentInput(this.$passwordInput);\n        this.updateToggleLabel(Craft.t('app', 'Show'));\n        this.showingPassword = false;\n\n        // Alt key temporarily shows the password\n        this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n    },\n\n    togglePassword: function() {\n        if (this.showingPassword) {\n            this.hidePassword();\n        } else {\n            this.showPassword();\n        }\n\n        this.settings.onToggleInput(this.$currentInput);\n    },\n\n    onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n            this.showPassword();\n            this.$showPasswordToggle.addClass('invisible');\n            this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n        }\n    },\n\n    onKeyUp: function(ev) {\n        ev.preventDefault();\n\n        if (ev.keyCode === Garnish.ALT_KEY) {\n            this.hidePassword();\n            this.$showPasswordToggle.removeClass('invisible');\n        }\n    },\n\n    onInputChange: function() {\n        if (this.$currentInput.val()) {\n            this.$showPasswordToggle.removeClass('invisible');\n        } else {\n            this.$showPasswordToggle.addClass('invisible');\n        }\n    },\n\n    onClick: function(ev) {\n        if (this.$currentInput[0].setSelectionRange) {\n            var selectionStart = this.$currentInput[0].selectionStart,\n                selectionEnd = this.$currentInput[0].selectionEnd;\n\n            this.togglePassword();\n            this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n        } else {\n            this.togglePassword();\n        }\n    }\n}, {\n    defaults: {\n        onToggleInput: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend({\n    draftEditor: null,\n\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $spinner: null,\n    $statusIcon: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $previewHeader: null,\n    $targetBtn: null,\n    $targetMenu: null,\n    $deviceTypeContainer: null,\n    $orientationBtn: null,\n    $deviceMask: null,\n    $devicePreviewContainer: null,\n    $iframe: null,\n    iframeLoaded: false,\n    $tempInput: null,\n    $fieldPlaceholder: null,\n\n    isActive: false,\n    isVisible: false,\n    activeTarget: 0,\n\n    isDeviceUpdating: false,\n    deviceAnimationTimeout: null,\n    currentDeviceType: 'desktop',\n    deviceOrientation: null,\n    deviceWidth: '',\n    deviceHeight: '',\n    deviceMaskDimensions: {\n        phone: {\n            width: 375,\n            height: 753\n        },\n        tablet: {\n            width: 768,\n            height: 1110\n        }\n    },\n\n    draftId: null,\n    url: null,\n    fields: null,\n\n    iframeHeight: null,\n    scrollTop: null,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _updateIframeProxy: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(draftEditor) {\n        this.draftEditor = draftEditor;\n\n        this._updateIframeProxy = $.proxy(this, 'updateIframe');\n\n        this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.Preview.minEditorWidthInPx) {\n            inPx = Craft.Preview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    open: function() {\n        if (this.isActive) {\n            return;\n        }\n\n        this.isActive = true;\n        this.trigger('beforeOpen');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n            this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n            if (Craft.Pro) {\n                this.$previewHeader = $('<header/>', {'class': 'lp-preview-header'}).appendTo(this.$previewContainer);\n\n                // Preview targets\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    this.$targetBtn = $('<button/>', {\n                        type: 'button',\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                    }).appendTo(this.$previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    const $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    let $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: option => {\n                            this.switchTarget($(option).data('target'));\n                        },\n                    });\n\n                    $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                }\n\n                // Device type buttons\n                this.$deviceTypeContainer = $('<div/>', {\n                    class: 'btngroup lp-device-type',\n                    role: 'listbox',\n                    'aria-label': Craft.t('app', 'Device type'),\n                    tabindex: '0',\n                }).appendTo(this.$previewHeader);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--desktop active',\n                    title: Craft.t('app', 'Desktop'),\n                    'aria-label': Craft.t('app', 'Desktop'),\n                    'aria-selected': 'true',\n                    tabindex: '-1',\n                    data: {\n                        width: '',\n                        height: '',\n                        deviceType: 'desktop'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--tablet',\n                    title: Craft.t('app', 'Tablet'),\n                    'aria-label': Craft.t('app', 'Tablet'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 768,\n                        height: 1024,\n                        deviceType: 'tablet'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--phone',\n                    title: Craft.t('app', 'Mobile'),\n                    'aria-label': Craft.t('app', 'Mobile'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 375,\n                        height: 667,\n                        deviceType: 'phone'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n\n                $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n\n                // Orientation toggle\n                this.$orientationBtn = $('<button/>', {\n                    type: 'button',\n                    'class': 'btn disabled',\n                    'data-icon': 'refresh',\n                    disabled: '',\n                    'aria-hidden': '',\n                    'text': Craft.t('app', 'Rotate')\n                }).appendTo(this.$previewHeader);\n                this.addListener(this.$orientationBtn, 'click', 'switchOrientation');\n\n                // Get the last stored orientation\n                this.deviceOrientation = Craft.getLocalStorage('LivePreview.orientation');\n\n                // Device type button click handler\n                this.addListener($('.btn', this.$deviceTypeContainer), 'click', 'switchDeviceType');\n\n                // Device mask\n                this.$deviceMask = $('<div/>', {\n                    'class': 'lp-device-mask'\n                });\n            }\n\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n            if (this.$deviceMask) {\n                this.$iframeContainer.append(this.$deviceMask);\n            }\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this),\n            });\n\n            this.addListener($closeBtn, 'click', 'close');\n            this.addListener(this.$statusIcon, 'click', () => {\n                this.draftEditor.showStatusHud(this.$statusIcon);\n            });\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Find the fields, excluding nested fields\n        this.fields = [];\n        var $fields = $('#content .field').not($('#content .field .field'));\n\n        if ($fields.length) {\n            // Insert our temporary input before the first field so we know where to swap in the serialized form values\n            this.$tempInput.insertBefore($fields.get(0));\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            for (let i = 0; i < $fields.length; i++) {\n                let $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n        }\n\n        this.updateIframe();\n\n        this.draftEditor.on('update', this._updateIframeProxy);\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.trigger('open');\n    },\n\n    switchTarget: function(i) {\n        this.activeTarget = i;\n        this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n        this.$targetMenu.find('a.sel').removeClass('sel');\n        this.$targetMenu.find('a').eq(i).addClass('sel');\n        this.updateIframe(true);\n        this.trigger('switchTarget', {\n            previewTarget: this.draftEditor.settings.previewTargets[i],\n        });\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        if (!this.isActive || this.isVisible) {\n            return;\n        }\n\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.close();\n                }\n            });\n        });\n\n        this.isVisible = true;\n    },\n\n    close: function() {\n        if (!this.isActive || !this.isVisible) {\n            return;\n        }\n\n        this.trigger('beforeClose');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        // Remove our temporary input and move the preview fields back into place\n        this.$tempInput.detach();\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n            this.resetDevicePreview();\n        });\n\n        this.draftEditor.off('update', this._updateIframeProxy);\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.isActive = false;\n        this.isVisible = false;\n        this.trigger('close');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n        if (this._devicePreviewIsActive()) {\n            this.updateDevicePreview();\n        }\n    },\n\n    _useIframeResizer: function() {\n        return Craft.previewIframeResizerOptions !== false;\n    },\n\n    updateIframe: function(resetScroll) {\n        if (!this.isActive) {\n            return false;\n        }\n\n        // Ignore non-boolean resetScroll values\n        resetScroll = resetScroll === true;\n\n        var target = this.draftEditor.settings.previewTargets[this.activeTarget];\n        var refresh = !!(\n            this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n            !this.$iframe ||\n            resetScroll ||\n            typeof target.refresh === 'undefined' ||\n            target.refresh\n        );\n\n        this.trigger('beforeUpdateIframe', {\n            previewTarget: target,\n            resetScroll: resetScroll,\n            refresh: refresh,\n        });\n\n        // If this is an existing preview target, make sure it wants to be refreshed automatically\n        if (!refresh) {\n            this.slideIn();\n            return;\n        }\n\n        this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(url => {\n            // Maintain the current scroll position?\n            let sameHost;\n            if (resetScroll) {\n                this.scrollTop = null;\n            } else if (this.iframeLoaded && this.$iframe) {\n                if (this._useIframeResizer()) {\n                    this.iframeHeight = this.$iframe.height();\n                    this.scrollTop = this.$iframeContainer.scrollTop();\n                } else {\n                    sameHost = Craft.isSameHost(url);\n                    if (sameHost && this.$iframe[0].contentWindow) {\n                        this.scrollTop = $(this.$iframe[0].contentWindow.document).scrollTop();\n                    }\n                }\n            }\n\n            this.iframeLoaded = false;\n\n            var $iframe = $('<iframe/>', {\n                'class': 'lp-preview',\n                frameborder: 0,\n                src: url,\n            });\n\n            if (this.$iframe) {\n                this.$iframe.replaceWith($iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            // If we’re on tablet/phone then wrap the iframe in our own container\n            // so we can keep all the iFrameResizer() stuff working\n            if (this._devicePreviewIsActive()) {\n                if (!this.$devicePreviewContainer) {\n                    this.$devicePreviewContainer = $('<div/>', {\n                        'class': 'lp-device-preview-container'\n                    });\n                    $iframe.wrap('<div class=\"lp-device-preview-container\"></div>');\n                    this.$devicePreviewContainer = this.$iframeContainer.find('.lp-device-preview-container');\n                }\n            }\n\n            // Keep the iframe height consistent with its content\n            if (this._useIframeResizer()) {\n                if (!resetScroll && this.iframeHeight !== null) {\n                    $iframe.height(this.iframeHeight);\n                    this.$iframeContainer.scrollTop(this.scrollTop);\n                }\n\n                iFrameResize($.extend({\n                    checkOrigin: false,\n                    // Allow iframe scrolling until we've successfully initialized the resizer\n                    scrolling: true,\n                    onInit: iframe => {\n                        this.iframeLoaded = true;\n                        this.iframeHeight = null;\n                        this.scrollTop = null;\n                        iframe.scrolling = 'no';\n                    },\n                }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n            } else {\n                $iframe.on('load', () => {\n                    this.iframeLoaded = true;\n                    if (!resetScroll && sameHost && this.scrollTop !== null) {\n                        $($iframe[0].contentWindow.document).scrollTop(this.scrollTop);\n                    }\n                });\n            }\n\n            this.url = url;\n            this.$iframe = $iframe;\n\n            if (this._devicePreviewIsActive()) {\n                this.updateDevicePreview();\n            }\n\n            this.trigger('afterUpdateIframe', {\n                previewTarget: this.draftEditor.settings.previewTargets[this.activeTarget],\n                $iframe: this.$iframe,\n            });\n\n            this.slideIn();\n        });\n    },\n\n    _devicePreviewIsActive: function() {\n        return this.currentDeviceType !== 'desktop';\n    },\n\n    switchDeviceType: function(ev) {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n\n        const $btn = $(ev.target);\n        const newDeviceType = $btn.data('deviceType');\n\n        // Bail if we’re just smashing the same button\n        if (newDeviceType === this.currentDeviceType) {\n            return false;\n        }\n\n        // Store new device type data\n        this.currentDeviceType = newDeviceType;\n        this.deviceWidth = $btn.data('width');\n        this.deviceHeight = $btn.data('height');\n\n        // Set the active state on the button\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n\n        $btn\n            .addClass('active')\n            .attr('aria-selected', 'true');\n\n        // Update or reset\n        if (this.currentDeviceType === 'desktop') {\n            this.resetDevicePreview();\n        } else {\n            this.$iframeContainer.addClass('lp-iframe-container--updating');\n            this.updateIframe();\n            this.updateDevicePreview();\n        }\n    },\n\n    switchOrientation: function()\n    {\n        if (this.isDeviceUpdating || !this._devicePreviewIsActive()) {\n            return false;\n        }\n\n        // Switch to whichever orientation is currently not stored\n        if (!this.deviceOrientation || this.deviceOrientation === 'portrait') {\n            this.deviceOrientation = 'landscape';\n        } else {\n            this.deviceOrientation = 'portrait';\n        }\n\n        // Store the new one\n        Craft.setLocalStorage('LivePreview.orientation', this.deviceOrientation);\n\n        // Allow the animation to take place\n        this.$iframeContainer.addClass('lp-iframe-container--animating');\n\n        // Update the device preview\n        this.updateDevicePreview();\n    },\n\n    updateDevicePreview: function()\n    {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.isDeviceUpdating = true;\n\n        // Enable the orientation button\n        this.$orientationBtn\n            .removeClass('disabled')\n            .removeAttr('disabled')\n            .removeAttr('aria-hidden');\n\n        // Trigger the resized css mods\n        this.$iframeContainer.addClass('lp-iframe-container--has-device-preview');\n\n        // Add the tablet class if needed\n        if (this.currentDeviceType === 'tablet') {\n            this.$iframeContainer.addClass('lp-iframe-container--tablet');\n        } else {\n            this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n        }\n\n        // Figure out the best zoom\n        let hZoom = 1;\n        let wZoom = 1;\n        let zoom = 1;\n        let previewHeight = (this.$previewContainer.height() - 50) - 48; // 50px for the header bar and 24px clearance\n        let previewWidth = this.$previewContainer.width() - 48;\n        let maskHeight = this.deviceMaskDimensions[this.currentDeviceType].height;\n        let maskWidth = this.deviceMaskDimensions[this.currentDeviceType].width;\n\n        if (this.deviceOrientation === 'landscape') {\n            if (previewWidth < maskHeight) {\n                hZoom = previewWidth / maskHeight;\n            }\n            if (previewHeight < maskWidth) {\n                wZoom = previewHeight / maskWidth;\n            }\n        } else {\n            if (previewHeight < maskHeight) {\n                hZoom = previewHeight / maskHeight;\n            }\n            if (previewWidth < maskWidth) {\n                wZoom = previewWidth / maskWidth;\n            }\n        }\n\n        zoom = hZoom;\n        if (wZoom < hZoom) {\n            zoom = wZoom;\n        }\n\n        // Figure out the css values\n        const translate = -((100/zoom)/2);\n        const rotationDeg = this.deviceOrientation === 'landscape' ? '-90deg' : '0deg';\n\n        // Apply first to the device mask\n        this.$deviceMask.css({\n            width: this.deviceMaskDimensions[this.currentDeviceType].width + 'px',\n            height: this.deviceMaskDimensions[this.currentDeviceType].height + 'px',\n            transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%) rotate('+rotationDeg+')'\n        });\n\n        // After the animation duration we can update the iframe sizes and show it\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.deviceAnimationTimeout = setTimeout($.proxy(function() {\n\n            // Then make the size change to the preview container\n            if (this.deviceOrientation === 'landscape') {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceHeight + 'px',\n                    height: this.deviceWidth + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: 0,\n                    marginLeft: '-' + (12*zoom) + 'px'\n                });\n            } else {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceWidth + 'px',\n                    height: this.deviceHeight + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: '-' + (12*zoom) + 'px',\n                    marginLeft: 0\n                });\n            }\n\n            // Remove the animating class and show the iframe\n            this.$iframeContainer.removeClass('lp-iframe-container--animating');\n            this.$iframeContainer.removeClass('lp-iframe-container--updating');\n            this.isDeviceUpdating = false;\n\n        }, this), 300);\n    },\n\n    resetDevicePreview: function()\n    {\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.currentDeviceType = 'desktop';\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n        this.$deviceTypeContainer.find('.lp-device-type-btn--desktop')\n            .addClass('active')\n            .attr('aria-selected', 'true');\n        this.$orientationBtn\n            .addClass('disabled')\n            .attr('disabled', '')\n            .attr('aria-hidden', '');\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n        this.$iframeContainer.removeClass('lp-iframe-container--has-device-preview');\n        this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n\n        // Flat out remove the iframe and let it get regenerated\n        if (this.$devicePreviewContainer) {\n            // If using iFrameResizer then remove the listeners first so we don’t get zombie instances\n            if (this._useIframeResizer()) {\n                this.$iframe[0].iFrameResizer.removeListeners();\n            }\n            this.$devicePreviewContainer.detach();\n            this.$devicePreviewContainer = null;\n            this.$iframe = null;\n            this.updateIframe();\n        }\n\n        this.isDeviceUpdating = false;\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        // Disable anything with a name attribute\n        $clone.find('[name]').prop('disabled', true);\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend({\n    assetId: null,\n    $spinner: null,\n    elementSelect: null,\n    type: null,\n    loaded: null,\n    requestId: 0,\n\n    /**\n     * Initialize the preview file modal.\n     * @returns {*|void}\n     */\n    init: function(assetId, elementSelect, settings) {\n        settings = $.extend(this.defaultSettings, settings);\n\n        settings.onHide = this._onHide.bind(this);\n\n        if (Craft.PreviewFileModal.openInstance) {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            if (instance.assetId !== assetId) {\n                instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                instance.elementSelect = elementSelect;\n            }\n\n            return this.destroy();\n        }\n\n        Craft.PreviewFileModal.openInstance = this;\n        this.elementSelect = elementSelect;\n\n        this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n        this.base(this.$container, $.extend({\n            resizable: true\n        }, settings));\n\n        // Cut the flicker, just show the nice person the preview.\n        if (this.$container) {\n            this.$container.velocity('stop');\n            this.$container.show().css('opacity', 1);\n\n            this.$shade.velocity('stop');\n            this.$shade.show().css('opacity', 1);\n        }\n\n        this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n    },\n\n    /**\n     * When hiding, remove all traces and focus last focused element.\n     * @private\n     */\n    _onHide: function() {\n        Craft.PreviewFileModal.openInstance = null;\n        if (this.elementSelect) {\n            this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n        }\n\n        this.$shade.remove();\n\n        return this.destroy();\n    },\n\n    /**\n     * Disappear immediately forever.\n     * @returns {boolean}\n     */\n    selfDestruct: function() {\n        var instance = Craft.PreviewFileModal.openInstance;\n\n        instance.hide();\n        instance.$shade.remove();\n        instance.destroy();\n\n        Craft.PreviewFileModal.openInstance = null;\n\n        return true;\n    },\n\n    /**\n     * Load an asset, using starting width and height, if applicable\n     * @param assetId\n     * @param startingWidth\n     * @param startingHeight\n     */\n    loadAsset: function(assetId, startingWidth, startingHeight) {\n        this.assetId = assetId;\n\n        this.$container.empty();\n        this.loaded = false;\n\n        this.desiredHeight = null;\n        this.desiredWidth = null;\n\n        var containerHeight = Garnish.$win.height() * 0.66;\n        var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n        containerHeight = containerWidth / 4 * 3;\n\n        if (startingWidth && startingHeight) {\n            var ratio = startingWidth / startingHeight;\n            containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n            containerWidth = containerHeight * ratio;\n\n            // This might actually have put width over the viewport limits, so doublecheck\n            if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = containerWidth / ratio;\n            }\n        }\n\n        this._resizeContainer(containerWidth, containerHeight);\n\n        this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n        var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n            left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n        this.$spinner.css({left: left, top: top, position: 'absolute'});\n        this.requestId++;\n\n        Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, function(response, textStatus) {\n            this.$container.removeClass('loading');\n            this.$spinner.remove();\n            this.loaded = true;\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (response.requestId != this.requestId) {\n                        return;\n                    }\n\n                    if (!response.previewHtml) {\n                        this.$container.addClass('zilch');\n                        this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                        return;\n                    }\n\n                    this.$container.removeClass('zilch');\n                    this.$container.append(response.previewHtml);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n                } else {\n                    alert(response.error);\n\n                    this.hide();\n                }\n            }\n        }.bind(this));\n    },\n\n    /**\n     * Resize the container to specified dimensions\n     * @param containerWidth\n     * @param containerHeight\n     * @private\n     */\n    _resizeContainer: function(containerWidth, containerHeight) {\n        this.$container.css({\n            'width': containerWidth,\n            'min-width': containerWidth,\n            'max-width': containerWidth,\n            'height': containerHeight,\n            'min-height': containerHeight,\n            'max-height': containerHeight,\n            'top': (Garnish.$win.height() - containerHeight) / 2,\n            'left': (Garnish.$win.width() - containerWidth) / 2\n        });\n    }\n}, {\n    defaultSettings: {\n        startingWidth: null,\n        startingHeight: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend({\n    $progressBar: null,\n    $innerProgressBar: null,\n    $progressBarStatus: null,\n\n    _itemCount: 0,\n    _processedItemCount: 0,\n    _displaySteps: false,\n\n    init: function($element, displaySteps) {\n        if (displaySteps) {\n            this._displaySteps = true;\n        }\n\n        this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n        this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n        this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n        this.resetProgressBar();\n    },\n\n    /**\n     * Reset the progress bar\n     */\n    resetProgressBar: function() {\n        // Since setting the progress percentage implies that there is progress to be shown\n        // It removes the pending class - we must add it back.\n        this.setProgressPercentage(100);\n        this.$progressBar.addClass('pending');\n\n        // Reset all the counters\n        this.setItemCount(1);\n        this.setProcessedItemCount(0);\n        this.$progressBarStatus.html('');\n\n        if (this._displaySteps) {\n            this.$progressBar.addClass('has-status');\n        }\n    },\n\n    /**\n     * Fade to invisible, hide it using a class and reset opacity to visible\n     */\n    hideProgressBar: function() {\n        this.$progressBar.fadeTo('fast', 0.01, $.proxy(function() {\n            this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n        }, this));\n    },\n\n    showProgressBar: function() {\n        this.$progressBar.removeClass('hidden');\n        this.$progressBarStatus.removeClass('hidden');\n    },\n\n    setItemCount: function(count) {\n        this._itemCount = count;\n    },\n\n    incrementItemCount: function(count) {\n        this._itemCount += count;\n    },\n\n    setProcessedItemCount: function(count) {\n        this._processedItemCount = count;\n    },\n\n    incrementProcessedItemCount: function(count) {\n        this._processedItemCount += count;\n    },\n\n    updateProgressBar: function() {\n        // Only fools would allow accidental division by zero.\n        this._itemCount = Math.max(this._itemCount, 1);\n\n        var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n        this.setProgressPercentage(width);\n\n        if (this._displaySteps) {\n            this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n        }\n    },\n\n    setProgressPercentage: function(percentage, animate) {\n        if (percentage === 0) {\n            this.$progressBar.addClass('pending');\n        } else {\n            this.$progressBar.removeClass('pending');\n\n            if (animate) {\n                this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n            } else {\n                this.$innerProgressBar.velocity('stop').width(percentage + '%');\n            }\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, $.proxy(this, '_handleBatchPromptSelection'), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice: choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            } else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        } else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$promptButtons);\n        let $submitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'OK'),\n        }).appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelBtn, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', $.proxy(function() {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        }, this));\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n\n(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value: value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n\n/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', $.proxy(this, '_handleResize'));\n        this.addListener(this.$container, 'tapstart', $.proxy(this, '_handleTapStart'));\n        this.addListener(Garnish.$bod, 'tapmove', $.proxy(this, '_handleTapMove'));\n        this.addListener(Garnish.$bod, 'tapend', $.proxy(this, '_handleTapEnd'));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout($.proxy(function() {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, this), 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        } else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (((this.$graduations.width() / 2) + (position * -1)) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n        // Remove inner-word punctuation\n        sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        if (!Craft.allowUppercaseInSlug) {\n            sourceVal = sourceVal.toLowerCase();\n        }\n\n        if (Craft.limitAutoSlugsToAscii) {\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n        }\n\n        // Get the \"words\". Split on anything that is not alphanumeric.\n        // Reference: http://www.regular-expressions.info/unicode.html\n        var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n        if (words.length) {\n            return words.join(Craft.slugWordSeparator);\n        } else {\n            return '';\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend({\n    id: null,\n\n    $container: null,\n    state: null,\n    structureDrag: null,\n\n    /**\n     * Init\n     */\n    init: function(id, container, settings) {\n        this.id = id;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Structure.defaults);\n\n        // Is this already a structure?\n        if (this.$container.data('structure')) {\n            Garnish.log('Double-instantiating a structure on an element');\n            this.$container.data('structure').destroy();\n        }\n\n        this.$container.data('structure', this);\n\n        this.state = {};\n\n        if (this.settings.storageKey) {\n            $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n        }\n\n        if (typeof this.state.collapsedElementIds === 'undefined') {\n            this.state.collapsedElementIds = [];\n        }\n\n        var $parents = this.$container.find('ul').prev('.row');\n\n        for (var i = 0; i < $parents.length; i++) {\n            var $row = $($parents[i]),\n                $li = $row.parent(),\n                $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n            if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                $li.addClass('collapsed');\n            }\n\n            this.initToggle($toggle);\n        }\n\n        if (this.settings.sortable) {\n            this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n        }\n\n        if (this.settings.newChildUrl) {\n            this.initNewChildMenus(this.$container.find('.add'));\n        }\n    },\n\n    initToggle: function($toggle) {\n        $toggle.on('click', $.proxy(function(ev) {\n            var $li = $(ev.currentTarget).closest('li'),\n                elementId = $li.children('.row').find('.element:first').data('id'),\n                viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n            if ($li.hasClass('collapsed')) {\n                $li.removeClass('collapsed');\n\n                if (viewStateKey !== -1) {\n                    this.state.collapsedElementIds.splice(viewStateKey, 1);\n                }\n            } else {\n                $li.addClass('collapsed');\n\n                if (viewStateKey === -1) {\n                    this.state.collapsedElementIds.push(elementId);\n                }\n            }\n\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.state);\n            }\n        }, this));\n    },\n\n    initNewChildMenus: function($addBtns) {\n        this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n    },\n\n    onNewChildMenuClick: function(ev) {\n        var $btn = $(ev.currentTarget);\n\n        if (!$btn.data('menubtn')) {\n            var elementId = $btn.parent().children('.element').data('id'),\n                newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n            $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n            var menuBtn = new Garnish.MenuBtn($btn);\n            menuBtn.showMenu();\n        }\n    },\n\n    getIndent: function(level) {\n        return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n    },\n\n    addElement: function($element) {\n        var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n            $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n        $row.append($element);\n\n        if (this.settings.sortable) {\n            $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n            this.structureDrag.addItems($li);\n        }\n\n        if (this.settings.newChildUrl) {\n            var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n            this.initNewChildMenus($addBtn);\n        }\n\n        $row.css('margin-bottom', -30);\n        $row.velocity({'margin-bottom': 0}, 'fast');\n    },\n\n    removeElement: function($element) {\n        var $li = $element.parent().parent();\n\n        if (this.settings.sortable) {\n            this.structureDrag.removeItems($li);\n        }\n\n        var $parentUl;\n\n        if (!$li.siblings().length) {\n            $parentUl = $li.parent();\n        }\n\n        $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', $.proxy(function() {\n            $li.remove();\n\n            if (typeof $parentUl !== 'undefined') {\n                this._removeUl($parentUl);\n            }\n        }, this));\n    },\n\n    _removeUl: function($ul) {\n        $ul.siblings('.row').children('.toggle').remove();\n        $ul.remove();\n    }\n}, {\n    baseIndent: 8,\n    nestedIndent: 35,\n\n    defaults: {\n        storageKey: null,\n        sortable: false,\n        newChildUrl: null,\n        maxLevels: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend({\n    structure: null,\n    maxLevels: null,\n    draggeeLevel: null,\n\n    $helperLi: null,\n    $targets: null,\n    draggeeHeight: null,\n\n    init: function(structure, maxLevels) {\n        this.structure = structure;\n        this.maxLevels = maxLevels;\n\n        this.$insertion = $('<li class=\"draginsertion\"/>');\n\n        var $items = this.structure.$container.find('li');\n\n        this.base($items, {\n            handle: '.element:first, .move:first',\n            helper: $.proxy(this, 'getHelper')\n        });\n    },\n\n    getHelper: function($helper) {\n        this.$helperLi = $helper;\n        var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n        $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n        $helper.find('.move').removeAttr('title');\n        return $ul;\n    },\n\n    onDragStart: function() {\n        this.$targets = $();\n\n        // Recursively find each of the targets, in the order they appear to be in\n        this.findTargets(this.structure.$container);\n\n        // How deep does the rabbit hole go?\n        this.draggeeLevel = 0;\n        var $level = this.$draggee;\n        do {\n            this.draggeeLevel++;\n            $level = $level.find('> ul > li');\n        } while ($level.length);\n\n        // Collapse the draggee\n        this.draggeeHeight = this.$draggee.height();\n        this.$draggee.velocity({\n            height: 0\n        }, 'fast', $.proxy(function() {\n            this.$draggee.addClass('hidden');\n        }, this));\n        this.base();\n\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.cancelDrag();\n            }\n        });\n    },\n\n    findTargets: function($ul) {\n        var $lis = $ul.children().not(this.$draggee);\n\n        for (var i = 0; i < $lis.length; i++) {\n            var $li = $($lis[i]);\n            this.$targets = this.$targets.add($li.children('.row'));\n\n            if (!$li.hasClass('collapsed')) {\n                this.findTargets($li.children('ul'));\n            }\n        }\n    },\n\n    onDrag: function() {\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n            this.$insertion.remove();\n        }\n\n        // First let's find the closest target\n        this._.$closestTarget = null;\n        this._.closestTargetPos = null;\n        this._.closestTargetYDiff = null;\n        this._.closestTargetOffset = null;\n        this._.closestTargetHeight = null;\n\n        for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n            this._.$target = $(this.$targets[this._.i]);\n            this._.targetOffset = this._.$target.offset();\n            this._.targetHeight = this._.$target.outerHeight();\n            this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n            this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n            if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                this._.$closestTarget = this._.$target;\n                this._.closestTargetPos = this._.i;\n                this._.closestTargetYDiff = this._.targetYDiff;\n                this._.closestTargetOffset = this._.targetOffset;\n                this._.closestTargetHeight = this._.targetHeight;\n            } else {\n                // Getting colder\n                break;\n            }\n        }\n\n        if (!this._.$closestTarget) {\n            return;\n        }\n\n        // Are we hovering above the first row?\n        if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n            this.$insertion.prependTo(this.structure.$container);\n        } else {\n            this._.$closestTargetLi = this._.$closestTarget.parent();\n            this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n            // Is there a next row?\n            if (this._.closestTargetPos < this.$targets.length - 1) {\n                this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n            } else {\n                this._.$nextTargetLi = null;\n                this._.nextTargetLevel = null;\n            }\n\n            // Are we hovering between this row and the next one?\n            this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n            /**\n             * Scenario 1: Both rows have the same level.\n             *\n             *     * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                if (this._.hoveringBetweenRows) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                        // Position the insertion after the closest target\n                        this.$insertion.insertAfter(this._.$closestTargetLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n\n            /**\n             * Scenario 2: Next row is a child of this one.\n             *\n             *     * Row 1\n             *     ----------------------\n             *         * Row 2\n             */\n\n            else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                    if (this._.hoveringBetweenRows) {\n                        // Position the insertion as the first child of the closest target\n                        this.$insertion.insertBefore(this._.$nextTargetLi);\n                    } else {\n                        this._.$closestTarget.addClass('draghover');\n                        this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                    }\n                }\n            }\n\n            /**\n             * Scenario 3: Next row is a child of a parent node, or there is no next row.\n             *\n             *         * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            else {\n                if (this._.hoveringBetweenRows) {\n                    // Determine which <li> to position the insertion after\n                    this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                    if (Craft.orientation === 'rtl') {\n                        this._.draggeeX += this.$helperLi.width();\n                    }\n\n                    this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                    this._.$closestParentLi = null;\n                    this._.closestParentLiXDiff = null;\n                    this._.closestParentLevel = null;\n\n                    for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                        this._.$parentLi = $(this._.$parentLis[this._.i]);\n                        this._.parentLiX = this._.$parentLi.offset().left;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.parentLiX += this._.$parentLi.width();\n                        }\n\n                        this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                        this._.parentLevel = this._.$parentLi.data('level');\n\n                        if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                            !this._.$closestParentLi || (\n                                this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                            )\n                        )) {\n                            this._.$closestParentLi = this._.$parentLi;\n                            this._.closestParentLiXDiff = this._.parentLiXDiff;\n                            this._.closestParentLevel = this._.parentLevel;\n                        }\n                    }\n\n                    if (this._.$closestParentLi) {\n                        this.$insertion.insertAfter(this._.$closestParentLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n        }\n    },\n\n    cancelDrag: function() {\n        this.$insertion.remove();\n\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n        }\n\n        this.onMouseUp();\n    },\n\n    onDragStop: function() {\n        // Are we repositioning the draggee?\n        if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n            var $draggeeParent,\n                moved;\n\n            // Are we about to leave the draggee's original parent childless?\n            if (!this.$draggee.siblings().length) {\n                $draggeeParent = this.$draggee.parent();\n            }\n\n            if (this.$insertion.parent().length) {\n                // Make sure the insertion isn't right next to the draggee\n                var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                    this.$insertion.replaceWith(this.$draggee);\n                    moved = true;\n                } else {\n                    this.$insertion.remove();\n                    moved = false;\n                }\n            } else {\n                var $ul = this._.$closestTargetLi.children('ul');\n\n                // Make sure this is a different parent than the draggee's\n                if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                    if (!$ul.length) {\n                        var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                        this.structure.initToggle($toggle);\n\n                        $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                    } else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                        this._.$closestTarget.children('.toggle').trigger('click');\n                    }\n\n                    this.$draggee.appendTo($ul);\n                    moved = true;\n                } else {\n                    moved = false;\n                }\n            }\n\n            // Remove the class either way\n            this._.$closestTarget.removeClass('draghover');\n\n            if (moved) {\n                // Now deal with the now-childless parent\n                if ($draggeeParent) {\n                    this.structure._removeUl($draggeeParent);\n                }\n\n                // Has the level changed?\n                var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                var animateCss;\n\n                if (newLevel != this.$draggee.data('level')) {\n                    // Correct the helper's padding if moving to/from level 1\n                    if (this.$draggee.data('level') == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = 38;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    } else if (newLevel == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    }\n\n                    this.setLevel(this.$draggee, newLevel);\n                }\n\n                // Make it real\n                var $element = this.$draggee.children('.row').children('.element');\n\n                var data = {\n                    structureId: this.structure.id,\n                    elementId: $element.data('id'),\n                    siteId: $element.data('site-id'),\n                    prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                    parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                };\n\n                Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                    }\n                });\n            }\n        }\n\n        // Animate things back into place\n        this.$draggee.velocity('stop').removeClass('hidden').velocity({\n            height: this.draggeeHeight\n        }, 'fast', $.proxy(function() {\n            this.$draggee.css('height', 'auto');\n        }, this));\n\n        this.returnHelpersToDraggees();\n\n        this.base();\n    },\n\n    setLevel: function($li, level) {\n        $li.data('level', level);\n\n        var indent = this.structure.getIndent(level);\n\n        var css = {};\n        css['margin-' + Craft.left] = '-' + indent + 'px';\n        css['padding-' + Craft.left] = indent + 'px';\n        this.$draggee.children('.row').css(css);\n\n        var $childLis = $li.children('ul').children();\n\n        for (var i = 0; i < $childLis.length; i++) {\n            this.setLevel($($childLis[i]), level + 1);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n    tableView: null,\n    structureId: null,\n    maxLevels: null,\n\n    _basePadding: null,\n    _helperMargin: null,\n\n    _$firstRowCells: null,\n    _$titleHelperCell: null,\n\n    _titleHelperCellOuterWidth: null,\n\n    _ancestors: null,\n    _updateAncestorsFrame: null,\n    _updateAncestorsProxy: null,\n\n    _draggeeLevel: null,\n    _draggeeLevelDelta: null,\n    draggingLastElements: null,\n    _loadingDraggeeLevelDelta: false,\n\n    _targetLevel: null,\n    _targetLevelBounds: null,\n\n    _positionChanged: null,\n\n    /**\n     * Constructor\n     */\n    init: function(tableView, $elements, settings) {\n        this.tableView = tableView;\n        this.structureId = this.tableView.$table.data('structure-id');\n        this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n        this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n        this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n        settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n            handle: '.move',\n            collapseDraggees: true,\n            singleHelper: true,\n            helperSpacingY: 2,\n            magnetStrength: 4,\n            helper: $.proxy(this, 'getHelper'),\n            helperLagBase: 1.5,\n            axis: Garnish.Y_AXIS\n        });\n\n        this.base($elements, settings);\n    },\n\n    /**\n     * Returns the draggee rows (including any descendent rows).\n     */\n    findDraggee: function() {\n        this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n        this._draggeeLevelDelta = 0;\n\n        var $draggee = $(this.$targetItem),\n            $nextRow = this.$targetItem.next();\n\n        while ($nextRow.length) {\n            // See if this row is a descendant of the draggee\n            var nextRowLevel = $nextRow.data('level');\n\n            if (nextRowLevel <= this._draggeeLevel) {\n                break;\n            }\n\n            // Is this the deepest descendant we've seen so far?\n            var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n            if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                this._draggeeLevelDelta = nextRowLevelDelta;\n            }\n\n            // Add it and prep the next row\n            $draggee = $draggee.add($nextRow);\n            $nextRow = $nextRow.next();\n        }\n\n        // Are we dragging the last elements on the page?\n        this.draggingLastElements = !$nextRow.length;\n\n        // Do we have a maxLevels to enforce,\n        // and does it look like this draggee has descendants we don't know about yet?\n        if (\n            this.maxLevels &&\n            this.draggingLastElements &&\n            this.tableView.getMorePending()\n        ) {\n            // Only way to know the true descendant level delta is to ask PHP\n            this._loadingDraggeeLevelDelta = true;\n\n            var data = this._getAjaxBaseData(this.$targetItem);\n\n            Craft.postActionRequest('structures/get-element-level-delta', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this._loadingDraggeeLevelDelta = false;\n\n                    if (this.dragging) {\n                        this._draggeeLevelDelta = response.delta;\n                        this.drag(false);\n                    }\n                }\n            }, this));\n        }\n\n        return $draggee;\n    },\n\n    /**\n     * Returns the drag helper.\n     */\n    getHelper: function($helperRow) {\n        var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n            $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n            $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the column widths\n        this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n        var $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            var $helperCell = $($helperCells[i]);\n\n            // Skip the checkbox cell\n            if ($helperCell.hasClass('checkbox-cell')) {\n                $helperCell.remove();\n                continue;\n            }\n\n            // Hard-set the cell widths\n            var $firstRowCell = $(this._$firstRowCells[i]);\n            var width = $firstRowCell[0].getBoundingClientRect().width;\n\n            $firstRowCell.css('width', width + 'px');\n            $helperCell.css('width', width + 'px');\n\n            // Is this the title cell?\n            if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                this._$titleHelperCell = $helperCell;\n\n                var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                this._titleHelperCellOuterWidth = width;\n\n                $helperCell.css('padding-' + Craft.left, this._basePadding);\n            }\n        }\n\n        return $outerContainer;\n    },\n\n    /**\n     * Returns whether the draggee can be inserted before a given item.\n     */\n    canInsertBefore: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item.prev(), $item) !== false);\n    },\n\n    /**\n     * Returns whether the draggee can be inserted after a given item.\n     */\n    canInsertAfter: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item, $item.next()) !== false);\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        // Get the initial set of ancestors, before the item gets moved\n        this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n        // Set the initial target level bounds\n        this._setTargetLevelBounds();\n\n        // Check to see if we should load more elements now\n        this.tableView.maybeLoadMore();\n\n        this.base();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.base();\n        this._updateIndent();\n    },\n\n    /**\n     * On Insertion Point Change\n     */\n    onInsertionPointChange: function() {\n        this._setTargetLevelBounds();\n        this._updateAncestorsBeforeRepaint();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this._positionChanged = false;\n        this.base();\n\n        // Update the draggee's padding if the position just changed\n        // ---------------------------------------------------------------------\n\n        if (this._targetLevel != this._draggeeLevel) {\n            var levelDiff = this._targetLevel - this._draggeeLevel;\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                var $draggee = $(this.$draggee[i]),\n                    oldLevel = $draggee.data('level'),\n                    newLevel = oldLevel + levelDiff,\n                    padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                $draggee.data('level', newLevel);\n                $draggee.find('.element').data('level', newLevel);\n                $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n            }\n\n            this._positionChanged = true;\n        }\n\n        // Keep in mind this could have also been set by onSortChange()\n        if (this._positionChanged) {\n            // Tell the server about the new position\n            // -----------------------------------------------------------------\n\n            var data = this._getAjaxBaseData(this.$draggee);\n\n            // Find the previous sibling/parent, if there is one\n            var $prevRow = this.$draggee.first().prev();\n\n            while ($prevRow.length) {\n                var prevRowLevel = $prevRow.data('level');\n\n                if (prevRowLevel == this._targetLevel) {\n                    data.prevId = $prevRow.data('id');\n                    break;\n                }\n\n                if (prevRowLevel < this._targetLevel) {\n                    data.parentId = $prevRow.data('id');\n\n                    // Is this row collapsed?\n                    var $toggle = $prevRow.find('> th > .toggle');\n\n                    if (!$toggle.hasClass('expanded')) {\n                        // Make it look expanded\n                        $toggle.addClass('expanded');\n\n                        // Add a temporary row\n                        var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                        // Remove the target item\n                        if (this.tableView.elementSelect) {\n                            this.tableView.elementSelect.removeItems(this.$targetItem);\n                        }\n\n                        this.removeItems(this.$targetItem);\n                        this.$targetItem.remove();\n                        this.tableView._totalVisible--;\n                    }\n\n                    break;\n                }\n\n                $prevRow = $prevRow.prev();\n            }\n\n            Craft.postActionRequest('structures/move-element', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    if (!response.success) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        this.tableView.elementIndex.updateElements();\n                        return;\n                    }\n                    Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                    this.onPositionChange();\n\n                    // Were we waiting on this to complete so we can expand the new parent?\n                    if ($spinnerRow && $spinnerRow.parent().length) {\n                        $spinnerRow.remove();\n                        this.tableView._expandElement($toggle, true);\n                    }\n\n                    // See if we should run any pending tasks\n                    Craft.cp.runQueue();\n                }\n            }, this));\n        }\n    },\n\n    onSortChange: function() {\n        if (this.tableView.elementSelect) {\n            this.tableView.elementSelect.resetItemOrder();\n        }\n\n        this._positionChanged = true;\n        this.base();\n    },\n\n    onPositionChange: function() {\n        Garnish.requestAnimationFrame($.proxy(function() {\n            this.trigger('positionChange');\n            this.settings.onPositionChange();\n        }, this));\n    },\n\n    onReturnHelpersToDraggees: function() {\n        this._$firstRowCells.css('width', '');\n\n        // If we were dragging the last elements on the page and ended up loading any additional elements in,\n        // there could be a gap between the last draggee item and whatever now comes after it.\n        // So remove the post-draggee elements and possibly load up the next batch.\n        if (this.draggingLastElements && this.tableView.getMorePending()) {\n            // Update the element index's record of how many items are actually visible\n            this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n            var $postDraggeeItems = this.$draggee.last().nextAll();\n\n            if ($postDraggeeItems.length) {\n                this.removeItems($postDraggeeItems);\n                $postDraggeeItems.remove();\n                this.tableView.maybeLoadMore();\n            }\n        }\n\n        this.base();\n    },\n\n    /**\n     * Returns the min and max levels that the draggee could occupy between\n     * two given rows, or false if it’s not going to work out.\n     */\n    _getLevelBounds: function($prevRow, $nextRow) {\n        // Can't go any lower than the next row, if there is one\n        if ($nextRow && $nextRow.length) {\n            this._getLevelBounds._minLevel = $nextRow.data('level');\n        } else {\n            this._getLevelBounds._minLevel = 1;\n        }\n\n        // Can't go any higher than the previous row + 1\n        if ($prevRow && $prevRow.length) {\n            this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n        } else {\n            this._getLevelBounds._maxLevel = 1;\n        }\n\n        // Does this structure have a max level?\n        if (this.maxLevels) {\n            // Make sure it's going to fit at all here\n            if (\n                this._getLevelBounds._minLevel != 1 &&\n                this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n            ) {\n                return false;\n            }\n\n            // Limit the max level if we have to\n            if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                    this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                }\n            }\n        }\n\n        return {\n            min: this._getLevelBounds._minLevel,\n            max: this._getLevelBounds._maxLevel\n        };\n    },\n\n    /**\n     * Determines the min and max possible levels at the current draggee's position.\n     */\n    _setTargetLevelBounds: function() {\n        this._targetLevelBounds = this._getLevelBounds(\n            this.$draggee.first().prev(),\n            this.$draggee.last().next()\n        );\n    },\n\n    /**\n     * Determines the target level based on the current mouse position.\n     */\n    _updateIndent: function(forcePositionChange) {\n        // Figure out the target level\n        // ---------------------------------------------------------------------\n\n        // How far has the cursor moved?\n        this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n        // Flip that if this is RTL\n        if (Craft.orientation === 'rtl') {\n            this._updateIndent._mouseDist *= -1;\n        }\n\n        // What is that in indentation levels?\n        this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // Combine with the original level to get the new target level\n        this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n        // Contain it within our min/max levels\n        if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n            this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n            this._updateIndent._targetLevel = this._targetLevelBounds.min;\n        } else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n            this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n            this._updateIndent._targetLevel = this._targetLevelBounds.max;\n        }\n\n        // Has the target level changed?\n        if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n            // Target level is changing, so update the ancestors\n            this._updateAncestorsBeforeRepaint();\n        }\n\n        // Update the UI\n        // ---------------------------------------------------------------------\n\n        // How far away is the cursor from the exact target level distance?\n        this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // What's the magnet impact of that?\n        this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n        // Put it on a leash\n        if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n            this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n        }\n\n        // Apply the new margin/width\n        this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n        this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n        this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n    },\n\n    /**\n     * Returns the indent size for a given level\n     */\n    _getLevelIndent: function(level) {\n        return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n    },\n\n    /**\n     * Returns the base data that should be sent with StructureController Ajax requests.\n     */\n    _getAjaxBaseData: function($row) {\n        return {\n            structureId: this.structureId,\n            elementId: $row.data('id'),\n            siteId: $row.find('.element:first').data('site-id')\n        };\n    },\n\n    /**\n     * Returns a row's ancestor rows\n     */\n    _getAncestors: function($row, targetLevel) {\n        this._getAncestors._ancestors = [];\n\n        if (targetLevel != 0) {\n            this._getAncestors._level = targetLevel;\n            this._getAncestors._$prevRow = $row.prev();\n\n            while (this._getAncestors._$prevRow.length) {\n                if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                    this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                    this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                    // Did we just reach the top?\n                    if (this._getAncestors._level == 0) {\n                        break;\n                    }\n                }\n\n                this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n            }\n        }\n\n        return this._getAncestors._ancestors;\n    },\n\n    /**\n     * Prepares to have the ancestors updated before the screen is repainted.\n     */\n    _updateAncestorsBeforeRepaint: function() {\n        if (this._updateAncestorsFrame) {\n            Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n        }\n\n        if (!this._updateAncestorsProxy) {\n            this._updateAncestorsProxy = $.proxy(this, '_updateAncestors');\n        }\n\n        this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestorsProxy);\n    },\n\n    _updateAncestors: function() {\n        this._updateAncestorsFrame = null;\n\n        // Update the old ancestors\n        // -----------------------------------------------------------------\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n            // One less descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n            // Is it now childless?\n            if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                // Remove its toggle\n                this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n            }\n        }\n\n        // Update the new ancestors\n        // -----------------------------------------------------------------\n\n        this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n            // One more descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n            // Is this its first child?\n            if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                // Create its toggle\n                $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                    .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n            }\n        }\n\n        this._ancestors = this._updateAncestors._newAncestors;\n\n        delete this._updateAncestors._i;\n        delete this._updateAncestors._$ancestor;\n        delete this._updateAncestors._newAncestors;\n    }\n}, {\n    HELPER_MARGIN: 0,\n    LEVEL_INDENT: 44,\n    MAX_GIVE: 22,\n\n    defaults: {\n        onPositionChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend({\n    $table: null,\n    $selectedSortHeader: null,\n\n    structureTableSort: null,\n\n    _totalVisiblePostStructureTableDraggee: null,\n    _morePendingPostStructureTableDraggee: false,\n\n    getElementContainer: function() {\n        // Save a reference to the table\n        this.$table = this.$container.find('table:first');\n        return this.$table.children('tbody:first');\n    },\n\n    afterInit: function() {\n        // Set the sort header\n        this.initTableHeaders();\n\n        // Create the Structure Table Sorter\n        if (\n            this.elementIndex.settings.context === 'index' &&\n            this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n            Garnish.hasAttr(this.$table, 'data-structure-id')\n        ) {\n            this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements(), {\n                onSortChange: $.proxy(this, '_onStructureTableSortChange')\n            });\n        } else {\n            this.structureTableSort = null;\n        }\n\n        // Handle expand/collapse toggles for Structures\n        if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n            this.addListener(this.$elementContainer, 'click', function(ev) {\n                var $target = $(ev.target);\n\n                if ($target.hasClass('toggle')) {\n                    if (this._collapseElement($target) === false) {\n                        this._expandElement($target);\n                    }\n                }\n            });\n        }\n    },\n\n    initTableHeaders: function() {\n        var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n            $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n        for (var i = 0; i < $tableHeaders.length; i++) {\n            var $header = $tableHeaders.eq(i),\n                attr = $header.attr('data-attribute');\n\n            // Is this the selected sort attribute?\n            if (attr === selectedSortAttr) {\n                this.$selectedSortHeader = $header;\n                var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                $header\n                    .addClass('ordered ' + selectedSortDir)\n                    .on('click', $.proxy(this, '_handleSelectedSortHeaderClick'));\n            } else {\n                // Is this attribute sortable?\n                var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                if ($sortAttribute.length) {\n                    $header\n                        .addClass('orderable')\n                        .on('click', $.proxy(this, '_handleUnselectedSortHeaderClick'));\n                }\n            }\n        }\n    },\n\n    isVerticalList: function() {\n        return true;\n    },\n\n    getTotalVisible: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._totalVisiblePostStructureTableDraggee;\n        } else {\n            return this._totalVisible;\n        }\n    },\n\n    setTotalVisible: function(totalVisible) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._totalVisiblePostStructureTableDraggee = totalVisible;\n        } else {\n            this._totalVisible = totalVisible;\n        }\n    },\n\n    getMorePending: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._morePendingPostStructureTableDraggee;\n        } else {\n            return this._morePending;\n        }\n    },\n\n    setMorePending: function(morePending) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._morePendingPostStructureTableDraggee = morePending;\n        } else {\n            this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n        }\n    },\n\n    getLoadMoreParams: function() {\n        var params = this.base();\n\n        // If we are dragging the last elements on the page,\n        // tell the controller to only load elements positioned after the draggee.\n        if (this._isStructureTableDraggingLastElements()) {\n            params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n        }\n\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        this.base($newElements);\n\n        if (this.structureTableSort) {\n            this.structureTableSort.addItems($newElements);\n        }\n\n        Craft.cp.updateResponsiveTables();\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            params: {\n                includeTableAttributesForSource: this.elementIndex.sourceKey\n            },\n            onSaveElement: $.proxy(function(response) {\n                if (response.tableAttributes) {\n                    this._updateTableAttributes($element, response.tableAttributes);\n                }\n            }, this),\n            elementIndex: this.elementIndex\n        });\n    },\n\n    _collapseElement: function($toggle, force) {\n        if (!force && !$toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.removeClass('expanded');\n\n        // Find and remove the descendant rows\n        var $row = $toggle.parent().parent(),\n            id = $row.data('id'),\n            level = $row.data('level'),\n            $nextRow = $row.next();\n\n        while ($nextRow.length) {\n            if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                if ($nextRow.data('level') <= level) {\n                    break;\n                }\n\n                if (this.elementSelect) {\n                    this.elementSelect.removeItems($nextRow);\n                }\n\n                if (this.structureTableSort) {\n                    this.structureTableSort.removeItems($nextRow);\n                }\n\n                this._totalVisible--;\n            }\n\n            var $nextNextRow = $nextRow.next();\n            $nextRow.remove();\n            $nextRow = $nextNextRow;\n        }\n\n        // Remember that this row should be collapsed\n        if (!this.elementIndex.instanceState.collapsedElementIds) {\n            this.elementIndex.instanceState.collapsedElementIds = [];\n        }\n\n        this.elementIndex.instanceState.collapsedElementIds.push(id);\n        this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n        // Bottom of the index might be viewable now\n        this.maybeLoadMore();\n    },\n\n    _expandElement: function($toggle, force) {\n        if (!force && $toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.addClass('expanded');\n\n        // Remove this element from our list of collapsed elements\n        if (this.elementIndex.instanceState.collapsedElementIds) {\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n            if (index !== -1) {\n                this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                // Add a temporary row\n                var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                // Load the nested elements\n                var params = $.extend(true, {}, this.settings.params);\n                params.criteria.descendantOf = id;\n\n                Craft.postActionRequest('element-indexes/get-more-elements', params, $.proxy(function(response, textStatus) {\n                    // Do we even care about this anymore?\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n\n                    if (textStatus === 'success') {\n                        var $newElements = $(response.html);\n\n                        // Are there more descendants we didn't get in this batch?\n                        var totalVisible = (this._totalVisible + $newElements.length),\n                            morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                        if (morePending) {\n                            // Remove all the elements after it\n                            var $nextRows = $spinnerRow.nextAll();\n\n                            if (this.elementSelect) {\n                                this.elementSelect.removeItems($nextRows);\n                            }\n\n                            if (this.structureTableSort) {\n                                this.structureTableSort.removeItems($nextRows);\n                            }\n\n                            $nextRows.remove();\n                            totalVisible -= $nextRows.length;\n                        } else {\n                            // Maintain the current 'more' status\n                            morePending = this._morePending;\n                        }\n\n                        $spinnerRow.replaceWith($newElements);\n                        this.thumbLoader.load($newElements);\n\n                        if (this.elementIndex.actions || this.settings.selectable) {\n                            this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                            this.elementIndex.updateActionTriggers();\n                        }\n\n                        if (this.structureTableSort) {\n                            this.structureTableSort.addItems($newElements);\n                        }\n\n                        Craft.appendHeadHtml(response.headHtml);\n                        Craft.appendFootHtml(response.footHtml);\n                        Craft.cp.updateResponsiveTables();\n\n                        this.setTotalVisible(totalVisible);\n                        this.setMorePending(morePending);\n\n                        // Is there room to load more right now?\n                        this.maybeLoadMore();\n                    }\n                }, this));\n            }\n        }\n    },\n\n    _createSpinnerRowAfter: function($row) {\n        return $(\n            '<tr data-spinnerrow>' +\n            '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n            '<div class=\"spinner\"/>' +\n            '</td>' +\n            '</tr>'\n        ).insertAfter($row);\n    },\n\n    _isStructureTableDraggingLastElements: function() {\n        return (\n            this.structureTableSort &&\n            this.structureTableSort.dragging &&\n            this.structureTableSort.draggingLastElements\n        );\n    },\n\n    _handleSelectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        // Reverse the sort direction\n        var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n            newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n        this.elementIndex.setSortDirection(newSortDir);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleUnselectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        var attr = $header.attr('data-attribute');\n\n        this.elementIndex.setSortAttribute(attr);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleSortHeaderClick: function(ev, $header) {\n        if (this.$selectedSortHeader) {\n            this.$selectedSortHeader.removeClass('ordered asc desc');\n        }\n\n        $header.removeClass('orderable').addClass('ordered loading');\n        this.elementIndex.storeSortAttributeAndDirection();\n        this.elementIndex.updateElements();\n\n        // No need for two spinners\n        this.elementIndex.setIndexAvailable();\n    },\n\n    _updateTableAttributes: function($element, tableAttributes) {\n        var $tr = $element.closest('tr');\n\n        for (var attr in tableAttributes) {\n            if (!tableAttributes.hasOwnProperty(attr)) {\n                continue;\n            }\n\n            $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend({\n    searchTimeout: null,\n    searchMenu: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addTagInput: null,\n    $spinner: null,\n\n    _ignoreBlur: false,\n\n    init: function(settings) {\n        // Normalize the settings\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n        this.$addTagInput = this.$container.children('.add').children('.text');\n        this.$spinner = this.$addTagInput.next();\n\n        this.addListener(this.$addTagInput, 'input', $.proxy(function() {\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout($.proxy(this, 'searchForTags'), 500);\n        }, this));\n\n        this.addListener(this.$addTagInput, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n            }\n\n            let $option;\n\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options.filter('.hover'));\n                    }\n                    return;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $nextOption = $hoverOption.parent().nextAll().find('a:not(.disabled)').first();\n                            if ($nextOption.length) {\n                                this.focusOption($nextOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(0));\n                        }\n                    }\n                    return;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $prevOption = $hoverOption.parent().prevAll().find('a:not(.disabled)').last();\n                            if ($prevOption.length) {\n                                this.focusOption($prevOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(this.searchMenu.$options.length - 1));\n                        }\n                    }\n                    return;\n                }\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'focus', function() {\n            if (this.searchMenu) {\n                this.searchMenu.show();\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'blur', function() {\n            if (this._ignoreBlur) {\n                this._ignoreBlur = false;\n                return;\n            }\n\n            setTimeout($.proxy(function() {\n                if (this.searchMenu) {\n                    this.searchMenu.hide();\n                }\n            }, this), 1);\n        });\n    },\n\n    focusOption: function($option) {\n        this.searchMenu.$options.removeClass('hover');\n        $option.addClass('hover');\n        this.searchMenu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n    },\n\n    // No \"add\" button\n    getAddElementsBtn: $.noop,\n\n    getElementSortAxis: function() {\n        return null;\n    },\n\n    searchForTags: function() {\n        if (this.searchMenu) {\n            this.killSearchMenu();\n        }\n\n        var val = this.$addTagInput.val();\n\n        if (val) {\n            this.$spinner.removeClass('hidden');\n\n            var excludeIds = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                var id = $(this.$elements[i]).data('id');\n\n                if (id) {\n                    excludeIds.push(id);\n                }\n            }\n\n            if (this.settings.sourceElementId) {\n                excludeIds.push(this.settings.sourceElementId);\n            }\n\n            var data = {\n                search: this.$addTagInput.val(),\n                tagGroupId: this.settings.tagGroupId,\n                excludeIds: excludeIds\n            };\n\n            Craft.postActionRequest('tags/search-for-tags', data, $.proxy(function(response, textStatus) {\n                // Just in case\n                if (this.searchMenu) {\n                    this.killSearchMenu();\n                }\n\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                        $ul = $('<ul/>').appendTo($menu);\n\n                    var $li;\n\n                    for (var i = 0; i < response.tags.length; i++) {\n                        $li = $('<li/>')\n                            .appendTo($ul);\n\n                        $('<a data-icon=\"tag\"/>')\n                            .appendTo($li)\n                            .text(response.tags[i].title)\n                            .data('id', response.tags[i].id)\n                            .addClass(response.tags[i].exclude ? 'disabled' : '');\n                    }\n\n                    if (!response.exactMatch) {\n                        $li = $('<li/>').appendTo($ul);\n                        $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                    }\n\n                    $ul.find('a:not(.disabled):first').addClass('hover');\n\n                    this.searchMenu = new Garnish.Menu($menu, {\n                        attachToElement: this.$addTagInput,\n                        onOptionSelect: $.proxy(this, 'selectTag')\n                    });\n\n                    this.addListener($menu, 'mousedown', $.proxy(function() {\n                        this._ignoreBlur = true;\n                    }, this));\n\n                    this.searchMenu.show();\n                }\n            }, this));\n        } else {\n            this.$spinner.addClass('hidden');\n        }\n    },\n\n    selectTag: function(option) {\n        var $option = $(option);\n\n        if ($option.hasClass('disabled')) {\n            return;\n        }\n\n        var id = $option.data('id');\n        var title = $option.text();\n\n        var $element = $('<div/>', {\n            'class': 'element small removable',\n            'data-id': id,\n            'data-site-id': this.settings.targetSiteId,\n            'data-label': title,\n            'data-editable': '1'\n        }).appendTo(this.$elementsContainer);\n\n        var $input = $('<input/>', {\n            'type': 'hidden',\n            'name': this.settings.name + '[]',\n            'value': id\n        }).appendTo($element);\n\n        $('<a/>', {\n            'class': 'delete icon',\n            'title': Craft.t('app', 'Remove')\n        }).appendTo($element);\n\n        var $titleContainer = $('<div/>', {\n            'class': 'label'\n        }).appendTo($element);\n\n        $('<span/>', {\n            'class': 'title',\n            text: title\n        }).appendTo($titleContainer);\n\n        var margin = -($element.outerWidth() + 10);\n        this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addTagInput.velocity(animateCss, 'fast');\n\n        this.$elements = this.$elements.add($element);\n\n        this.addElements($element);\n\n        this.killSearchMenu();\n        this.$addTagInput.val('');\n        this.$addTagInput.trigger('focus');\n\n        if (!id) {\n            // We need to create the tag first\n            $element.addClass('loading disabled');\n\n            var data = {\n                groupId: this.settings.tagGroupId,\n                title: title\n            };\n\n            Craft.postActionRequest('tags/create-tag', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success' && response.success) {\n                    $element.attr('data-id', response.id);\n                    $input.val(response.id);\n\n                    $element.removeClass('loading disabled');\n                } else {\n                    this.removeElement($element);\n\n                    if (textStatus === 'success') {\n                        // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                }\n            }, this));\n        }\n    },\n\n    killSearchMenu: function() {\n        this.searchMenu.hide();\n        this.searchMenu.destroy();\n        this.searchMenu = null;\n    }\n}, {\n    defaults: {\n        tagGroupId: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend({\n    getElementContainer: function() {\n        return this.$container.children('ul');\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            config = $.extend({\n                autocomplete: false,\n            }, config);\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    inputmode: config.inputmode,\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: typeof config.autocomplete === 'boolean' ? (config.autocomplete ? 'on' : 'off') : config.autocomplete,\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            } else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            if (!config.id) {\n                config.id = 'text' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || 'copytext' + Math.floor(Math.random() * 1000000000);\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n                'aria-label': Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n                $input[0].setSelectionRange(0, 0);\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            if (!config.id) {\n                config.id = 'copytext' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            if (!config.id) {\n                config.id = 'textarea' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html': option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'select' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                html: config.label,\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            } else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            if (!config.id) {\n                config.id = 'checkbox' + Math.floor(Math.random() * 1000000000);\n            }\n\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: `${config.id}-field`,\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: allChecked || (config.values || []).includes(option.value),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            config.fieldset = true;\n            if (!config.id) {\n                config.id = 'checkboxselect' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<button/>', {\n                'type': 'button',\n                'class': 'lightswitch',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'checkbox',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            if (!config.id) {\n                config.id = 'lightswitch' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            var id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            var containerId = config.containerId || id + '-container';\n            var name = config.name || null;\n            var value = config.value || null;\n            var small = config.small || false;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                id: containerId,\n                'class': 'flex color-container'\n            });\n\n            var $colorPreviewContainer = $('<div/>', {\n                'class': 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            var $colorPreview = $('<div/>', {\n                'class': 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            var $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: value,\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            if (!config.id) {\n                config.id = 'color' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000)) + '-date';\n            var name = config.name || null;\n            var inputName = name ? name + '[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            if (!config.id) {\n                config.id = 'date' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate: null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                let startDate = $startDate.datepicker('getDate');\n                let endDate = $endDate.datepicker('getDate');\n                let startTime = startDate ? startDate.getTime() : null;\n                let endTime = endDate ? endDate.getTime() : null;\n\n                let $options = $ul.find('a');\n                let $option;\n                let foundOption = false;\n\n                for (let i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            let btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                class: btnClasses,\n                'data-icon': 'date',\n                text: Craft.t('app', 'All'),\n            });\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000)) + '-time';\n            var name = config.name || null;\n            var inputName = name ? name + '[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours() * 3600 + value.getMinutes() * 60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            if (!config.id) {\n                config.id = 'time' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $(config.fieldset ? '<fieldset/>' : '<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                var $label = $(config.fieldset ? '<legend/>' : '<label/>', {\n                    'id': config.labelId || (config.id ? `${config.id}-${config.fieldset ? 'legend' : 'label'}` : null),\n                    'class': (config.required ? 'required' : null),\n                    'for': !config.fieldset && config.id,\n                    text: label\n                }).appendTo($heading);\n            }\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend({\n    uploader: null,\n    allowedKinds: null,\n    $element: null,\n    settings: null,\n    _rejectedFiles: {},\n    _extensionList: null,\n    _totalFileCounter: 0,\n    _validFileCounter: 0,\n\n    init: function($element, settings) {\n        this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n        this.$element = $element;\n        this.allowedKinds = null;\n        this._extensionList = null;\n        this._totalFileCounter = 0;\n        this._validFileCounter = 0;\n\n        settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n        var events = settings.events;\n        delete settings.events;\n\n        if (settings.allowedKinds && settings.allowedKinds.length) {\n            if (typeof settings.allowedKinds === 'string') {\n                settings.allowedKinds = [settings.allowedKinds];\n            }\n\n            this.allowedKinds = settings.allowedKinds;\n            delete settings.allowedKinds;\n        }\n\n        settings.autoUpload = false;\n\n        this.uploader = this.$element.fileupload(settings);\n        for (var event in events) {\n            if (!events.hasOwnProperty(event)) {\n                continue;\n            }\n\n            this.uploader.on(event, events[event]);\n        }\n\n        this.settings = settings;\n\n        this.uploader.on('fileuploadadd', $.proxy(this, 'onFileAdd'));\n    },\n\n    /**\n     * Set uploader parameters.\n     */\n    setParams: function(paramObject) {\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        this.uploader.fileupload('option', {formData: paramObject});\n    },\n\n    /**\n     * Get the number of uploads in progress.\n     */\n    getInProgress: function() {\n        return this.uploader.fileupload('active');\n    },\n\n    /**\n     * Return true, if this is the last upload.\n     */\n    isLastUpload: function() {\n        // Processing the last file or not processing at all.\n        return this.getInProgress() < 2;\n    },\n\n    /**\n     * Called on file add.\n     */\n    onFileAdd: function(e, data) {\n        e.stopPropagation();\n\n        var validateExtension = false;\n\n        if (this.allowedKinds) {\n            if (!this._extensionList) {\n                this._createExtensionList();\n            }\n\n            validateExtension = true;\n        }\n\n        // Make sure that file API is there before relying on it\n        data.process().done($.proxy(function() {\n            var file = data.files[0];\n            var pass = true;\n            if (validateExtension) {\n                var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                var fileExtension = matches[1];\n                if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                    pass = false;\n                    this._rejectedFiles.type.push('“' + file.name + '”');\n                }\n            }\n\n            if (file.size > this.settings.maxFileSize) {\n                this._rejectedFiles.size.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            // If the validation has passed for this file up to now, check if we're not hitting any limits\n            if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                this._rejectedFiles.limit.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            if (pass) {\n                this._validFileCounter++;\n                data.submit();\n            }\n\n            if (++this._totalFileCounter === data.originalFiles.length) {\n                this._totalFileCounter = 0;\n                this._validFileCounter = 0;\n                this.processErrorMessages();\n            }\n        }, this));\n\n        return true;\n    },\n\n    /**\n     * Process error messages.\n     */\n    processErrorMessages: function() {\n        var str;\n\n        if (this._rejectedFiles.type.length) {\n            if (this._rejectedFiles.type.length === 1) {\n                str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            } else {\n                str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n            this._rejectedFiles.type = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.size.length) {\n            if (this._rejectedFiles.size.length === 1) {\n                str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n            this._rejectedFiles.size = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.limit.length) {\n            if (this._rejectedFiles.limit.length === 1) {\n                str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n            this._rejectedFiles.limit = [];\n            alert(str);\n        }\n    },\n\n    humanFileSize: function(bytes) {\n        var threshold = 1024;\n\n        if (bytes < threshold) {\n            return bytes + ' B';\n        }\n\n        var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n        var u = -1;\n\n        do {\n            bytes = bytes / threshold;\n            ++u;\n        }\n        while (bytes >= threshold);\n\n        return bytes.toFixed(1) + ' ' + units[u];\n    },\n\n    _createExtensionList: function() {\n        this._extensionList = [];\n\n        for (var i = 0; i < this.allowedKinds.length; i++) {\n            var allowedKind = this.allowedKinds[i];\n\n            if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                    var ext = Craft.fileKinds[allowedKind].extensions[j];\n                    this._extensionList.push(ext);\n                }\n            }\n        }\n    },\n\n    destroy: function() {\n        this.$element.fileupload('destroy');\n        this.base();\n    }\n}, {\n    defaults: {\n        dropZone: null,\n        pasteZone: null,\n        fileInput: null,\n        sequentialUploads: true,\n        maxFileSize: Craft.maxUploadSize,\n        allowedKinds: null,\n        events: {},\n        canAddMoreFiles: null,\n        headers: {'Accept': 'application/json;q=0.9,*/*;q=0.8'},\n        paramName: 'assets-upload'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Make it lowercase\n        sourceVal = sourceVal.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        sourceVal = Craft.asciiString(sourceVal);\n\n        // Handle must start with a letter and end with a letter/number\n        sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n        sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n        // Get the \"words\"\n        var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n        var uriFormat = words.join(Craft.slugWordSeparator);\n\n        if (uriFormat && this.settings.suffix) {\n            uriFormat += this.settings.suffix;\n        }\n\n        return uriFormat;\n    }\n});\n\n})(jQuery);\n","/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function(html) {\n    return html.replace(rxhtmlTag, \"<$1></$2>\");\n};\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Indexes an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        index: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.index() must be an array.';\n            }\n\n            return arr.reduce((index, obj, i) => {\n                index[typeof key === 'string' ? obj[key] : key(obj, i)] = obj;\n                return index;\n            }, {});\n        },\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                    if (format !== null && format !== 'integer') {\n                        throw `Message format 'number' is only supported for integer values.`;\n                    }\n                    let number = Craft.formatNumber(arg);\n                    let pos;\n                    if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                        number += `.${arg.substr(pos + 1)}`;\n                    }\n\n                    return number;\n                case 'none':\n                    return arg;\n                case 'plural':\n                    /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                    pluralStyle = [offsetValue] (selector '{' message '}')+\n                    offsetValue = \"offset:\" number\n                    selector = explicitValue | keyword\n                    explicitValue = '=' number  // adjacent, no white space in between\n                    keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                    message: see MessageFormat\n                    */\n                    if (typeof token[2] === 'undefined') {\n                        return false;\n                    }\n                    let plural = this._tokenizePattern(token[2]);\n                    const c = plural.length;\n                    let message = false;\n                    let offset = 0;\n                    for (let i = 0; i + 1 < c; i++) {\n                        if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                            return false;\n                        }\n                        let selector = Craft.trim(plural[i++]);\n                        let selectorChars = [...selector];\n\n                        if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                            let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                            if (pos === -1) {\n                                throw 'Message pattern is invalid.';\n                            }\n                            let offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                            selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                        }\n                        if (\n                            message === false &&\n                            selector === 'other' ||\n                            selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                            selector === 'one' && arg - offset === 1\n                        ) {\n                            message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                return p.replace('#', arg - offset);\n                            }).join(',');\n                        }\n                    }\n                    if (message !== false) {\n                        return this.formatMessage(message, args);\n                    }\n                    break;\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n\n            return false;\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * @param {string} key\n         * @param {boolean} shift\n         * @param {boolean} alt\n         */\n        shortcutText: function (key, shift, alt) {\n            if (Craft.clientOs === 'Mac') {\n                return (alt ? '⌥' : '') + (shift ? '⇧' : '') + '⌘' + key;\n            }\n            return 'Ctrl+' + (alt ? 'Alt+' : '') + (shift ? 'Shift+' : '') + key;\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[\\[\\]\\\\]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n\n                // Get the latest headers\n                this._getApiHeaders(cancelToken).then(apiHeaders => {\n                    // Send the API request\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    // Force the API to process the Craft headers if this is the first API request\n                    if (!this._apiHeaders) {\n                        options.params.processCraftHeaders = 1;\n                    }\n\n                    axios.request(options).then((apiResponse) => {\n                        // Process the response headers\n                        this._processApiHeaders(apiResponse.headers, cancelToken).then(() => {\n                            // Finally return the API response data\n                            resolve(apiResponse.data);\n                        }).catch(reject);\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        _getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    resolve(response.data);\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _processApiHeaders: function(headers, cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Have we already processed them?\n                if (this._apiHeaders) {\n                    resolve();\n                    return;\n                }\n\n                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                    data: {\n                        headers: headers,\n                    },\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    this._loadingApiHeaders = false;\n\n                    resolve();\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                    }\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _rejectApiRequests: function(reject, e) {\n            this._loadingApiHeaders = false;\n            reject(e);\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1](e);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = function() {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                }.bind(this);\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         */\n        findDeltaData: function(oldData, newData, deltaNames) {\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, true);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                }\n            }\n\n            return params.join('&');\n        },\n\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, useInitialValues) {\n            var grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            var n, paramName;\n\n            paramLoop: for (var p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (n = deltaNames.length - 1; n >= 0; n--) {\n                    paramName = decodeURIComponent(params[p]).substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(params[p]);\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(params[p]);\n                }\n            }\n\n            if (useInitialValues) {\n                for (let name in Craft.initialDeltaValues) {\n                    if (Craft.initialDeltaValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(Craft.initialDeltaValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return arr.includes(elem);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            // Normalize NFD chars to NFC\n            str = str.normalize('NFC');\n\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('.datetimewrapper', $container).datetime();\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a', $container).each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n    });\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: {\n                        customTrigger: $btn,\n                    }\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<button/>', {\n                                type: 'button',\n                                class: 'clear-btn',\n                                title: Craft.t('app', 'Clear'),\n                                'aria-label': Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('');\n                                    }\n                                    $btn.remove();\n                                    $inputs.first().focus();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n    });\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend({\n    $element: null,\n    elementId: null,\n    siteId: null,\n    deltaNames: null,\n    initialData: null,\n\n    $form: null,\n    $fieldsContainer: null,\n    $cancelBtn: null,\n    $saveBtn: null,\n    $spinner: null,\n\n    $siteSelect: null,\n    $siteSpinner: null,\n\n    hud: null,\n\n    init: function(element, settings) {\n        // Param mapping\n        if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n            // (settings)\n            settings = element;\n            element = null;\n        }\n\n        this.$element = $(element);\n        this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n        this.loadHud();\n    },\n\n    setElementAttribute: function(name, value) {\n        if (!this.settings.attributes) {\n            this.settings.attributes = {};\n        }\n\n        if (value === null) {\n            delete this.settings.attributes[name];\n        } else {\n            this.settings.attributes[name] = value;\n        }\n    },\n\n    getBaseData: function() {\n        var data = $.extend({}, this.settings.params);\n\n        if (this.settings.siteId) {\n            data.siteId = this.settings.siteId;\n        } else if (this.$element && this.$element.data('site-id')) {\n            data.siteId = this.$element.data('site-id');\n        }\n\n        if (this.settings.elementId) {\n            data.elementId = this.settings.elementId;\n        } else if (this.$element && this.$element.data('id')) {\n            data.elementId = this.$element.data('id');\n        }\n\n        if (this.settings.elementType) {\n            data.elementType = this.settings.elementType;\n        }\n\n        if (this.settings.attributes) {\n            data.attributes = this.settings.attributes;\n        }\n\n        if (this.settings.prevalidate) {\n            data.prevalidate = 1;\n        }\n\n        return data;\n    },\n\n    loadHud: function() {\n        this.onBeginLoading();\n        var data = this.getBaseData();\n        data.includeSites = Craft.isMultiSite && this.settings.showSiteSwitcher;\n        Craft.postActionRequest('elements/get-editor-html', data, $.proxy(this, 'showHud'));\n    },\n\n    showHud: function(response, textStatus) {\n        this.onEndLoading();\n\n        if (textStatus === 'success') {\n            var $hudContents = $();\n\n            if (response.sites) {\n                var $header = $('<div class=\"hud-header\"/>');\n\n                if (response.sites.length === 1) {\n                    $('<h5/>', {text: response.sites[0].name}).appendTo($header);\n                } else {\n                    var $siteSelectContainer = $('<div class=\"select\"/>').appendTo($header);\n\n                    this.$siteSelect = $('<select/>').appendTo($siteSelectContainer);\n                    this.$siteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($header);\n\n                    for (var i = 0; i < response.sites.length; i++) {\n                        var siteInfo = response.sites[i];\n                        $('<option value=\"' + siteInfo.id + '\"' + (siteInfo.id == response.siteId ? ' selected=\"selected\"' : '') + '>' + siteInfo.name + '</option>').appendTo(this.$siteSelect);\n                    }\n\n                    this.addListener(this.$siteSelect, 'change', 'switchSite');\n                }\n\n                $hudContents = $hudContents.add($header);\n            }\n\n            this.$form = $('<div/>');\n            this.$fieldsContainer = $('<div class=\"fields\"/>').appendTo(this.$form);\n\n            this.updateForm(response, true);\n\n            this.onCreateForm(this.$form);\n\n            var $footer = $('<div class=\"hud-footer\"/>').appendTo(this.$form),\n                $buttonsContainer = $('<div class=\"buttons right\"/>').appendTo($footer);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo($buttonsContainer);\n            this.$saveBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($buttonsContainer);\n            this.$spinner = $('<div class=\"spinner hidden\"/>').appendTo($buttonsContainer);\n\n            $hudContents = $hudContents.add(this.$form);\n\n            if (!this.hud) {\n                var hudTrigger = (this.settings.hudTrigger || this.$element);\n\n                this.hud = new Garnish.HUD(hudTrigger, $hudContents, {\n                    bodyClass: 'body elementeditor',\n                    closeOtherHUDs: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    onShow: this.onShowHud.bind(this),\n                    onHide: this.onHideHud.bind(this),\n                    onSubmit: this.saveElement.bind(this),\n                });\n\n                Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, this.maybeCloseHud.bind(this));\n                this.hud.addListener(this.hud.$shade, 'click', this.maybeCloseHud.bind(this));\n\n                this.hud.$hud.data('elementEditor', this);\n\n                // Disable browser input validation\n                this.hud.$body.attr('novalidate', '');\n\n                this.hud.on('hide', $.proxy(function() {\n                    delete this.hud;\n                }, this));\n            } else {\n                this.hud.updateBody($hudContents);\n                this.hud.updateSizeAndPosition();\n            }\n\n            // Focus on the first text input\n            $hudContents.find('.text:first').trigger('focus');\n\n            this.addListener(this.$cancelBtn, 'click', function() {\n                this.hud.hide();\n            });\n        }\n    },\n\n    switchSite: function() {\n        if (this.isDirty() && !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))) {\n            this.$siteSelect.val(this.siteId);\n            return;\n        }\n\n        var newSiteId = this.$siteSelect.val();\n\n        if (newSiteId == this.siteId) {\n            return;\n        }\n\n        this.$siteSpinner.removeClass('hidden');\n\n        this.reloadForm({siteId: newSiteId}, $.proxy(function(textStatus) {\n            this.$siteSpinner.addClass('hidden');\n            if (textStatus !== 'success') {\n                // Reset the site select\n                this.$siteSelect.val(this.siteId);\n            }\n        }, this));\n    },\n\n    reloadForm: function(data, callback) {\n        data = $.extend(this.getBaseData(), data);\n\n        Craft.postActionRequest('elements/get-editor-html', data, $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                this.updateForm(response, true);\n            }\n\n            if (callback) {\n                callback(textStatus);\n            }\n        }, this));\n    },\n\n    updateForm: function(response, refreshInitialData) {\n        this.siteId = response.siteId;\n        this.$fieldsContainer.html(response.html);\n\n        if (refreshInitialData !== false) {\n            this.deltaNames = response.deltaNames;\n        }\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$fieldsContainer.find('> .meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        Garnish.requestAnimationFrame($.proxy(function() {\n            Craft.appendHeadHtml(response.headHtml);\n            Craft.appendFootHtml(response.footHtml);\n            Craft.initUiElements(this.$fieldsContainer);\n\n            if (refreshInitialData) {\n                this.initialData = this.hud.$body.serialize();\n            }\n        }, this));\n    },\n\n    saveElement: function() {\n        var validators = this.settings.validators;\n\n        if ($.isArray(validators)) {\n            for (var i = 0; i < validators.length; i++) {\n                if ($.isFunction(validators[i]) && !validators[i].call()) {\n                    return false;\n                }\n            }\n        }\n\n        this.$spinner.removeClass('hidden');\n\n        var data = $.param(this.getBaseData()) + '&' + this.hud.$body.serialize();\n        data = Craft.findDeltaData(this.initialData, data, this.deltaNames);\n\n        Craft.postActionRequest('elements/save-element', data, $.proxy(function(response, textStatus) {\n            this.$spinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (this.$element && this.siteId == this.$element.data('site-id')) {\n                        // Update the label\n                        var $title = this.$element.find('.title'),\n                            $a = $title.find('a');\n\n                        if ($a.length && response.cpEditUrl) {\n                            $a.attr('href', response.cpEditUrl);\n                            $a.text(response.newTitle);\n                        } else {\n                            $title.text(response.newTitle);\n                        }\n                    }\n\n                    if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                        Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                            type: Craft.elementTypeNames[this.settings.elementType][0],\n                        }));\n                    }\n\n                    this.closeHud();\n                    this.onSaveElement(response);\n                } else {\n                    this.updateForm(response, false);\n                    Garnish.shake(this.hud.$hud);\n                }\n            }\n        }, this));\n    },\n\n    isDirty: function() {\n        return this.hud.$body.serialize() !== this.initialData;\n    },\n\n    maybeCloseHud: function(ev) {\n        if (!this.hud || !this.hud.showing) {\n            return;\n        }\n\n        if (!this.isDirty() || confirm('Are you sure you want to close the editor? Any changes will be lost.')) {\n            this.closeHud();\n        }\n    },\n\n    closeHud: function() {\n        if (!this.hud || !this.hud.showing) {\n            return;\n        }\n\n        this.hud.hide();\n        delete this.hud;\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    onShowHud: function() {\n        Garnish.shortcutManager.registerShortcut({\n            keyCode: Garnish.S_KEY,\n            ctrl: true,\n        }, this.saveElement.bind(this));\n        this.settings.onShowHud();\n        this.trigger('showHud');\n    },\n\n    onHideHud: function() {\n        this.settings.onHideHud();\n        this.trigger('hideHud');\n    },\n\n    onBeginLoading: function() {\n        if (this.$element) {\n            this.$element.addClass('loading');\n        }\n\n        this.settings.onBeginLoading();\n        this.trigger('beginLoading');\n    },\n\n    onEndLoading: function() {\n        if (this.$element) {\n            this.$element.removeClass('loading');\n        }\n\n        this.settings.onEndLoading();\n        this.trigger('endLoading');\n    },\n\n    onSaveElement: function(response) {\n        this.settings.onSaveElement(response);\n        this.trigger('saveElement', {\n            response: response\n        });\n\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n    },\n\n    onCreateForm: function($form) {\n        this.settings.onCreateForm($form);\n    }\n}, {\n    defaults: {\n        hudTrigger: null,\n        showSiteSwitcher: true,\n        elementId: null,\n        elementType: null,\n        siteId: null,\n        attributes: null,\n        params: null,\n        prevalidate: false,\n        elementIndex: null,\n\n        onShowHud: $.noop,\n        onHideHud: $.noop,\n        onBeginLoading: $.noop,\n        onEndLoading: $.noop,\n        onCreateForm: $.noop,\n        onSaveElement: $.noop,\n\n        validators: []\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend({\n    initialized: false,\n    elementType: null,\n\n    instanceState: null,\n    sourceStates: null,\n    sourceStatesStorageKey: null,\n\n    searchTimeout: null,\n    sourceSelect: null,\n\n    $container: null,\n    $main: null,\n    isIndexBusy: false,\n\n    $sidebar: null,\n    showingSidebar: null,\n    sourceKey: null,\n    sourceViewModes: null,\n    $source: null,\n    sourcesByKey: null,\n    $visibleSources: null,\n\n    $customizeSourcesBtn: null,\n    customizeSourcesModal: null,\n\n    $toolbar: null,\n    toolbarOffset: null,\n\n    $search: null,\n    searching: false,\n    searchText: null,\n    trashed: false,\n    drafts: false,\n    $clearSearchBtn: null,\n\n    $statusMenuBtn: null,\n    $statusMenuContainer: null,\n    statusMenu: null,\n    status: null,\n\n    $siteMenuBtn: null,\n    siteMenu: null,\n    siteId: null,\n\n    $sortMenuBtn: null,\n    sortMenu: null,\n    $sortAttributesList: null,\n    $sortDirectionsList: null,\n    $scoreSortAttribute: null,\n    $structureSortAttribute: null,\n\n    $elements: null,\n    $viewModeBtnContainer: null,\n    viewModeBtns: null,\n    viewMode: null,\n    view: null,\n    _autoSelectElements: null,\n    $countSpinner: null,\n    $countContainer: null,\n    page: 1,\n    resultSet: null,\n    totalResults: null,\n    $exportBtn: null,\n\n    actions: null,\n    actionsHeadHtml: null,\n    actionsFootHtml: null,\n    $selectAllContainer: null,\n    $selectAllCheckbox: null,\n    showingActionTriggers: false,\n    exporters: null,\n    exportersByType: null,\n    _$detachedToolbarItems: null,\n    _$triggers: null,\n\n    _ignoreFailedRequest: false,\n    _cancelToken: null,\n\n    /**\n     * Constructor\n     */\n    init: function(elementType, $container, settings) {\n        this.elementType = elementType;\n        this.$container = $container;\n        this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n        // Set the state objects\n        // ---------------------------------------------------------------------\n\n        this.instanceState = this.getDefaultInstanceState();\n\n        this.sourceStates = {};\n\n        // Instance states (selected source) are stored by a custom storage key defined in the settings\n        if (this.settings.storageKey) {\n            $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n        }\n\n        // Source states (view mode, etc.) are stored by the element type and context\n        this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n        $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n        // Find the DOM elements\n        // ---------------------------------------------------------------------\n\n        this.$main = this.$container.find('.main');\n        this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n        this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n        this.$statusMenuContainer = this.$statusMenuBtn.parent();\n        this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n        this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n        this.$search = this.$toolbar.find('.search:first input:first');\n        this.$clearSearchBtn = this.$toolbar.find('.search:first > .clear');\n        this.$sidebar = this.$container.find('.sidebar:first');\n        this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n        this.$elements = this.$container.find('.elements:first');\n        this.$countSpinner = this.$container.find('#count-spinner');\n        this.$countContainer = this.$container.find('#count-container');\n        this.$exportBtn = this.$container.find('#export-btn');\n\n        // Hide sidebar if needed\n        if (this.settings.hideSidebar) {\n            this.$sidebar.hide();\n            $('.body, .content', this.$container).removeClass('has-sidebar');\n        }\n\n        // Initialize the sources\n        // ---------------------------------------------------------------------\n\n        if (!this.initSources()) {\n            return;\n        }\n\n        // Customize button\n        if (this.$customizeSourcesBtn.length) {\n            this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n        }\n\n        // Initialize the status menu\n        // ---------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n            this.statusMenu.on('optionselect', $.proxy(this, '_handleStatusChange'));\n        }\n\n        // Initialize the site menu\n        // ---------------------------------------------------------------------\n\n        // Is there a site menu?\n        if (this.$siteMenuBtn.length) {\n            this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n            // Figure out the initial site\n            var $option = this.siteMenu.$options.filter('.sel:first');\n\n            if (!$option.length) {\n                $option = this.siteMenu.$options.first();\n            }\n\n            if ($option.length) {\n                this._setSite($option.data('site-id'));\n            } else {\n                // No site options -- they must not have any site permissions\n                this.settings.criteria = {id: '0'};\n            }\n\n            this.siteMenu.on('optionselect', $.proxy(this, '_handleSiteChange'));\n\n            if (this.siteId) {\n                // Should we be using a different default site?\n                var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                if (defaultSiteId && defaultSiteId != this.siteId) {\n                    // Is that one available here?\n                    var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                    if ($storedSiteOption.length) {\n                        // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                        $storedSiteOption.trigger('click');\n                    }\n                }\n            }\n        } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n            this._setSite(this.settings.criteria.siteId);\n        } else {\n            this._setSite(Craft.siteId);\n        }\n\n        // Don't let the criteria override the selected site\n        if (this.settings.criteria && this.settings.criteria.siteId) {\n            delete this.settings.criteria.siteId;\n        }\n\n        // Initialize the search input\n        // ---------------------------------------------------------------------\n\n        // Automatically update the elements after new search text has been sitting for a 1/2 second\n        this.addListener(this.$search, 'input', $.proxy(function() {\n            if (!this.searching && this.$search.val()) {\n                this.startSearching();\n            } else if (this.searching && !this.$search.val()) {\n                this.stopSearching();\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout($.proxy(this, 'updateElementsIfSearchTextChanged'), 500);\n        }, this));\n\n        // Update the elements when the Return key is pressed\n        this.addListener(this.$search, 'keypress', $.proxy(function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.updateElementsIfSearchTextChanged();\n            }\n        }, this));\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearSearchBtn, 'click', $.proxy(function() {\n            this.$search.val('');\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            this.stopSearching();\n\n            this.updateElementsIfSearchTextChanged();\n        }, this));\n\n        // Auto-focus the Search box\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$search.trigger('focus');\n        }\n\n        // Initialize the sort menu\n        // ---------------------------------------------------------------------\n\n        // Is there a sort menu?\n        if (this.$sortMenuBtn.length) {\n            this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n            this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n            this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n            this.sortMenu.on('optionselect', $.proxy(this, '_handleSortChange'));\n        }\n\n        // Initialize the Export button\n        // ---------------------------------------------------------------------\n\n        this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n        // Let everyone know that the UI is initialized\n        // ---------------------------------------------------------------------\n\n        this.initialized = true;\n        this.afterInit();\n\n        // Select the initial source\n        // ---------------------------------------------------------------------\n\n        this.selectDefaultSource();\n\n        // Load the first batch of elements!\n        // ---------------------------------------------------------------------\n\n        // Default to whatever page is in the URL\n        this.setPage(Craft.pageNum);\n\n        this.updateElements(true);\n    },\n\n    afterInit: function() {\n        this.onAfterInit();\n    },\n\n    _createCancelToken: function() {\n        this._cancelToken = axios.CancelToken.source();\n        return this._cancelToken.token;\n    },\n\n    _cancelRequests: function() {\n        if (this._cancelToken) {\n            this._ignoreFailedRequest = true;\n            this._cancelToken.cancel();\n            Garnish.requestAnimationFrame(() => {\n                this._ignoreFailedRequest = false;\n            });\n        }\n    },\n\n    getSourceContainer: function() {\n        return this.$sidebar.find('nav > ul');\n    },\n\n    get $sources() {\n        if (!this.sourceSelect) {\n            return undefined;\n        }\n\n        return this.sourceSelect.$items;\n    },\n\n    initSources: function() {\n        var $sources = this._getSourcesInList(this.getSourceContainer());\n\n        // No source, no party.\n        if ($sources.length === 0) {\n            return false;\n        }\n\n        // The source selector\n        if (!this.sourceSelect) {\n            this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                multi: false,\n                allowEmpty: false,\n                vertical: true,\n                onSelectionChange: $.proxy(this, '_handleSourceSelectionChange')\n            });\n        }\n\n        this.sourcesByKey = {};\n        this._initSources($sources);\n\n        return true;\n    },\n\n    selectDefaultSource: function() {\n        var sourceKey = this.getDefaultSourceKey(),\n            $source;\n\n        if (sourceKey) {\n            $source = this.getSourceByKey(sourceKey);\n\n            // Make sure it's visible\n            if (this.$visibleSources.index($source) === -1) {\n                $source = null;\n            }\n        }\n\n        if (!sourceKey || !$source) {\n            // Select the first source by default\n            $source = this.$visibleSources.first();\n        }\n\n        return this.selectSource($source);\n    },\n\n    refreshSources: function() {\n        this.sourceSelect.removeAllItems();\n\n        var params = {\n            context: this.settings.context,\n            elementType: this.elementType\n        };\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n            data: params,\n        }).then((response) => {\n            this.setIndexAvailable();\n            this.getSourceContainer().replaceWith(response.data.html);\n            this.initSources();\n            this.selectDefaultSource();\n        }).catch(() => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    initSource: function($source) {\n        this.sourceSelect.addItems($source);\n        this.initSourceToggle($source);\n        this.sourcesByKey[$source.data('key')] = $source;\n\n        if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n            this._expandSource($source);\n        }\n    },\n\n    initSourceToggle: function($source) {\n        // Remove handlers for the same thing. Just in case.\n        this.deinitSourceToggle($source);\n\n        var $toggle = this._getSourceToggle($source);\n\n        if ($toggle.length) {\n            this.addListener($source, 'dblclick', '_handleSourceDblClick');\n            this.addListener($toggle, 'click', '_handleSourceToggleClick');\n            $source.data('hasNestedSources', true);\n        } else {\n            $source.data('hasNestedSources', false);\n        }\n    },\n\n    deinitSource: function($source) {\n        this.sourceSelect.removeItems($source);\n        this.deinitSourceToggle($source);\n        delete this.sourcesByKey[$source.data('key')];\n    },\n\n    deinitSourceToggle: function($source) {\n        if ($source.data('hasNestedSources')) {\n            this.removeListener($source, 'dblclick');\n            this.removeListener(this._getSourceToggle($source), 'click');\n        }\n\n        $source.removeData('hasNestedSources');\n    },\n\n    getDefaultInstanceState: function() {\n        return {\n            selectedSource: null,\n            expandedSources: []\n        };\n    },\n\n    getDefaultSourceKey: function() {\n        if (this.settings.defaultSource) {\n            var paths = this.settings.defaultSource.split('/'),\n                path = '';\n\n            // Expand the tree\n            for (var i = 0; i < paths.length; i++) {\n                path += paths[i];\n                var $source = this.getSourceByKey(path);\n\n                // If the folder can't be found, then just go to the stored instance source.\n                if (!$source) {\n                    return this.instanceState.selectedSource;\n                }\n\n                this._expandSource($source);\n                path += '/';\n            }\n\n            // Just make sure that the modal is aware of the newly expanded sources, too.\n            this._setSite(this.siteId);\n\n            return this.settings.defaultSource;\n        }\n\n        return this.instanceState.selectedSource;\n    },\n\n    getDefaultExpandedSources: function() {\n        return this.instanceState.expandedSources;\n    },\n\n    startSearching: function() {\n        // Show the clear button and add/select the Score sort option\n        this.$clearSearchBtn.removeClass('hidden');\n\n        if (!this.$scoreSortAttribute) {\n            this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n            this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n        }\n\n        this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n        this.searching = true;\n\n        this._updateStructureSortOption();\n        this.setSortAttribute('score');\n    },\n\n    stopSearching: function() {\n        // Hide the clear button and Score sort option\n        this.$clearSearchBtn.addClass('hidden');\n\n        this.$scoreSortAttribute.detach();\n\n        this.searching = false;\n\n        this._updateStructureSortOption();\n    },\n\n    setInstanceState: function(key, value) {\n        if (typeof key === 'object') {\n            $.extend(this.instanceState, key);\n        } else {\n            this.instanceState[key] = value;\n        }\n\n        this.storeInstanceState();\n    },\n\n    storeInstanceState: function() {\n        if (this.settings.storageKey) {\n            Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n        }\n    },\n\n    getSourceState: function(source, key, defaultValue) {\n        if (typeof this.sourceStates[source] === 'undefined') {\n            // Set it now so any modifications to it by whoever's calling this will be stored.\n            this.sourceStates[source] = {};\n        }\n\n        if (typeof key === 'undefined') {\n            return this.sourceStates[source];\n        } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n            return this.sourceStates[source][key];\n        } else {\n            return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n        }\n    },\n\n    getSelectedSourceState: function(key, defaultValue) {\n        return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n    },\n\n    setSelecetedSourceState: function(key, value) {\n        var viewState = this.getSelectedSourceState();\n\n        if (typeof key === 'object') {\n            $.extend(viewState, key);\n        } else {\n            viewState[key] = value;\n        }\n\n        this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n        // Store it in localStorage too\n        Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n    },\n\n    storeSortAttributeAndDirection: function() {\n        var attr = this.getSelectedSortAttribute();\n\n        if (attr !== 'score') {\n            this.setSelecetedSourceState({\n                order: attr,\n                sort: this.getSelectedSortDirection()\n            });\n        }\n    },\n\n    /**\n     * Sets the page number.\n     */\n    setPage: function(page) {\n        if (this.settings.context !== 'index') {\n            return;\n        }\n\n        page = Math.max(page, 1);\n        this.page = page;\n\n        // Update the URL\n        var url = document.location.href\n            .replace(/\\?.*$/, '')\n            .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n            .replace(/\\/+$/, '');\n\n        if (this.page !== 1) {\n            if (Craft.pageTrigger[0] !== '?') {\n                url += '/';\n            }\n            url += Craft.pageTrigger + this.page;\n        }\n\n        history.replaceState({}, '', url);\n    },\n\n    _resetCount: function() {\n        this.resultSet = null;\n        this.totalResults = null;\n    },\n\n    /**\n     * Returns the data that should be passed to the elementIndex/getElements controller action\n     * when loading elements.\n     */\n    getViewParams: function() {\n        var criteria = {\n            siteId: this.siteId,\n            search: this.searchText,\n            offset: this.settings.batchSize * (this.page - 1),\n            limit: this.settings.batchSize,\n        };\n\n        // Only set drafts/draftOf/trashed params when needed, so we don't potentially override a source's criteria\n        if (\n            this.settings.canHaveDrafts &&\n            (this.drafts || (this.settings.context === 'index' && !this.status))\n        ) {\n            criteria.drafts = this.drafts || null;\n            criteria.savedDraftsOnly = true;\n            if (!this.drafts) {\n                criteria.draftOf = false;\n            }\n        }\n        if (this.trashed) {\n            criteria.trashed = true;\n        }\n\n        if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n            criteria.status = this.status;\n        }\n\n        $.extend(criteria, this.settings.criteria);\n\n        var params = {\n            context: this.settings.context,\n            elementType: this.elementType,\n            source: this.instanceState.selectedSource,\n            criteria: criteria,\n            disabledElementIds: this.settings.disabledElementIds,\n            viewState: $.extend({}, this.getSelectedSourceState()),\n            paginated: this._isViewPaginated() ? 1 : 0,\n        };\n\n        // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n        params.viewState.order = this.getSelectedSortAttribute();\n        params.viewState.sort = this.getSelectedSortDirection();\n\n        if (this.getSelectedSortAttribute() === 'structure') {\n            if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                this.instanceState.collapsedElementIds = [];\n            }\n            params.collapsedElementIds = this.instanceState.collapsedElementIds;\n        }\n\n        // Give plugins a chance to hook in here\n        this.trigger('registerViewParams', {\n            params: params,\n        });\n\n        return params;\n    },\n\n    updateElements: function(preservePagination) {\n        // Ignore if we're not fully initialized yet\n        if (!this.initialized) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        this.setIndexBusy();\n\n        // Kill the old view class\n        if (this.view) {\n            this.view.destroy();\n            delete this.view;\n        }\n\n        if (preservePagination !== true) {\n            this.setPage(1);\n            this._resetCount();\n        }\n\n        var params = this.getViewParams();\n\n        Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n            data: params,\n            cancelToken: this._createCancelToken(),\n        }).then((response) => {\n            this.setIndexAvailable();\n            (this.settings.context === 'index' ? Garnish.$scrollContainer : this.$main).scrollTop(0);\n            this._updateView(params, response.data);\n        }).catch(e => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    updateElementsIfSearchTextChanged: function() {\n        if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n            this.updateElements();\n        }\n    },\n\n    showActionTriggers: function() {\n        // Ignore if they're already shown\n        if (this.showingActionTriggers) {\n            return;\n        }\n\n        // Hard-code the min toolbar height in case it was taller than the actions toolbar\n        // (prevents the elements from jumping if this ends up being a double-click)\n        this.$toolbar.css('min-height', this.$toolbar.height());\n\n        // Hide any toolbar inputs\n        this._$detachedToolbarItems = this.$toolbar.children();\n        this._$detachedToolbarItems.detach();\n\n        if (!this._$triggers) {\n            this._createTriggers();\n        } else {\n            this._$triggers.appendTo(this.$toolbar);\n        }\n\n        this.showingActionTriggers = true;\n    },\n\n    submitAction: function(action, actionParams) {\n        // Make sure something's selected\n        var selectedElementIds = this.view.getSelectedElementIds(),\n            totalSelected = selectedElementIds.length;\n\n        if (totalSelected === 0) {\n            return;\n        }\n\n        if (typeof action === 'string') {\n            action = this._findAction(action);\n        }\n\n        if (action.confirm && !confirm(action.confirm)) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        // Get ready to submit\n        var viewParams = this.getViewParams();\n\n        actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n        var params = $.extend(viewParams, action.settings || {}, actionParams, {\n            elementAction: action.type,\n            elementIds: selectedElementIds\n        });\n\n        // Do it\n        this.setIndexBusy();\n        this._autoSelectElements = selectedElementIds;\n\n        if (action.download) {\n            if (Craft.csrfTokenName) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n            Craft.downloadFromUrl('POST', Craft.getActionUrl(this.settings.submitActionsAction), params).then(response => {\n                this.setIndexAvailable();\n            }).catch(e => {\n                this.setIndexAvailable();\n            });\n        } else {\n            Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                if (response.data.success) {\n                    // Update the count text too\n                    this._resetCount();\n                    this._updateView(viewParams, response.data);\n\n                    if (response.data.message) {\n                        Craft.cp.displayNotice(response.data.message);\n                    }\n\n                    this.afterAction(action, params);\n                } else {\n                    Craft.cp.displayError(response.data.message);\n                }\n            }).catch(() => {\n                this.setIndexAvailable();\n            });\n        }\n    },\n\n    _findAction: function(actionClass) {\n        for (var i = 0; i < this.actions.length; i++) {\n            if (this.actions[i].type === actionClass) {\n                return this.actions[i];\n            }\n        }\n        throw `Invalid element action: ${actionClass}`;\n    },\n\n    afterAction: function(action, params) {\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n\n        this.onAfterAction(action, params);\n    },\n\n    hideActionTriggers: function() {\n        // Ignore if there aren't any\n        if (!this.showingActionTriggers) {\n            return;\n        }\n\n        this._$detachedToolbarItems.appendTo(this.$toolbar);\n        this._$triggers.detach();\n        // this._$detachedToolbarItems.removeClass('hidden');\n\n        // Unset the min toolbar height\n        this.$toolbar.css('min-height', '');\n\n        this.showingActionTriggers = false;\n    },\n\n    updateActionTriggers: function() {\n        // Do we have an action UI to update?\n        if (this.actions) {\n            var totalSelected = this.view.getSelectedElements().length;\n\n            if (totalSelected !== 0) {\n                if (totalSelected === this.view.getEnabledElements().length) {\n                    this.$selectAllCheckbox.removeClass('indeterminate');\n                    this.$selectAllCheckbox.addClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'true');\n                } else {\n                    this.$selectAllCheckbox.addClass('indeterminate');\n                    this.$selectAllCheckbox.removeClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'mixed');\n                }\n\n                this.showActionTriggers();\n            } else {\n                this.$selectAllCheckbox.removeClass('indeterminate checked');\n                this.$selectAllContainer.attr('aria-checked', 'false');\n                this.hideActionTriggers();\n            }\n        }\n    },\n\n    getSelectedElements: function() {\n        return this.view ? this.view.getSelectedElements() : $();\n    },\n\n    getSelectedElementIds: function() {\n        return this.view ? this.view.getSelectedElementIds() : [];\n    },\n\n    setStatus: function(status) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n        if ($option.length) {\n            this.statusMenu.selectOption($option[0]);\n        }\n    },\n\n    getSortAttributeOption: function(attr) {\n        return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n    },\n\n    getSelectedSortAttribute: function() {\n        return this.$sortAttributesList.find('a.sel:first').data('attr');\n    },\n\n    setSortAttribute: function(attr) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.getSortAttributeOption(attr);\n\n        if ($option.length) {\n            this.$sortAttributesList.find('a.sel').removeClass('sel');\n            $option.addClass('sel');\n\n            var label = $option.text();\n            this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n            this.$sortMenuBtn.text(label);\n\n            if (attr === 'score') {\n                this.setSortDirection('desc');\n            } else {\n                this.setSortDirection($option.data('default-dir') || 'asc');\n            }\n\n            if (attr === 'structure') {\n                this.$sortDirectionsList.find('a').addClass('disabled');\n            } else {\n                this.$sortDirectionsList.find('a').removeClass('disabled');\n            }\n        }\n    },\n\n    getSortDirectionOption: function(dir) {\n        return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n    },\n\n    getSelectedSortDirection: function() {\n        return this.$sortDirectionsList.find('a.sel:first').data('dir');\n    },\n\n    getSelectedViewMode: function() {\n        return this.getSelectedSourceState('mode') || 'table';\n    },\n\n    setSortDirection: function(dir) {\n        if (dir !== 'desc') {\n            dir = 'asc';\n        }\n\n        this.$sortMenuBtn.attr('data-icon', dir);\n        this.$sortDirectionsList.find('a.sel').removeClass('sel');\n        this.getSortDirectionOption(dir).addClass('sel');\n    },\n\n    getSourceByKey: function(key) {\n        if (typeof this.sourcesByKey[key] === 'undefined') {\n            return null;\n        }\n\n        return this.sourcesByKey[key];\n    },\n\n    selectSource: function($source) {\n        if (!$source || !$source.length) {\n            return false;\n        }\n\n        if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n            return false;\n        }\n\n        // Hide action triggers if they're currently being shown\n        this.hideActionTriggers();\n\n        this.$source = $source;\n        this.sourceKey = $source.data('key');\n        this.setInstanceState('selectedSource', this.sourceKey);\n        this.sourceSelect.selectItem($source);\n\n        Craft.cp.updateSidebarMenuLabel();\n\n        if (this.searching) {\n            // Clear the search value without causing it to update elements\n            this.searchText = null;\n            this.$search.val('');\n            this.stopSearching();\n        }\n\n        // Sort menu\n        // ----------------------------------------------------------------------\n\n        // Remove any existing custom sort options from the menu\n        this.$sortAttributesList.children('li[data-extra]').remove();\n\n        // Does this source have any custom sort options?\n        let sortOptions = this.$source.data('sort-options')\n        if (sortOptions) {\n            for (let i = 0; i < sortOptions.length; i++) {\n                let $option = $('<li/>', {\n                    'data-extra': true,\n                })\n                    .append(\n                        $('<a/>', {\n                            text: sortOptions[i][0],\n                            'data-attr': sortOptions[i][1],\n                        })\n                    )\n                    .appendTo(this.$sortAttributesList);\n                this.sortMenu.addOptions($option.children());\n            }\n        }\n\n        // Does this source have a structure?\n        if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n            if (!this.$structureSortAttribute) {\n                this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                this.sortMenu.addOptions(this.$structureSortAttribute.children());\n            }\n\n            this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n        } else if (this.$structureSortAttribute) {\n            this.$structureSortAttribute.removeClass('sel').detach();\n        }\n\n        this.setStoredSortOptionsForSource();\n\n        // Status menu\n        // ----------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                this.$statusMenuContainer.addClass('hidden');\n            } else {\n                this.$statusMenuContainer.removeClass('hidden');\n            }\n\n            if (this.trashed) {\n                // Swap to the initial status\n                var $firstOption = this.statusMenu.$options.first();\n                this.setStatus($firstOption.data('status'));\n            }\n        }\n\n        // View mode buttons\n        // ----------------------------------------------------------------------\n\n        // Clear out any previous view mode data\n        if (this.$viewModeBtnContainer) {\n            this.$viewModeBtnContainer.remove();\n        }\n\n        this.viewModeBtns = {};\n        this.viewMode = null;\n\n        // Get the new list of view modes\n        this.sourceViewModes = this.getViewModesForSource();\n\n        // Create the buttons if there's more than one mode available to this source\n        if (this.sourceViewModes.length > 1) {\n            this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                let sourceViewMode = this.sourceViewModes[i];\n\n                let $viewModeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn' + (typeof sourceViewMode.className !== 'undefined' ? ` ${sourceViewMode.className}` : ''),\n                    'data-view': sourceViewMode.mode,\n                    'data-icon': sourceViewMode.icon,\n                    'aria-label': sourceViewMode.title,\n                    title: sourceViewMode.title,\n                }).appendTo(this.$viewModeBtnContainer);\n\n                this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                    this.selectViewMode(ev.data.mode);\n                    this.updateElements();\n                });\n            }\n        }\n\n        // Figure out which mode we should start with\n        var viewMode = this.getSelectedViewMode();\n\n        if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n            // Try to keep using the current view mode\n            if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                viewMode = this.viewMode;\n            }\n            // Just use the first one\n            else {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n        }\n\n        this.selectViewMode(viewMode);\n\n        this.onSelectSource();\n\n        return true;\n    },\n\n    selectSourceByKey: function(key) {\n        var $source = this.getSourceByKey(key);\n\n        if ($source) {\n            return this.selectSource($source);\n        } else {\n            return false;\n        }\n    },\n\n    setStoredSortOptionsForSource: function() {\n        var sortAttr = this.getSelectedSourceState('order'),\n            sortDir = this.getSelectedSourceState('sort');\n\n        if (!sortAttr || !sortDir) {\n            // Get the default\n            sortAttr = this.getDefaultSort();\n\n            if (Garnish.isArray(sortAttr)) {\n                sortDir = sortAttr[1];\n                sortAttr = sortAttr[0];\n            }\n        }\n\n        if (sortDir !== 'asc' && sortDir !== 'desc') {\n            sortDir = 'asc';\n        }\n\n        this.setSortAttribute(sortAttr);\n        this.setSortDirection(sortDir);\n    },\n\n    getDefaultSort: function() {\n        // Does the source specify what to do?\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n            return this.$source.attr('data-default-sort').split(':');\n        } else {\n            // Default to whatever's first\n            return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n        }\n    },\n\n    getViewModesForSource: function() {\n        var viewModes = [\n            {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n        ];\n\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n            viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n        }\n\n        return viewModes;\n    },\n\n    doesSourceHaveViewMode: function(viewMode) {\n        for (var i = 0; i < this.sourceViewModes.length; i++) {\n            if (this.sourceViewModes[i].mode === viewMode) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    selectViewMode: function(viewMode, force) {\n        // Make sure that the current source supports it\n        if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n            viewMode = this.sourceViewModes[0].mode;\n        }\n\n        // Has anything changed?\n        if (viewMode === this.viewMode) {\n            return;\n        }\n\n        // Deselect the previous view mode\n        if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].removeClass('active');\n        }\n\n        this.viewMode = viewMode;\n        this.setSelecetedSourceState('mode', this.viewMode);\n\n        if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].addClass('active');\n        }\n    },\n\n    createView: function(mode, settings) {\n        var viewClass = this.getViewClass(mode);\n        return new viewClass(this, this.$elements, settings);\n    },\n\n    getViewClass: function(mode) {\n        switch (mode) {\n            case 'table':\n                return Craft.TableElementIndexView;\n            case 'thumbs':\n                return Craft.ThumbsElementIndexView;\n            default:\n                throw `View mode \"${mode}\" not supported.`;\n        }\n    },\n\n    rememberDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index === -1) {\n            this.settings.disabledElementIds.push(id);\n        }\n    },\n\n    forgetDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index !== -1) {\n            this.settings.disabledElementIds.splice(index, 1);\n        }\n    },\n\n    enableElements: function($elements) {\n        $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.forgetDisabledElementId(id);\n        }\n\n        this.onEnableElements($elements);\n    },\n\n    disableElements: function($elements) {\n        $elements.removeClass('sel').addClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.rememberDisabledElementId(id);\n        }\n\n        this.onDisableElements($elements);\n    },\n\n    getElementById: function(id) {\n        return this.view.getElementById(id);\n    },\n\n    enableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.enableElements($element);\n            } else {\n                this.forgetDisabledElementId(id);\n            }\n        }\n    },\n\n    disableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.disableElements($element);\n            } else {\n                this.rememberDisabledElementId(id);\n            }\n        }\n    },\n\n    selectElementAfterUpdate: function(id) {\n        if (this._autoSelectElements === null) {\n            this._autoSelectElements = [];\n        }\n\n        this._autoSelectElements.push(id);\n    },\n\n    addButton: function($button) {\n        this.getButtonContainer().append($button);\n    },\n\n    isShowingSidebar: function() {\n        if (this.showingSidebar === null) {\n            this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n        }\n\n        return this.showingSidebar;\n    },\n\n    getButtonContainer: function() {\n        // Is there a predesignated place where buttons should go?\n        if (this.settings.buttonContainer) {\n            return $(this.settings.buttonContainer);\n        } else {\n            var $container = $('#action-button');\n\n            if (!$container.length) {\n                $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n            }\n\n            return $container;\n        }\n    },\n\n    setIndexBusy: function() {\n        this.$elements.addClass('busy');\n        this.isIndexBusy = true;\n    },\n\n    setIndexAvailable: function() {\n        this.$elements.removeClass('busy');\n        this.isIndexBusy = false;\n    },\n\n    createCustomizeSourcesModal: function() {\n        // Recreate it each time\n        var modal = new Craft.CustomizeSourcesModal(this, {\n            onHide: function() {\n                modal.destroy();\n            }\n        });\n\n        return modal;\n    },\n\n    disable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.disable();\n        }\n\n        if (this.view) {\n            this.view.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.enable();\n        }\n\n        if (this.view) {\n            this.view.enable();\n        }\n\n        this.base();\n    },\n\n    onAfterInit: function() {\n        this.settings.onAfterInit();\n        this.trigger('afterInit');\n    },\n\n    onSelectSource: function() {\n        this.settings.onSelectSource(this.sourceKey);\n        this.trigger('selectSource', {sourceKey: this.sourceKey});\n    },\n\n    onSelectSite: function() {\n        this.settings.onSelectSite(this.siteId);\n        this.trigger('selectSite', {siteId: this.siteId});\n    },\n\n    onUpdateElements: function() {\n        this.settings.onUpdateElements();\n        this.trigger('updateElements');\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    onEnableElements: function($elements) {\n        this.settings.onEnableElements($elements);\n        this.trigger('enableElements', {elements: $elements});\n    },\n\n    onDisableElements: function($elements) {\n        this.settings.onDisableElements($elements);\n        this.trigger('disableElements', {elements: $elements});\n    },\n\n    onAfterAction: function(action, params) {\n        this.settings.onAfterAction(action, params);\n        this.trigger('afterAction', {action: action, params: params});\n    },\n\n    // UI state handlers\n    // -------------------------------------------------------------------------\n\n    _handleSourceSelectionChange: function() {\n        // If the selected source was just removed (maybe because its parent was collapsed),\n        // there won't be a selected source\n        if (!this.sourceSelect.totalSelected) {\n            this.sourceSelect.selectItem(this.$visibleSources.first());\n            return;\n        }\n\n        if (this.selectSource(this.sourceSelect.$selectedItems)) {\n            this.updateElements();\n        }\n    },\n\n    _handleActionTriggerSubmit: function(ev) {\n        ev.preventDefault();\n\n        var $form = $(ev.currentTarget);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($form.data('action'), Garnish.getPostData($form));\n    },\n\n    _handleMenuActionTriggerSubmit: function(ev) {\n        var $option = $(ev.option);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($option.data('action'));\n    },\n\n    _handleStatusChange: function(ev) {\n        this.statusMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$statusMenuBtn.html($option.html());\n\n        this.trashed = false;\n        this.drafts = false;\n        this.status = null;\n\n        if (Garnish.hasAttr($option, 'data-trashed')) {\n            this.trashed = true;\n        } else if (Garnish.hasAttr($option, 'data-drafts')) {\n            this.drafts = true;\n        } else {\n            this.status = $option.data('status');\n        }\n\n        this._updateStructureSortOption();\n        this.updateElements();\n    },\n\n    _handleSiteChange: function(ev) {\n        this.siteMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$siteMenuBtn.html($option.html());\n        this._setSite($option.data('site-id'));\n        this.onSelectSite();\n    },\n\n    _setSite: function(siteId) {\n        let firstSite = this.siteId === null;\n        this.siteId = siteId;\n        this.$visibleSources = $();\n\n        // Hide any sources that aren't available for this site\n        var $firstVisibleSource;\n        var $source;\n        // Select a new source automatically if a site is already selected, but we don't have a selected source\n        // (or if the currently selected source ends up not supporting the new site)\n        var selectNewSource = !firstSite && (!this.$source || !this.$source.length);\n\n        for (var i = 0; i < this.$sources.length; i++) {\n            $source = this.$sources.eq(i);\n            if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                $source.parent().removeClass('hidden');\n                this.$visibleSources = this.$visibleSources.add($source);\n                if (!$firstVisibleSource) {\n                    $firstVisibleSource = $source;\n                }\n            } else {\n                $source.parent().addClass('hidden');\n\n                // Is this the currently selected source?\n                if (this.$source && this.$source.get(0) == $source.get(0)) {\n                    selectNewSource = true;\n                }\n            }\n        }\n\n        if (this.initialized && selectNewSource) {\n            this.selectSource($firstVisibleSource);\n        }\n\n        // Hide any empty-nester headings\n        var $headings = this.getSourceContainer().children('.heading');\n        var $heading;\n\n        for (i = 0; i < $headings.length; i++) {\n            $heading = $headings.eq(i);\n            if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                $heading.removeClass('hidden');\n            } else {\n                $heading.addClass('hidden');\n            }\n        }\n\n        if (this.initialized) {\n            if (this.settings.context === 'index') {\n                // Remember this site for later\n                Craft.cp.setSiteId(siteId);\n            }\n\n            // Update the elements\n            this.updateElements();\n        }\n    },\n\n    _handleSortChange: function(ev) {\n        var $option = $(ev.selectedOption);\n\n        if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n            return;\n        }\n\n        // Is this an attribute or a direction?\n        if ($option.parent().parent().is(this.$sortAttributesList)) {\n            this.setSortAttribute($option.data('attr'));\n        } else {\n            this.setSortDirection($option.data('dir'));\n        }\n\n        this.storeSortAttributeAndDirection();\n        this.updateElements();\n    },\n\n    _handleSelectionChange: function() {\n        this.updateActionTriggers();\n        this.onSelectionChange();\n    },\n\n    _handleSourceDblClick: function(ev) {\n        this._toggleSource($(ev.currentTarget));\n        ev.stopPropagation();\n    },\n\n    _handleSourceToggleClick: function(ev) {\n        this._toggleSource($(ev.currentTarget).prev('a'));\n        ev.stopPropagation();\n    },\n\n    _updateStructureSortOption: function() {\n        var $option = this.getSortAttributeOption('structure');\n\n        if (!$option.length) {\n            return;\n        }\n\n        if (this.trashed || this.drafts || this.searching) {\n            $option.addClass('disabled');\n            if (this.getSelectedSortAttribute() === 'structure') {\n                // Temporarily set the sort to the first option\n                var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                this.setSortAttribute($firstOption.data('attr'));\n                this.setSortDirection('asc');\n            }\n        } else {\n            $option.removeClass('disabled');\n            this.setStoredSortOptionsForSource();\n        }\n    },\n\n    // Source managemnet\n    // -------------------------------------------------------------------------\n\n    _getSourcesInList: function($list) {\n        return $list.children('li').children('a');\n    },\n\n    _getChildSources: function($source) {\n        var $list = $source.siblings('ul');\n        return this._getSourcesInList($list);\n    },\n\n    _getSourceToggle: function($source) {\n        return $source.siblings('.toggle');\n    },\n\n    _initSources: function($sources) {\n        for (var i = 0; i < $sources.length; i++) {\n            this.initSource($($sources[i]));\n        }\n    },\n\n    _deinitSources: function($sources) {\n        for (var i = 0; i < $sources.length; i++) {\n            this.deinitSource($($sources[i]));\n        }\n    },\n\n    _toggleSource: function($source) {\n        if ($source.parent('li').hasClass('expanded')) {\n            this._collapseSource($source);\n        } else {\n            this._expandSource($source);\n        }\n    },\n\n    _expandSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'true',\n            'aria-label': Craft.t('app', 'Hide nested sources'),\n        });\n        $source.parent('li').addClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        this._initSources($childSources);\n\n        var key = $source.data('key');\n        if (this.instanceState.expandedSources.indexOf(key) === -1) {\n            this.instanceState.expandedSources.push(key);\n            this.storeInstanceState();\n        }\n    },\n\n    _collapseSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'false',\n            'aria-label': Craft.t('app', 'Show nested sources'),\n        });\n        $source.parent('li').removeClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        this._deinitSources($childSources);\n\n        var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n        if (i !== -1) {\n            this.instanceState.expandedSources.splice(i, 1);\n            this.storeInstanceState();\n        }\n    },\n\n    // View\n    // -------------------------------------------------------------------------\n\n    _isViewPaginated: function() {\n        return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n    },\n\n    _updateView: function(params, response) {\n        // Cleanup\n        // -------------------------------------------------------------\n\n        // Get rid of the old action triggers regardless of whether the new batch has actions or not\n        if (this.actions) {\n            this.hideActionTriggers();\n            this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n        }\n\n        // Update the count text\n        // -------------------------------------------------------------\n\n        if (this.$countContainer.length) {\n            this.$countSpinner.removeClass('hidden');\n            this.$countContainer.html('');\n\n            this._countResults()\n                .then((total) => {\n                    this.$countSpinner.addClass('hidden');\n\n                    let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                    let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                    if (!this._isViewPaginated()) {\n                        let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n                        this.$countContainer.text(countLabel);\n                    } else {\n                        let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                        let last = Math.min(first + (this.settings.batchSize - 1), total);\n                        let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            first: first,\n                            last: last,\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n\n                        let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                        let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                        let $prevBtn = $('<div/>', {\n                            'class': 'page-link prev-page' + (this.page > 1 ? '' : ' disabled'),\n                            title: Craft.t('app', 'Previous Page')\n                        }).appendTo($paginationContainer);\n                        let $nextBtn = $('<div/>', {\n                            'class': 'page-link next-page' + (this.page < totalPages ? '' : ' disabled'),\n                            title: Craft.t('app', 'Next Page')\n                        }).appendTo($paginationContainer);\n\n                        $('<div/>', {\n                            'class': 'page-info',\n                            text: countLabel\n                        }).appendTo($paginationContainer);\n\n                        if (this.page > 1) {\n                            this.addListener($prevBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page - 1);\n                                this.updateElements(true);\n                            });\n                        }\n\n                        if (this.page < totalPages) {\n                            this.addListener($nextBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page + 1);\n                                this.updateElements(true);\n                            });\n                        }\n                    }\n                })\n                .catch(() => {\n                    this.$countSpinner.addClass('hidden');\n                });\n        }\n\n        // Update the view with the new container + elements HTML\n        // -------------------------------------------------------------\n\n        this.$elements.html(response.html);\n        Craft.appendHeadHtml(response.headHtml);\n        Craft.appendFootHtml(response.footHtml);\n\n        // Batch actions setup\n        // -------------------------------------------------------------\n\n        this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n        if (response.actions && response.actions.length) {\n            if (this.$selectAllContainer.length) {\n                this.actions = response.actions;\n                this.actionsHeadHtml = response.actionsHeadHtml;\n                this.actionsFootHtml = response.actionsFootHtml;\n\n                // Create the select all checkbox\n                this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                this.$selectAllContainer.attr({\n                    'role': 'checkbox',\n                    'tabindex': '0',\n                    'aria-checked': 'false',\n                    'aria-label': Craft.t('app', 'Select all'),\n                });\n\n                this.addListener(this.$selectAllContainer, 'click', function() {\n                    if (this.view.getSelectedElements().length === 0) {\n                        this.view.selectAllElements();\n                    } else {\n                        this.view.deselectAllElements();\n                    }\n                });\n\n                this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                    if (ev.keyCode === Garnish.SPACE_KEY) {\n                        ev.preventDefault();\n\n                        $(ev.currentTarget).trigger('click');\n                    }\n                });\n            }\n        } else {\n            if (!this.$selectAllContainer.siblings().length) {\n                this.$selectAllContainer.parent('.header').remove();\n            }\n            this.$selectAllContainer.remove();\n        }\n\n        // Exporters setup\n        // -------------------------------------------------------------\n\n        this.exporters = response.exporters;\n        this.exportersByType = Craft.index(this.exporters || [], e => e.type);\n\n        if (this.exporters && this.exporters.length) {\n            this.$exportBtn.removeClass('hidden');\n        } else {\n            this.$exportBtn.addClass('hidden');\n        }\n\n        // Create the view\n        // -------------------------------------------------------------\n\n        // Should we make the view selectable?\n        var selectable = (this.actions || this.settings.selectable);\n\n        this.view = this.createView(this.getSelectedViewMode(), {\n            context: this.settings.context,\n            batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n            params: params,\n            selectable: selectable,\n            multiSelect: (this.actions || this.settings.multiSelect),\n            checkboxMode: !!this.actions,\n            onSelectionChange: $.proxy(this, '_handleSelectionChange')\n        });\n\n        // Auto-select elements\n        // -------------------------------------------------------------\n\n        if (this._autoSelectElements) {\n            if (selectable) {\n                for (var i = 0; i < this._autoSelectElements.length; i++) {\n                    this.view.selectElementById(this._autoSelectElements[i]);\n                }\n            }\n\n            this._autoSelectElements = null;\n        }\n\n        // Trigger the event\n        // -------------------------------------------------------------\n\n        this.onUpdateElements();\n    },\n\n    _countResults: function() {\n        return new Promise((resolve, reject) => {\n            if (this.totalResults !== null) {\n                resolve(this.totalResults);\n            } else {\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                // Make sure we've got an active result set ID\n                if (this.resultSet === null) {\n                    this.resultSet = Math.floor(Math.random() * 100000000);\n                }\n                params.resultSet = this.resultSet;\n\n                Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                    data: params,\n                    cancelToken: this._createCancelToken(),\n                }).then((response) => {\n                    if (response.data.resultSet == this.resultSet) {\n                        this.totalResults = response.data.count;\n                        resolve(response.data.count);\n                    } else {\n                        reject();\n                    }\n                }).catch(reject);\n            }\n        });\n    },\n\n    _createTriggers: function() {\n        var triggers = [],\n            safeMenuActions = [],\n            destructiveMenuActions = [];\n\n        var i;\n\n        for (i = 0; i < this.actions.length; i++) {\n            var action = this.actions[i];\n\n            if (action.trigger) {\n                var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                    .data('action', action)\n                    .append(action.trigger);\n\n                this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                triggers.push($form);\n            } else {\n                if (!action.destructive) {\n                    safeMenuActions.push(action);\n                } else {\n                    destructiveMenuActions.push(action);\n                }\n            }\n        }\n\n        var $btn;\n\n        if (safeMenuActions.length || destructiveMenuActions.length) {\n            var $menuTrigger = $('<form/>');\n\n            $btn = $('<button/>', {\n                type: 'button',\n                class: 'btn menubtn',\n                'data-icon': 'settings',\n                title: Craft.t('app', 'Actions'),\n            }).appendTo($menuTrigger);\n\n            var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n            if ($safeList) {\n                $safeList.appendTo($menu);\n            }\n\n            if ($safeList && $destructiveList) {\n                $('<hr/>').appendTo($menu);\n            }\n\n            if ($destructiveList) {\n                $destructiveList.appendTo($menu);\n            }\n\n            triggers.push($menuTrigger);\n        }\n\n        this._$triggers = $();\n\n        for (i = 0; i < triggers.length; i++) {\n            var $div = $('<div/>').append(triggers[i]);\n            this._$triggers = this._$triggers.add($div);\n        }\n\n        this._$triggers.appendTo(this.$toolbar);\n        Craft.appendHeadHtml(this.actionsHeadHtml);\n        Craft.appendFootHtml(this.actionsFootHtml);\n\n        Craft.initUiElements(this._$triggers);\n\n        if ($btn) {\n            $btn.data('menubtn').on('optionSelect', $.proxy(this, '_handleMenuActionTriggerSubmit'));\n        }\n    },\n\n    _showExportHud: function() {\n        this.$exportBtn.addClass('active');\n\n        var $form = $('<form/>', {\n            'class': 'export-form'\n        });\n\n        var typeOptions = [];\n        for (var i = 0; i < this.exporters.length; i++) {\n            typeOptions.push({label: this.exporters[i].name, value: this.exporters[i].type});\n        }\n        var $typeField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Export Type'),\n            options: typeOptions,\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        var $formatField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Format'),\n            options: [\n                {label: 'CSV', value: 'csv'}, {label: 'JSON', value: 'json'}, {label: 'XML', value: 'xml'},\n            ],\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        let $typeSelect = $typeField.find('select');\n        this.addListener($typeSelect, 'change', () => {\n            let type = $typeSelect.val();\n            if (this.exportersByType[type].formattable) {\n                $formatField.removeClass('hidden');\n            } else {\n                $formatField.addClass('hidden');\n            }\n        });\n        $typeSelect.trigger('change');\n\n        // Only show the Limit field if there aren't any selected elements\n        var selectedElementIds = this.view.getSelectedElementIds();\n\n        if (!selectedElementIds.length) {\n            var $limitField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Limit'),\n                placeholder: Craft.t('app', 'No limit'),\n                type: 'number',\n                min: 1\n            }).appendTo($form);\n        }\n\n        $('<button/>', {\n            type: 'submit',\n            'class': 'btn submit fullwidth',\n            text: Craft.t('app', 'Export')\n        }).appendTo($form)\n\n        var $spinner = $('<div/>', {\n            'class': 'spinner hidden'\n        }).appendTo($form);\n\n        var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n        hud.on('hide', $.proxy(function() {\n            this.$exportBtn.removeClass('active');\n        }, this));\n\n        var submitting = false;\n\n        this.addListener($form, 'submit', function(ev) {\n            ev.preventDefault();\n            if (submitting) {\n                return;\n            }\n\n            submitting = true;\n            $spinner.removeClass('hidden');\n\n            var params = this.getViewParams();\n            delete params.criteria.offset;\n            delete params.criteria.limit;\n\n            params.type = $typeField.find('select').val();\n            params.format = $formatField.find('select').val();\n\n            if (selectedElementIds.length) {\n                params.criteria.id = selectedElementIds;\n            } else {\n                var limit = parseInt($limitField.find('input').val());\n                if (limit && !isNaN(limit)) {\n                    params.criteria.limit = limit;\n                }\n            }\n\n            if (Craft.csrfTokenValue) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                .then(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                })\n                .catch(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                    if (!this._ignoreFailedRequest) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                });\n        });\n    },\n\n    _createMenuTriggerList: function(actions, destructive) {\n        if (actions && actions.length) {\n            var $ul = $('<ul/>');\n\n            for (var i = 0; i < actions.length; i++) {\n                $('<li/>').append($('<a/>', {\n                    id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                    'class': (destructive ? 'error' : null),\n                    data: {\n                        action: actions[i],\n                    },\n                    text: actions[i].name\n                })).appendTo($ul);\n            }\n\n            return $ul;\n        }\n    }\n}, {\n    defaults: {\n        context: 'index',\n        modal: null,\n        storageKey: null,\n        criteria: null,\n        batchSize: 100,\n        disabledElementIds: [],\n        selectable: false,\n        multiSelect: false,\n        buttonContainer: null,\n        hideSidebar: false,\n        toolbarSelector: '.toolbar:first',\n        refreshSourcesAction: 'element-indexes/get-source-tree-html',\n        updateElementsAction: 'element-indexes/get-elements',\n        countElementsAction: 'element-indexes/count-elements',\n        submitActionsAction: 'element-indexes/perform-action',\n        defaultSiteId: null,\n        defaultSource: null,\n        canHaveDrafts: false,\n\n        onAfterInit: $.noop,\n        onSelectSource: $.noop,\n        onSelectSite: $.noop,\n        onUpdateElements: $.noop,\n        onSelectionChange: $.noop,\n        onEnableElements: $.noop,\n        onDisableElements: $.noop,\n        onAfterAction: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend({\n    $container: null,\n    $loadingMoreSpinner: null,\n    $elementContainer: null,\n    $scroller: null,\n\n    elementIndex: null,\n    thumbLoader: null,\n    elementSelect: null,\n\n    loadingMore: false,\n\n    _totalVisible: null,\n    _morePending: null,\n    _handleEnableElements: null,\n    _handleDisableElements: null,\n\n    init: function(elementIndex, container, settings) {\n        this.elementIndex = elementIndex;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n        // Create a \"loading-more\" spinner\n        this.$loadingMoreSpinner = $(\n            '<div class=\"centeralign hidden\">' +\n            '<div class=\"spinner loadingmore\"></div>' +\n            '</div>'\n        ).insertAfter(this.$container);\n\n        // Get the actual elements container and its child elements\n        this.$elementContainer = this.getElementContainer();\n        var $elements = this.$elementContainer.children();\n\n        this.setTotalVisible($elements.length);\n        this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n        // Instantiate the thumb loader\n        this.thumbLoader = new Craft.ElementThumbLoader();\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select(\n                this.$elementContainer,\n                $elements.filter(':not(.disabled)'),\n                {\n                    multi: this.settings.multiSelect,\n                    vertical: this.isVerticalList(),\n                    handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                    filter: ':not(a):not(.toggle)',\n                    checkboxMode: this.settings.checkboxMode,\n                    onSelectionChange: $.proxy(this, 'onSelectionChange')\n                });\n\n            this._handleEnableElements = $.proxy(function(ev) {\n                this.elementSelect.addItems(ev.elements);\n            }, this);\n\n            this._handleDisableElements = $.proxy(function(ev) {\n                this.elementSelect.removeItems(ev.elements);\n            }, this);\n\n            this.elementIndex.on('enableElements', this._handleEnableElements);\n            this.elementIndex.on('disableElements', this._handleDisableElements);\n        }\n\n        // Enable inline element editing if this is an index page\n        if (this.settings.context === 'index') {\n            this._handleElementEditing = $.proxy(function(ev) {\n                var $target = $(ev.target);\n\n                if ($target.prop('nodeName') === 'A') {\n                    // Let the link do its thing\n                    return;\n                }\n\n                var $element;\n\n                if ($target.hasClass('element')) {\n                    $element = $target;\n                } else {\n                    $element = $target.closest('.element');\n\n                    if (!$element.length) {\n                        return;\n                    }\n                }\n\n                if (Garnish.hasAttr($element, 'data-editable')) {\n                    this.createElementEditor($element);\n                }\n            }, this);\n\n            if (!this.elementIndex.trashed) {\n                this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                if ($.isTouchCapable()) {\n                    this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                }\n            }\n        }\n\n        // Give sub-classes a chance to do post-initialization stuff here\n        this.afterInit();\n\n        // Set up lazy-loading\n        if (this.settings.batchSize) {\n            if (this.settings.context === 'index') {\n                this.$scroller = Garnish.$scrollContainer;\n            } else {\n                this.$scroller = this.elementIndex.$main;\n            }\n\n            this.$scroller.scrollTop(0);\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }\n    },\n\n    getElementContainer: function() {\n        throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n    },\n\n    afterInit: function() {\n    },\n\n    getAllElements: function() {\n        return this.$elementContainer.children();\n    },\n\n    getEnabledElements: function() {\n        return this.$elementContainer.children(':not(.disabled)');\n    },\n\n    getElementById: function(id) {\n        var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n        if ($element.length) {\n            return $element;\n        } else {\n            return null;\n        }\n    },\n\n    getSelectedElements: function() {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        return this.elementSelect.$selectedItems;\n    },\n\n    getSelectedElementIds: function() {\n        let $selectedElements;\n        try {\n            $selectedElements = this.getSelectedElements();\n        } catch (e) {\n        }\n\n        let ids = [];\n        if ($selectedElements) {\n            for (var i = 0; i < $selectedElements.length; i++) {\n                ids.push($selectedElements.eq(i).data('id'));\n            }\n        }\n        return ids;\n    },\n\n    selectElement: function($element) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        this.elementSelect.selectItem($element, true);\n        return true;\n    },\n\n    selectElementById: function(id) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        var $element = this.getElementById(id);\n\n        if ($element) {\n            this.elementSelect.selectItem($element, true);\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    selectAllElements: function() {\n        this.elementSelect.selectAll();\n    },\n\n    deselectAllElements: function() {\n        this.elementSelect.deselectAll();\n    },\n\n    isVerticalList: function() {\n        return false;\n    },\n\n    getTotalVisible: function() {\n        return this._totalVisible;\n    },\n\n    setTotalVisible: function(totalVisible) {\n        this._totalVisible = totalVisible;\n    },\n\n    getMorePending: function() {\n        return this._morePending;\n    },\n\n    setMorePending: function(morePending) {\n        this._morePending = morePending;\n    },\n\n    /**\n     * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n     */\n    maybeLoadMore: function() {\n        if (this.canLoadMore()) {\n            this.loadMore();\n        }\n    },\n\n    /**\n     * Returns whether the user has reached the bottom of the scroll area.\n     */\n    canLoadMore: function() {\n        if (!this.getMorePending() || !this.settings.batchSize) {\n            return false;\n        }\n\n        // Check if the user has reached the bottom of the scroll area\n        var containerHeight;\n\n        if (this.$scroller[0] === Garnish.$win[0]) {\n            var winHeight = Garnish.$win.innerHeight(),\n                winScrollTop = Garnish.$win.scrollTop(),\n                containerOffset = this.$container.offset().top;\n            containerHeight = this.$container.height();\n\n            return (winHeight + winScrollTop >= containerOffset + containerHeight);\n        } else {\n            var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                containerScrollTop = this.$scroller.scrollTop();\n            containerHeight = this.$scroller.outerHeight();\n\n            return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n        }\n    },\n\n    /**\n     * Loads the next batch of elements.\n     */\n    loadMore: function() {\n        if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n            return;\n        }\n\n        this.loadingMore = true;\n        this.$loadingMoreSpinner.removeClass('hidden');\n        this.removeListener(this.$scroller, 'scroll');\n\n        var data = this.getLoadMoreParams();\n\n        Craft.postActionRequest(this.settings.loadMoreElementsAction, data, $.proxy(function(response, textStatus) {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                var $newElements = $(response.html);\n\n                this.appendElements($newElements);\n                Craft.appendHeadHtml(response.headHtml);\n                Craft.appendFootHtml(response.footHtml);\n\n                if (this.elementSelect) {\n                    this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                    this.elementIndex.updateActionTriggers();\n                }\n\n                this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n                this.setMorePending($newElements.length == this.settings.batchSize);\n\n                // Is there room to load more right now?\n                this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n                this.maybeLoadMore();\n            }\n        }, this));\n    },\n\n    getLoadMoreParams: function() {\n        // Use the same params that were passed when initializing this view\n        var params = $.extend(true, {}, this.settings.params);\n        params.criteria.offset = this.getTotalVisible();\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        $newElements.appendTo(this.$elementContainer);\n        this.thumbLoader.load($newElements);\n        this.onAppendElements($newElements);\n    },\n\n    onAppendElements: function($newElements) {\n        this.settings.onAppendElements($newElements);\n        this.trigger('appendElements', {\n            newElements: $newElements\n        });\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            elementIndex: this.elementIndex\n        });\n    },\n\n    disable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.disable();\n        }\n    },\n\n    enable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.enable();\n        }\n    },\n\n    destroy: function() {\n        // Remove the \"loading-more\" spinner, since we added that outside of the view container\n        this.$loadingMoreSpinner.remove();\n\n        // Kill the thumb loader\n        this.thumbLoader.destroy();\n        delete this.thumbLoader;\n\n        // Delete the element select\n        if (this.elementSelect) {\n            this.elementIndex.off('enableElements', this._handleEnableElements);\n            this.elementIndex.off('disableElements', this._handleDisableElements);\n\n            this.elementSelect.destroy();\n            delete this.elementSelect;\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        context: 'index',\n        batchSize: null,\n        params: null,\n        selectable: false,\n        multiSelect: false,\n        checkboxMode: false,\n        loadMoreElementsAction: 'element-indexes/get-more-elements',\n        onAppendElements: $.noop,\n        onSelectionChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend({\n    thumbLoader: null,\n    elementSelect: null,\n    elementSort: null,\n    modal: null,\n    elementEditor: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addElementBtn: null,\n    $addElementBtnContainer: null,\n\n    _initialized: false,\n\n    init: function(settings) {\n        // Normalize the settings and set them\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n        // Apply the storage key prefix\n        if (this.settings.modalStorageKey) {\n            this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n        }\n\n        // No reason for this to be sortable if we're only allowing 1 selection\n        if (this.settings.limit == 1) {\n            this.settings.sortable = false;\n        }\n\n        this.$container = this.getContainer();\n\n        // Store a reference to this class\n        this.$container.data('elementSelect', this);\n\n        this.$elementsContainer = this.getElementsContainer();\n\n        this.$addElementBtn = this.getAddElementsBtn();\n        if (this.$addElementBtn) {\n            this.$addElementBtnContainer = this.$addElementBtn.parent('.flex');\n            if (!this.$addElementBtnContainer.length) {\n                this.$addElementBtnContainer = null;\n            }\n        }\n\n        this.thumbLoader = new Craft.ElementThumbLoader();\n\n        this.initElementSelect();\n        this.initElementSort();\n        this.resetElements();\n\n        if (this.$addElementBtn) {\n            this.addListener(this.$addElementBtn, 'activate', 'showModal');\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            this._initialized = true;\n        });\n    },\n\n    get totalSelected() {\n        return this.$elements.length;\n    },\n\n    getContainer: function() {\n        return $('#' + this.settings.id);\n    },\n\n    getElementsContainer: function() {\n        return this.$container.children('.elements');\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.children();\n    },\n\n    getAddElementsBtn: function() {\n        return this.$container.find('.btn.add:first');\n    },\n\n    initElementSelect: function() {\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select({\n                multi: this.settings.sortable,\n                filter: ':not(.delete)'\n            });\n        }\n    },\n\n    initElementSort: function() {\n        if (this.settings.sortable) {\n            this.elementSort = new Garnish.DragSort({\n                container: this.$elementsContainer,\n                filter: (this.settings.selectable ? $.proxy(function() {\n                    // Only return all the selected items if the target item is selected\n                    if (this.elementSort.$targetItem.hasClass('sel')) {\n                        return this.elementSelect.getSelectedItems();\n                    } else {\n                        return this.elementSort.$targetItem;\n                    }\n                }, this) : null),\n                ignoreHandleSelector: '.delete',\n                axis: this.getElementSortAxis(),\n                collapseDraggees: true,\n                magnetStrength: 4,\n                helperLagBase: 1.5,\n                onSortChange: (this.settings.selectable ? $.proxy(function() {\n                    this.elementSelect.resetItemOrder();\n                }, this) : null)\n            });\n        }\n    },\n\n    getElementSortAxis: function() {\n        return (this.settings.viewMode === 'list' ? 'y' : null);\n    },\n\n    canAddMoreElements: function() {\n        return (!this.settings.limit || this.$elements.length < this.settings.limit);\n    },\n\n    updateAddElementsBtn: function() {\n        if (this.canAddMoreElements()) {\n            this.enableAddElementsBtn();\n        } else {\n            this.disableAddElementsBtn();\n        }\n    },\n\n    disableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.addClass('hidden');\n        }\n    },\n\n    enableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.removeClass('hidden');\n        }\n    },\n\n    resetElements: function() {\n        if (this.$elements !== null) {\n            this.removeElements(this.$elements);\n        } else {\n            this.$elements = $();\n        }\n\n        this.addElements(this.getElements());\n    },\n\n    addElements: function($elements) {\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect.addItems($elements);\n        }\n\n        if (this.settings.sortable) {\n            this.elementSort.addItems($elements);\n        }\n\n        if (this.settings.editable) {\n            this._handleShowElementEditor = $.proxy(function(ev) {\n                var $element = $(ev.currentTarget);\n                if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                    this.elementEditor = this.createElementEditor($element);\n                }\n            }, this);\n\n            this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n            if ($.isTouchCapable()) {\n                this.addListener($elements, 'taphold', this._handleShowElementEditor);\n            }\n        }\n\n        $elements.find('.delete').on('click dblclick', $.proxy(function(ev) {\n            this.removeElement($(ev.currentTarget).closest('.element'));\n            // Prevent this from acting as one of a double-click\n            ev.stopPropagation();\n        }, this));\n\n        this.$elements = this.$elements.add($elements);\n        this.updateAddElementsBtn();\n    },\n\n    createElementEditor: function($element, settings) {\n        if (!settings) {\n            settings = {};\n        }\n        settings.prevalidate = this.settings.prevalidate;\n        return Craft.createElementEditor(this.settings.elementType, $element, settings);\n    },\n\n    removeElements: function($elements) {\n        if (this.settings.selectable) {\n            this.elementSelect.removeItems($elements);\n        }\n\n        if (this.modal) {\n            var ids = [];\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $elements.eq(i).data('id');\n\n                if (id) {\n                    ids.push(id);\n                }\n            }\n\n            if (ids.length) {\n                this.modal.elementIndex.enableElementsById(ids);\n            }\n        }\n\n        // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n        $elements.children('input').prop('disabled', true);\n\n        this.$elements = this.$elements.not($elements);\n        this.updateAddElementsBtn();\n\n        this.onRemoveElements();\n    },\n\n    removeElement: function($element) {\n        this.removeElements($element);\n        this.animateElementAway($element, () => {\n            $element.remove();\n        });\n    },\n\n    animateElementAway: function($element, callback) {\n        $element.css('z-index', 0);\n\n        var animateCss = {\n            opacity: -1\n        };\n        animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n        if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n            animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n        }\n\n        // Pause the draft editor\n        if (window.draftEditor) {\n            window.draftEditor.pause();\n        }\n\n        $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n            callback();\n\n            // Resume the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.resume();\n            }\n        });\n    },\n\n    showModal: function() {\n        // Make sure we haven't reached the limit\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        if (!this.modal) {\n            this.modal = this.createModal();\n        } else {\n            this.modal.show();\n        }\n    },\n\n    createModal: function() {\n        return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n    },\n\n    getModalSettings: function() {\n        return $.extend({\n            closeOtherModals: false,\n            storageKey: this.modalStorageKey,\n            sources: this.settings.sources,\n            criteria: this.settings.criteria,\n            multiSelect: (this.settings.limit != 1),\n            showSiteMenu: this.settings.showSiteMenu,\n            disabledElementIds: this.getDisabledElementIds(),\n            onSelect: $.proxy(this, 'onModalSelect')\n        }, this.settings.modalSettings);\n    },\n\n    getSelectedElementIds: function() {\n        var ids = [];\n\n        for (var i = 0; i < this.$elements.length; i++) {\n            ids.push(this.$elements.eq(i).data('id'));\n        }\n\n        return ids;\n    },\n\n    getDisabledElementIds: function() {\n        var ids = this.getSelectedElementIds();\n\n        if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n            ids.push(this.settings.sourceElementId);\n        }\n\n        if (this.settings.disabledElementIds) {\n            ids.push(...this.settings.disabledElementIds);\n        }\n\n        return ids;\n    },\n\n    onModalSelect: function(elements) {\n        if (this.settings.limit) {\n            // Cut off any excess elements\n            var slotsLeft = this.settings.limit - this.$elements.length;\n\n            if (elements.length > slotsLeft) {\n                elements = elements.slice(0, slotsLeft);\n            }\n        }\n\n        this.selectElements(elements);\n        this.updateDisabledElementsInModal();\n    },\n\n    selectElements: function(elements) {\n        for (let i = 0; i < elements.length; i++) {\n            let elementInfo = elements[i],\n                $element = this.createNewElement(elementInfo);\n\n            this.appendElement($element);\n            this.addElements($element);\n            this.animateElementIntoPlace(elementInfo.$element, $element);\n\n            // Override the element reference with the new one\n            elementInfo.$element = $element;\n        }\n\n        this.onSelectElements(elements);\n    },\n\n    createNewElement: function(elementInfo) {\n        var $element = elementInfo.$element.clone();\n\n        // Make a couple tweaks\n        Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n        $element.addClass('removable');\n        $element.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + elementInfo.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        return $element;\n    },\n\n    appendElement: function($element) {\n        $element.appendTo(this.$elementsContainer);\n    },\n\n    animateElementIntoPlace: function($modalElement, $inputElement) {\n        var origOffset = $modalElement.offset(),\n            destOffset = $inputElement.offset(),\n            $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n        $inputElement.css('visibility', 'hidden');\n\n        $helper.css({\n            position: 'absolute',\n            zIndex: 10000,\n            top: origOffset.top,\n            left: origOffset.left\n        });\n\n        var animateCss = {\n            top: destOffset.top,\n            left: destOffset.left\n        };\n\n        $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n            $helper.remove();\n            $inputElement.css('visibility', 'visible');\n        });\n    },\n\n    updateDisabledElementsInModal: function() {\n        if (this.modal.elementIndex) {\n            this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n        }\n    },\n\n    getElementById: function(id) {\n        for (var i = 0; i < this.$elements.length; i++) {\n            var $element = this.$elements.eq(i);\n\n            if ($element.data('id') == id) {\n                return $element;\n            }\n        }\n    },\n\n    onSelectElements: function(elements) {\n        this.trigger('selectElements', {elements: elements});\n        this.settings.onSelectElements(elements);\n\n        if (window.draftEditor) {\n            window.draftEditor.checkForm();\n        }\n    },\n\n    onRemoveElements: function() {\n        this.trigger('removeElements');\n        this.settings.onRemoveElements();\n    }\n}, {\n    ADD_FX_DURATION: 200,\n    REMOVE_FX_DURATION: 200,\n\n    defaults: {\n        id: null,\n        name: null,\n        fieldId: null,\n        elementType: null,\n        sources: null,\n        criteria: {},\n        allowSelfRelations: false,\n        sourceElementId: null,\n        disabledElementIds: null,\n        viewMode: 'list',\n        limit: null,\n        showSiteMenu: false,\n        modalStorageKey: null,\n        modalSettings: {},\n        onSelectElements: $.noop,\n        onRemoveElements: $.noop,\n        sortable: true,\n        selectable: true,\n        editable: true,\n        prevalidate: false,\n        editorSettings: {}\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend({\n    elementType: null,\n    elementIndex: null,\n\n    $body: null,\n    $selectBtn: null,\n    $sidebar: null,\n    $sources: null,\n    $sourceToggles: null,\n    $main: null,\n    $search: null,\n    $elements: null,\n    $tbody: null,\n    $primaryButtons: null,\n    $secondaryButtons: null,\n    $cancelBtn: null,\n    $footerSpinner: null,\n\n    init: function(elementType, settings) {\n        this.elementType = elementType;\n        this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n        // Build the modal\n        var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n            $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n            $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n        this.base($container, this.settings);\n\n        this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n        this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n        this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$primaryButtons);\n        this.$selectBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn disabled submit',\n            text: Craft.t('app', 'Select'),\n        }).appendTo(this.$primaryButtons);\n\n        this.$body = $body;\n\n        this.addListener(this.$cancelBtn, 'activate', 'cancel');\n        this.addListener(this.$selectBtn, 'activate', 'selectElements');\n    },\n\n    onFadeIn: function() {\n        if (!this.elementIndex) {\n            this._createElementIndex();\n        } else {\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.elementIndex.$search.trigger('focus');\n            }\n        }\n\n        this.base();\n    },\n\n    onSelectionChange: function() {\n        this.updateSelectBtnState();\n    },\n\n    updateSelectBtnState: function() {\n        if (this.$selectBtn) {\n            if (this.elementIndex.getSelectedElements().length) {\n                this.enableSelectBtn();\n            } else {\n                this.disableSelectBtn();\n            }\n        }\n    },\n\n    enableSelectBtn: function() {\n        this.$selectBtn.removeClass('disabled');\n    },\n\n    disableSelectBtn: function() {\n        this.$selectBtn.addClass('disabled');\n    },\n\n    enableCancelBtn: function() {\n        this.$cancelBtn.removeClass('disabled');\n    },\n\n    disableCancelBtn: function() {\n        this.$cancelBtn.addClass('disabled');\n    },\n\n    showFooterSpinner: function() {\n        this.$footerSpinner.removeClass('hidden');\n    },\n\n    hideFooterSpinner: function() {\n        this.$footerSpinner.addClass('hidden');\n    },\n\n    cancel: function() {\n        if (!this.$cancelBtn.hasClass('disabled')) {\n            this.hide();\n        }\n    },\n\n    selectElements: function() {\n        if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n            // TODO: This code shouldn't know about views' elementSelect objects\n            this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                elementInfo = this.getElementInfo($selectedElements);\n\n            this.onSelect(elementInfo);\n\n            if (this.settings.disableElementsOnSelect) {\n                this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n            }\n\n            if (this.settings.hideOnSelect) {\n                this.hide();\n            }\n        }\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $element = $($selectedElements[i]);\n            var elementInfo = Craft.getElementInfo($element);\n\n            info.push(elementInfo);\n        }\n\n        return info;\n    },\n\n    show: function() {\n        this.updateSelectBtnState();\n        this.base();\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo);\n    },\n\n    disable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.enable();\n        }\n\n        this.base();\n    },\n\n    _createElementIndex: function() {\n        // Get the modal body HTML based on the settings\n        var data = {\n            context: 'modal',\n            elementType: this.elementType,\n            sources: this.settings.sources\n        };\n\n        if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n            data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n        }\n\n        Craft.postActionRequest('elements/get-modal-body', data, $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                this.$body.html(response.html);\n\n                if (this.$body.has('.sidebar:not(.hidden)').length) {\n                    this.$body.addClass('has-sidebar');\n                }\n\n                // Initialize the element index\n                this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                    context: 'modal',\n                    modal: this,\n                    storageKey: this.settings.storageKey,\n                    criteria: this.settings.criteria,\n                    disabledElementIds: this.settings.disabledElementIds,\n                    selectable: true,\n                    multiSelect: this.settings.multiSelect,\n                    buttonContainer: this.$secondaryButtons,\n                    onSelectionChange: $.proxy(this, 'onSelectionChange'),\n                    hideSidebar: this.settings.hideSidebar,\n                    defaultSiteId: this.settings.defaultSiteId,\n                    defaultSource: this.settings.defaultSource\n                });\n\n                // Double-clicking or double-tapping should select the elements\n                this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                    // Make sure the touch targets are the same\n                    // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                    if (touchData.firstTap.target === touchData.secondTap.target) {\n                        this.selectElements();\n                    }\n                });\n            }\n        }, this));\n    }\n}, {\n    defaults: {\n        resizable: true,\n        storageKey: null,\n        sources: null,\n        criteria: null,\n        multiSelect: false,\n        showSiteMenu: null,\n        disabledElementIds: [],\n        disableElementsOnSelect: false,\n        hideOnSelect: true,\n        onCancel: $.noop,\n        onSelect: $.noop,\n        hideSidebar: false,\n        defaultSiteId: null,\n        defaultSource: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend({\n    $source: null,\n    $target: null,\n    $form: null,\n    settings: null,\n\n    listening: null,\n    timeout: null,\n\n    init: function(source, target, settings) {\n        this.$source = $(source);\n        this.$target = $(target);\n        this.$form = this.$source.closest('form');\n\n        this.setSettings(settings);\n\n        this.startListening();\n    },\n\n    setNewSource: function(source) {\n        var listening = this.listening;\n        this.stopListening();\n\n        this.$source = $(source);\n\n        if (listening) {\n            this.startListening();\n        }\n    },\n\n    startListening: function() {\n        if (this.listening) {\n            return;\n        }\n\n        this.listening = true;\n\n        this.addListener(this.$source, 'input', 'onSourceTextChange');\n        this.addListener(this.$target, 'input', 'onTargetTextChange');\n        this.addListener(this.$form, 'submit', 'onFormSubmit');\n    },\n\n    stopListening: function() {\n        if (!this.listening) {\n            return;\n        }\n\n        this.listening = false;\n\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.removeAllListeners(this.$source);\n        this.removeAllListeners(this.$target);\n        this.removeAllListeners(this.$form);\n    },\n\n    onSourceTextChange: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.timeout = setTimeout($.proxy(this, 'updateTarget'), 250);\n    },\n\n    onTargetTextChange: function() {\n        if (this.$target.get(0) === document.activeElement) {\n            this.stopListening();\n        }\n    },\n\n    onFormSubmit: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.updateTarget();\n    },\n\n    updateTarget: function() {\n        if (!this.$target.is(':visible')) {\n            return;\n        }\n\n        var sourceVal = this.$source.val();\n\n        if (typeof sourceVal === 'undefined') {\n            // The source input may not exist anymore\n            return;\n        }\n\n        var targetVal = this.generateTargetValue(sourceVal);\n\n        this.$target.val(targetVal);\n\n        for (let i = 0; i < this.$target.length; i++) {\n            this.$target[i].dispatchEvent(new InputEvent('input', {\n                inputType: 'insertText',\n            }));\n            this.$target[i].dispatchEvent(new Event('input'));\n        }\n\n        // If the target already has focus, select its whole value to mimic\n        // the behavior if the value had already been generated and they just tabbed in\n        if (this.$target.is(':focus')) {\n            Craft.selectFullValue(this.$target);\n        }\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return sourceVal;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend({\n    settings: null,\n    totalItems: null,\n    sorter: null,\n\n    $noItems: null,\n    $table: null,\n    $tbody: null,\n    $deleteBtns: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.AdminTable.defaults);\n\n        if (!this.settings.allowDeleteAll) {\n            this.settings.minItems = 1;\n        }\n\n        this.$noItems = $(this.settings.noItemsSelector);\n        this.$table = $(this.settings.tableSelector);\n        this.$tbody = this.$table.children('tbody');\n        this.totalItems = this.$tbody.children().length;\n\n        if (this.settings.sortable) {\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                onSortChange: $.proxy(this, 'reorderItems')\n            });\n        }\n\n        this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n        this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n        this.updateUI();\n    },\n\n    addRow: function(row) {\n        if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(row).appendTo(this.$tbody),\n            $deleteBtn = $row.find('.delete');\n\n        if (this.settings.sortable) {\n            this.sorter.addItems($row);\n        }\n\n        this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n        this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n        this.totalItems++;\n\n        this.updateUI();\n    },\n\n    reorderItems: function() {\n        if (!this.settings.sortable) {\n            return;\n        }\n\n        // Get the new field order\n        var ids = [];\n\n        for (var i = 0; i < this.sorter.$items.length; i++) {\n            var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n            ids.push(id);\n        }\n\n        // Send it to the server\n        var data = {\n            ids: JSON.stringify(ids)\n        };\n\n        Craft.postActionRequest(this.settings.reorderAction, data, $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.onReorderItems(ids);\n                    Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                } else {\n                    Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                }\n            }\n        }, this));\n    },\n\n    handleDeleteBtnClick: function(event) {\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(event.target).closest('tr');\n\n        if (this.confirmDeleteItem($row)) {\n            this.deleteItem($row);\n        }\n    },\n\n    confirmDeleteItem: function($row) {\n        var name = this.getItemName($row);\n        return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name: name}));\n    },\n\n    deleteItem: function($row) {\n        var data = {\n            id: this.getItemId($row)\n        };\n\n        Craft.postActionRequest(this.settings.deleteAction, data, $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                this.handleDeleteItemResponse(response, $row);\n            }\n        }, this));\n    },\n\n    handleDeleteItemResponse: function(response, $row) {\n        var id = this.getItemId($row),\n            name = this.getItemName($row);\n\n        if (response.success) {\n            if (this.sorter) {\n                this.sorter.removeItems($row);\n            }\n\n            $row.remove();\n            this.totalItems--;\n            this.updateUI();\n            this.onDeleteItem(id);\n\n            Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name: name}));\n        } else {\n            Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name: name}));\n        }\n    },\n\n    onReorderItems: function(ids) {\n        this.settings.onReorderItems(ids);\n    },\n\n    onDeleteItem: function(id) {\n        this.settings.onDeleteItem(id);\n    },\n\n    getItemId: function($row) {\n        return $row.attr(this.settings.idAttribute);\n    },\n\n    getItemName: function($row) {\n        return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n    },\n\n    updateUI: function() {\n        // Show the \"No Whatever Exists\" message if there aren't any\n        if (this.totalItems === 0) {\n            this.$table.hide();\n            this.$noItems.removeClass('hidden');\n        } else {\n            this.$table.show();\n            this.$noItems.addClass('hidden');\n        }\n\n        // Disable the sort buttons if there's only one row\n        if (this.settings.sortable) {\n            var $moveButtons = this.$table.find('.move');\n\n            if (this.totalItems === 1) {\n                $moveButtons.addClass('disabled');\n            } else {\n                $moveButtons.removeClass('disabled');\n            }\n        }\n\n        // Disable the delete buttons if we've reached the minimum items\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            this.$deleteBtns.addClass('disabled');\n        } else {\n            this.$deleteBtns.removeClass('disabled');\n        }\n\n        // Hide the New Whatever button if we've reached the maximum items\n        if (this.settings.newItemBtnSelector) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                $(this.settings.newItemBtnSelector).addClass('hidden');\n            } else {\n                $(this.settings.newItemBtnSelector).removeClass('hidden');\n            }\n        }\n    }\n}, {\n    defaults: {\n        tableSelector: null,\n        noItemsSelector: null,\n        newItemBtnSelector: null,\n        idAttribute: 'data-id',\n        nameAttribute: 'data-name',\n        sortable: false,\n        allowDeleteAll: true,\n        minItems: 0,\n        maxItems: null,\n        reorderAction: null,\n        deleteAction: null,\n        reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n        reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n        confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n        deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n        deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n        onReorderItems: $.noop,\n        onDeleteItem: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend({\n    reloadIndex: false,\n\n    updateForm: function(response, refreshInitialData) {\n        this.base(response, refreshInitialData);\n\n        if (this.$element.data('id')) {\n            var $imageEditorTrigger = this.$fieldsContainer.find('> .meta > .preview-thumb-container.editable');\n\n            if ($imageEditorTrigger.length) {\n                this.addListener($imageEditorTrigger, 'click', 'showImageEditor');\n            }\n        }\n    },\n\n    showImageEditor: function() {\n        new Craft.AssetImageEditor(this.$element.data('id'), {\n            onSave: function() {\n                this.reloadIndex = true;\n                this.reloadForm();\n            }.bind(this),\n        });\n    },\n\n    onHideHud: function() {\n        if (this.reloadIndex && this.settings.elementIndex) {\n            this.settings.elementIndex.updateElements();\n        } else if (this.reloadIndex && this.settings.input) {\n            this.settings.input.refreshThumbnail(this.$element.data('id'));\n        }\n\n        this.base();\n    }\n});\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend({\n    // jQuery objects\n    $body: null,\n    $footer: null,\n    $imageTools: null,\n    $buttons: null,\n    $cancelBtn: null,\n    $replaceBtn: null,\n    $saveBtn: null,\n    $editorContainer: null,\n    $straighten: null,\n    $croppingCanvas: null,\n    $spinnerCanvas: null,\n\n    // FabricJS objects\n    canvas: null,\n    image: null,\n    viewport: null,\n    focalPoint: null,\n    grid: null,\n    croppingCanvas: null,\n    clipper: null,\n    croppingRectangle: null,\n    cropperHandles: null,\n    cropperGrid: null,\n    croppingShade: null,\n    croppingAreaText: null,\n\n    // Image state attributes\n    imageStraightenAngle: 0,\n    viewportRotation: 0,\n    originalWidth: 0,\n    originalHeight: 0,\n    imageVerticeCoords: null,\n    zoomRatio: 1,\n\n    // Editor state attributes\n    animationInProgress: false,\n    currentView: '',\n    assetId: null,\n    cacheBust: null,\n    draggingCropper: false,\n    scalingCropper: false,\n    draggingFocal: false,\n    previousMouseX: 0,\n    previousMouseY: 0,\n    shiftKeyHeld: false,\n    editorHeight: 0,\n    editorWidth: 0,\n    cropperState: false,\n    scaleFactor: 1,\n    flipData: {},\n    focalPointState: false,\n    spinnerInterval: null,\n    maxImageSize: null,\n    lastLoadedDimensions: null,\n    imageIsLoading: false,\n    mouseMoveEvent: null,\n    croppingConstraint: false,\n    constraintOrientation: 'landscape',\n    showingCustomConstraint: false,\n\n    // Rendering proxy functions\n    renderImage: null,\n    renderCropper: null,\n\n    init: function(assetId, settings) {\n        this.cacheBust = Date.now();\n\n        this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n        if (this.settings.allowDegreeFractions === null) {\n            this.settings.allowDegreeFractions = Craft.isImagick;\n        }\n\n        this.assetId = assetId;\n        this.flipData = {x: 0, y: 0};\n\n        // Build the modal\n        this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n        this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n        this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n        this.base(this.$container, this.settings);\n\n        this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn cancel',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$buttons);\n        this.$replaceBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit save replace',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$buttons);\n\n        if (this.settings.allowSavingAsNew) {\n            this.$saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit save copy',\n                text: Craft.t('app', 'Save as a new asset'),\n            }).appendTo(this.$buttons);\n            this.addListener(this.$saveBtn, 'activate', this.saveImage);\n        }\n\n        this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n        this.addListener(this.$cancelBtn, 'activate', this.hide);\n        this.removeListener(this.$shade, 'click');\n\n        this.maxImageSize = this.getMaxImageSize();\n\n        Craft.postActionRequest('assets/image-editor', {assetId: assetId}, $.proxy(this, 'loadEditor'));\n    },\n\n    /**\n     * Get the max image size that is viewable in the editor currently\n     */\n    getMaxImageSize: function() {\n        var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n        var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n        return Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n    },\n\n    /**\n     * Load the editor markup and start loading components and the image.\n     *\n     * @param data\n     */\n    loadEditor: function(data) {\n        if (!data.html) {\n            alert(Craft.t('app', 'Could not load the image editor.'));\n        }\n\n        this.$body.html(data.html);\n        this.$tabs = $('.tabs li', this.$body);\n        this.$viewsContainer = $('.views', this.$body);\n        this.$views = $('> div', this.$viewsContainer);\n        this.$imageTools = $('.image-container .image-tools', this.$body);\n        this.$editorContainer = $('.image-container .image', this.$body);\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this._showSpinner();\n\n        this.updateSizeAndPosition();\n\n        // Load the canvas on which we'll host our image and set up the proxy render function\n        this.canvas = new fabric.StaticCanvas('image-canvas');\n\n        // Set up the cropping canvas jquery element for tracking all the nice events\n        this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n        this.$croppingCanvas.width(this.editorWidth);\n        this.$croppingCanvas.height(this.editorHeight);\n\n        this.canvas.enableRetinaScaling = true;\n        this.renderImage = function() {\n            Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n        }.bind(this);\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        // Load image and set up the initial properties\n        fabric.Image.fromURL(imageUrl, $.proxy(function(imageObject) {\n            this.image = imageObject;\n            this.image.set({\n                originX: 'center',\n                originY: 'center',\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n            this.canvas.add(this.image);\n\n            this.originalHeight = this.image.getHeight();\n            this.originalWidth = this.image.getWidth();\n            this.zoomRatio = 1;\n\n            this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n            // Set up the image bounding box, viewport and position everything\n            this._setFittedImageVerticeCoordinates();\n            this._repositionEditorElements();\n\n            // Set up the focal point\n            var focalState = {\n                imageDimensions: this.getScaledImageDimensions(),\n                offsetX: 0,\n                offsetY: 0\n            };\n\n            var focal = false;\n            if (data.focalPoint) {\n                // Transform the focal point coordinates from relative to absolute\n                var focalData = data.focalPoint;\n\n                // Resolve for the current image dimensions.\n                var adjustedX = focalState.imageDimensions.width * focalData.x;\n                var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                focal = true;\n            }\n\n            this.storeFocalPointState(focalState);\n\n            if (focal) {\n                this._createFocalPoint();\n            }\n\n            this._createViewport();\n            this.storeCropperState();\n\n            // Add listeners to buttons\n            this._addControlListeners();\n\n            // Add mouse event listeners\n            this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n            this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n            this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n            this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n            this._hideSpinner();\n\n            // Render it, finally\n            this.renderImage();\n\n            // Make sure verything gets fired for the first tab\n            this.$tabs.first().trigger('click');\n        }, this));\n    },\n\n    /**\n     * Reload the image to better fit the current available image editor viewport.\n     */\n    _reloadImage: function() {\n        if (this.imageIsLoading) {\n            return;\n        }\n\n        this.imageIsLoading = true;\n        this.maxImageSize = this.getMaxImageSize();\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        this.image.setSrc(imageUrl, function(imageObject) {\n            this.originalHeight = imageObject.getHeight();\n            this.originalWidth = imageObject.getWidth();\n            this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n            this.updateSizeAndPosition();\n            this.renderImage();\n            this.imageIsLoading = false;\n        }.bind(this));\n    },\n\n    /**\n     * Update the modal size and position on browser resize\n     */\n    updateSizeAndPosition: function() {\n        if (!this.$container) {\n            return;\n        }\n\n        // Fullscreen modal\n        var innerWidth = window.innerWidth;\n        var innerHeight = window.innerHeight;\n\n        this.$container.css({\n            'width': innerWidth,\n            'min-width': innerWidth,\n            'left': 0,\n\n            'height': innerHeight,\n            'min-height': innerHeight,\n            'top': 0\n        });\n\n        this.$body.css({\n            'height': innerHeight - 62\n        });\n\n        if (innerWidth < innerHeight) {\n            this.$container.addClass('vertical');\n        } else {\n            this.$container.removeClass('vertical');\n        }\n\n        if (this.$spinnerCanvas) {\n            this.$spinnerCanvas.css({\n                left: ((this.$spinnerCanvas.parent().width() / 2) - (this.$spinnerCanvas.width() / 2)) + 'px',\n                top: ((this.$spinnerCanvas.parent().height() / 2) - (this.$spinnerCanvas.height() / 2)) + 'px'\n            });\n        }\n\n        // If image is already loaded, make sure it looks pretty.\n        if (this.$editorContainer && this.image) {\n            this._repositionEditorElements();\n        }\n    },\n\n    /**\n     * Reposition the editor elements to accurately reflect the editor state with current dimensions\n     */\n    _repositionEditorElements: function() {\n        // Remember what the dimensions were before the resize took place\n        var previousEditorDimensions = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this.canvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        var currentScaledDimensions = this.getScaledImageDimensions();\n\n        // If we're cropping now, we have to reposition the cropper correctly in case\n        // the area for image changes, forcing the image size to change as well.\n        if (this.currentView === 'crop') {\n            this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n            var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            this._setFittedImageVerticeCoordinates();\n            this._repositionCropper(previouslyOccupiedArea);\n        } else {\n            // Otherwise just recalculate the image zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n        }\n\n        // Reposition the image relatively to the previous editor dimensions.\n        this._repositionImage(previousEditorDimensions);\n        this._repositionViewport();\n        this._repositionFocalPoint(previousEditorDimensions);\n        this._zoomImage();\n\n        this.renderImage();\n\n        if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n            this._reloadImage();\n        }\n    },\n\n    /**\n     * Reposition image based on how the editor dimensions have changed.\n     * This ensures keeping the image center offset, if there is any.\n     *\n     * @param previousEditorDimensions\n     */\n    _repositionImage: function(previousEditorDimensions) {\n        this.image.set({\n            left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n            top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n        });\n    },\n\n    /**\n     * Create the viewport for image editor.\n     */\n    _createViewport: function() {\n        this.viewport = new fabric.Rect({\n            width: this.image.width,\n            height: this.image.height,\n            fill: 'rgba(127,0,0,1)',\n            originX: 'center',\n            originY: 'center',\n            globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n            left: this.image.left,\n            top: this.image.top\n        });\n        this.canvas.add(this.viewport);\n        this.renderImage();\n    },\n\n    /**\n     * Create the focal point.\n     */\n    _createFocalPoint: function() {\n        var focalPointState = this.focalPointState;\n        var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n        var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n        var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n        // Adjust by image margins\n        focalX += this.image.left;\n        focalY += this.image.top;\n\n        var deltaX = 0;\n        var deltaY = 0;\n\n        // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n        if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n            if (this.currentView !== 'crop') {\n                deltaX = this.viewport.left - this.image.left;\n                deltaY = this.viewport.top - this.image.top;\n            } else {\n                // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                deltaX = this.clipper.left - this.image.left;\n                deltaY = this.clipper.top - this.image.top;\n            }\n\n            // Bump focal to middle of viewport\n            focalX += deltaX;\n            focalY += deltaY;\n\n            // Reflect changes in saved state\n            focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n        }\n\n        this.focalPoint = new fabric.Group([\n            new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n            new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n        ], {\n            originX: 'center',\n            originY: 'center',\n            left: focalX,\n            top: focalY\n        });\n\n        this.storeFocalPointState(focalPointState);\n        this.canvas.add(this.focalPoint);\n    },\n\n    /**\n     * Toggle focal point\n     */\n    toggleFocalPoint: function() {\n        if (!this.focalPoint) {\n            this._createFocalPoint();\n        } else {\n            this.canvas.remove(this.focalPoint);\n            this.focalPoint = null;\n        }\n\n        this.renderImage();\n    },\n\n    /**\n     * Reposition the viewport to handle editor resizing.\n     */\n    _repositionViewport: function() {\n        if (this.viewport) {\n            var dimensions = {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            // If we're cropping, nothing exciting happens for the viewport\n            if (this.currentView === 'crop') {\n                dimensions.width = this.editorWidth;\n                dimensions.height = this.editorHeight;\n            } else {\n                // If this is the first initial reposition, no cropper state yet\n                if (this.cropperState) {\n                    // Recall the state\n                    var state = this.cropperState;\n\n                    var scaledImageDimensions = this.getScaledImageDimensions();\n                    // Make sure we have the correct current image size\n                    var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                    // Set the viewport dimensions\n                    dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                    dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                    // Adjust the image position to show the correct part of the image in the viewport\n                    this.image.set({\n                        left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                        top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                    });\n                } else {\n                    $.extend(dimensions, this.getScaledImageDimensions());\n                }\n            }\n            this.viewport.set(dimensions);\n        }\n    },\n\n    _repositionFocalPoint: function(previousEditorDimensions) {\n        if (this.focalPoint) {\n            var offsetX = this.focalPoint.left - this.editorWidth / 2;\n            var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n            var currentWidth = this.image.width;\n            var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n            var ratio = newWidth / currentWidth / this.scaleFactor;\n\n            offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n            offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n            offsetX *= ratio;\n            offsetY *= ratio;\n\n            this.focalPoint.set({\n                left: this.editorWidth / 2 + offsetX,\n                top: this.editorHeight / 2 + offsetY\n            });\n        }\n    },\n\n    /**\n     * Return true if the image orientation has changed\n     */\n    hasOrientationChanged: function() {\n        return this.viewportRotation % 180 !== 0;\n    },\n\n    /**\n     * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n     */\n    getScaledImageDimensions: function() {\n        if (typeof this.getScaledImageDimensions._ === 'undefined') {\n            this.getScaledImageDimensions._ = {};\n        }\n\n        this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n        this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n        this.getScaledImageDimensions._.dimensions = {};\n        if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n            this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n            this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n        } else {\n            this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n            this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n        }\n\n        return this.getScaledImageDimensions._.dimensions;\n    },\n\n    /**\n     * Set the image dimensions to reflect the current zoom ratio.\n     */\n    _zoomImage: function() {\n        if (typeof this._zoomImage._ === 'undefined') {\n            this._zoomImage._ = {};\n        }\n\n        this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n        this.image.set({\n            width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n            height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n        });\n    },\n\n    /**\n     * Set up listeners for the controls.\n     */\n    _addControlListeners: function() {\n        // Tabs\n        this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n        // Focal point\n        this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n        // Rotate controls\n        this.addListener($('.rotate-left'), 'click', function() {\n            this.rotateImage(-90);\n        });\n        this.addListener($('.rotate-right'), 'click', function() {\n            this.rotateImage(90);\n        });\n        this.addListener($('.flip-vertical'), 'click', function() {\n            this.flipImage('y');\n        });\n        this.addListener($('.flip-horizontal'), 'click', function() {\n            this.flipImage('x');\n        });\n\n        // Straighten slider\n        this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n            onStart: function() {\n                this._showGrid();\n            }.bind(this),\n            onChange: function(slider) {\n                this.straighten(slider);\n            }.bind(this),\n            onEnd: function() {\n                this._hideGrid();\n                this._cleanupFocalPointAfterStraighten();\n            }.bind(this)\n        });\n\n        // Cropper scale modifier key\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = true;\n            }\n        });\n        this.addListener(Garnish.$doc, 'keyup', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = false;\n            }\n        });\n\n        this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n        this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n        this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n    },\n\n    /**\n     * Handle a constraint button click.\n     *\n     * @param ev\n     */\n    _handleConstraintClick: function(ev) {\n        var constraint = $(ev.currentTarget).data('constraint');\n        var $target = $(ev.currentTarget);\n        $target.siblings().removeClass('active');\n        $target.addClass('active');\n\n        if (constraint == 'custom') {\n            this._showCustomConstraint();\n            this._applyCustomConstraint();\n            return;\n        }\n\n        this._hideCustomConstraint();\n\n        this.setCroppingConstraint(constraint);\n        this.enforceCroppingConstraint();\n    },\n\n    /**\n     * Handle an orientation switch click.\n     *\n     * @param ev\n     */\n    _handleOrientationClick: function(ev) {\n        if (ev.currentTarget.value === this.constraintOrientation) {\n            return;\n        }\n        this.constraintOrientation = ev.currentTarget.value;\n\n        var $constraints = $('.constraint.flip', this.$container);\n\n        for (var i = 0; i < $constraints.length; i++) {\n            var $constraint = $($constraints[i]);\n            $constraint.data('constraint', 1 / $constraint.data('constraint'));\n            $constraint.html($constraint.html().split(':').reverse().join(':'));\n        }\n\n        $constraints.filter('.active').click();\n    },\n\n    /**\n     * Apply the custom ratio set in the inputs\n     */\n    _applyCustomConstraint: function() {\n        var constraint = this._getCustomConstraint();\n\n        if (constraint.w > 0 && constraint.h > 0) {\n            this.setCroppingConstraint(constraint.w / constraint.h);\n            this.enforceCroppingConstraint();\n        }\n    },\n\n    /**\n     * Get the custom constraint.\n     *\n     * @returns {{w: *, h: *}}\n     */\n    _getCustomConstraint: function() {\n        var w = parseFloat($('.custom-constraint-w').val());\n        var h = parseFloat($('.custom-constraint-h').val());\n        return {\n            w: isNaN(w) ? 0 : w,\n            h: isNaN(h) ? 0 : h,\n        }\n    },\n\n    /**\n     * Set the custom constraint.\n     *\n     * @param w\n     * @param h\n     */\n    _setCustomConstraint: function(w, h) {\n        $('.custom-constraint-w').val(parseFloat(w));\n        $('.custom-constraint-h').val(parseFloat(h));\n    },\n\n    /**\n     * Hide the custom constraint inputs.\n     */\n    _hideCustomConstraint: function() {\n        this.showingCustomConstraint = false;\n        $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n        $('.orientation', this.$container).removeClass('hidden');\n    },\n\n    /**\n     * Show the custom constraint inputs.\n     */\n    _showCustomConstraint: function() {\n        if (this.showingCustomConstraint) {\n            return;\n        }\n\n        this.showingCustomConstraint = true;\n        $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n        $('.orientation', this.$container).addClass('hidden');\n    },\n\n    /**\n     * Handle tab click.\n     *\n     * @param ev\n     */\n    _handleTabClick: function(ev) {\n        if (!this.animationInProgress) {\n            var $tab = $(ev.currentTarget);\n            var view = $tab.data('view');\n            this.$tabs.removeClass('selected');\n            $tab.addClass('selected');\n            this.showView(view);\n        }\n    },\n\n    /**\n     * Show a view.\n     *\n     * @param view\n     */\n    showView: function(view) {\n        if (this.currentView === view) {\n            return;\n        }\n\n        this.$views.addClass('hidden');\n        var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n        $view.removeClass('hidden');\n\n        if (view === 'rotate') {\n            this.enableSlider();\n        } else {\n            this.disableSlider();\n        }\n\n        // Now that most likely our editor dimensions have changed, time to reposition stuff\n        this.updateSizeAndPosition();\n\n        // See if we have to enable or disable crop mode as we transition between tabs\n        if (this.currentView === 'crop' && view !== 'crop') {\n            this.disableCropMode();\n        } else if (this.currentView !== 'crop' && view === 'crop') {\n            this.enableCropMode();\n        }\n\n        // Mark the current view\n        this.currentView = view;\n    },\n\n    /**\n     * Store the current cropper state.\n     *\n     * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n     * as the basis for recalculating the cropper position and dimensions.\n     *\n     * @param [state]\n     */\n    storeCropperState: function(state) {\n        if (typeof this.storeCropperState._ === 'undefined') {\n            this.storeCropperState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.cropperState = state;\n        } else if (this.clipper) {\n            this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n            this.cropperState = {\n                offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        } else {\n            this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n            this.cropperState = {\n                offsetX: 0,\n                offsetY: 0,\n                height: this.storeCropperState._.dimensions.height,\n                width: this.storeCropperState._.dimensions.width,\n                imageDimensions: this.storeCropperState._.dimensions\n            };\n        }\n    },\n\n    /**\n     * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n     */\n    storeFocalPointState: function(state) {\n        if (typeof this.storeFocalPointState._ === 'undefined') {\n            this.storeFocalPointState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.focalPointState = state;\n        } else if (this.focalPoint) {\n            this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n            this.focalPointState = {\n                offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        }\n    },\n\n    /**\n     * Rotate the image along with the viewport.\n     *\n     * @param degrees\n     */\n    rotateImage: function(degrees) {\n        if (!this.animationInProgress) {\n            // We're not that kind of an establishment, sir.\n            if (degrees !== 90 && degrees !== -90) {\n                return false;\n            }\n\n            this.animationInProgress = true;\n            this.viewportRotation += degrees;\n\n            // Normalize the viewport rotation angle so it's between 0 and 359\n            this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n            var newAngle = this.image.angle + degrees;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var imageZoomRatio;\n\n            if (this.hasOrientationChanged()) {\n                imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n            } else {\n                imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n            }\n\n            // In cases when for some reason we've already zoomed in on the image,\n            // use existing zoom.\n            if (this.zoomRatio > imageZoomRatio) {\n                imageZoomRatio = this.zoomRatio;\n            }\n\n            var viewportProperties = {\n                angle: degrees === 90 ? '+=90' : '-=90'\n            };\n\n            var imageProperties = {\n                angle: newAngle,\n                width: scaledImageDimensions.width * imageZoomRatio,\n                height: scaledImageDimensions.height * imageZoomRatio\n            };\n\n            var scaleFactor = 1;\n            if (this.scaleFactor < 1) {\n                scaleFactor = 1 / this.scaleFactor;\n                this.scaleFactor = 1;\n            } else {\n                if (this.viewport.width > this.editorHeight) {\n                    scaleFactor = this.editorHeight / this.viewport.width;\n                } else if (this.viewport.height > this.editorWidth) {\n                    scaleFactor = this.editorWidth / this.viewport.height;\n                }\n                this.scaleFactor = scaleFactor;\n            }\n\n            if (scaleFactor < 1) {\n                imageProperties.width *= scaleFactor;\n                imageProperties.height *= scaleFactor;\n            }\n\n            var state = this.cropperState;\n\n            // Make sure we reposition the image as well to focus on the same image area\n            var deltaX = state.offsetX;\n            var deltaY = state.offsetY;\n            var angleInRadians = degrees * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n            var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n            imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n            state.offsetX = newDeltaX;\n            state.offsetY = newDeltaY;\n\n            var temp = state.width;\n            state.width = state.height;\n            state.height = temp;\n\n            this.storeCropperState(state);\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            }\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    // If we're zooming the image in or out, better do the same to viewport\n                    var temp = this.viewport.height * scaleFactor;\n                    this.viewport.height = this.viewport.width * scaleFactor;\n                    this.viewport.width = temp;\n                    this.viewport.set({angle: 0});\n                }.bind(this)\n            });\n\n            // Animate the rotation and dimension change\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                    this.image.set({angle: cleanAngle});\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        this._adjustFocalPointByAngle(degrees);\n                        this.straighten(this.straighteningInput);\n                        this.canvas.add(this.focalPoint);\n                    } else {\n                        this._resetFocalPointPosition();\n                    }\n                }.bind(this)\n            });\n        }\n    },\n\n    /**\n     * Flip an image along an axis.\n     *\n     * @param axis\n     */\n    flipImage: function(axis) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            if (this.hasOrientationChanged()) {\n                axis = axis === 'y' ? 'x' : 'y';\n            }\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            } else {\n                this._resetFocalPointPosition();\n            }\n\n            var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            this.straighteningInput.setValue(-this.imageStraightenAngle);\n            this.imageStraightenAngle = -this.imageStraightenAngle;\n            var properties = {\n                angle: this.viewportRotation + this.imageStraightenAngle\n            };\n\n            var deltaY, deltaX;\n            var cropperState = this.cropperState;\n            var focalPointState = this.focalPointState;\n\n            // Reposition the image, viewport, and stored cropper and focal point states.\n            if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                cropperState.offsetX = -cropperState.offsetX;\n                focalPointState.offsetX = -focalPointState.offsetX;\n                deltaX = this.image.left - editorCenter.x;\n                properties.left = editorCenter.x - deltaX;\n            } else {\n                cropperState.offsetY = -cropperState.offsetY;\n                focalPointState.offsetY = -focalPointState.offsetY;\n                deltaY = this.image.top - editorCenter.y;\n                properties.top = editorCenter.y - deltaY;\n            }\n\n            if (axis === 'y') {\n                properties.scaleY = this.image.scaleY * -1;\n                this.flipData.y = 1 - this.flipData.y;\n            } else {\n                properties.scaleX = this.image.scaleX * -1;\n                this.flipData.x = 1 - this.flipData.x;\n            }\n\n            this.storeCropperState(cropperState);\n            this.storeFocalPointState(focalPointState);\n\n            this.image.animate(properties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        // Well this is handy\n                        this._adjustFocalPointByAngle(0);\n                        this.canvas.add(this.focalPoint);\n                    }\n                }.bind(this)\n            });\n        }\n    },\n\n    /**\n     * Perform the straightening with input slider.\n     *\n     * @param {Craft.SlideRuleInput} slider\n     */\n    straighten: function(slider) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            var previousAngle = this.image.angle;\n\n            this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n            // Straighten the image\n            this.image.set({\n                angle: this.viewportRotation + this.imageStraightenAngle\n            });\n\n            // Set the new zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            this._zoomImage();\n\n            if (this.cropperState) {\n                this._adjustEditorElementsOnStraighten(previousAngle);\n            }\n\n            this.renderImage();\n\n            this.animationInProgress = false;\n        }\n    },\n\n    /**\n     * Adjust the cropped viewport when straightening the image to correct for\n     * bumping into edges, keeping focus on the cropped area center and to\n     * maintain the illusion that the image is being straightened relative to the viewport center.\n     *\n     * @param {integer} previousAngle integer the previous image angle before straightening\n     */\n    _adjustEditorElementsOnStraighten: function(previousAngle) {\n        var scaledImageDimensions = this.getScaledImageDimensions();\n        var angleDelta = this.image.angle - previousAngle;\n        var state = this.cropperState;\n\n        var currentZoomRatio = this.zoomRatio;\n        var adjustmentRatio = 1;\n\n        var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n        do {\n            // Get the cropper center coordinates\n            var cropperCenterX = state.offsetX;\n            var cropperCenterY = state.offsetY;\n            var angleInRadians = angleDelta * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n            newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n            sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Figure out the final image offset to keep the viewport focused where we need it\n            deltaX = newCenterX * currentZoomRatio * sizeFactor;\n            deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n            // If the image would creep in the viewport, figure out how to math around it.\n            var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n            var rectangle = {\n                width: this.viewport.width,\n                height: this.viewport.height,\n                left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n            };\n            adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n            currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n            // If we had to make adjustments, do the calculations again\n        } while (adjustmentRatio !== 1);\n\n        // Reposition the image correctly\n        this.image.set({\n            left: this.editorWidth / 2 - deltaX,\n            top: this.editorHeight / 2 - deltaY\n        });\n\n        // Finally, store the new cropper state to reflect the rotation change.\n        state.offsetX = newCenterX;\n        state.offsetY = newCenterY;\n        state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n        state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n        this.storeCropperState(state);\n\n        // Zoom the image in and we're done.\n        this.zoomRatio = currentZoomRatio;\n\n        if (this.focalPoint) {\n            this._adjustFocalPointByAngle(angleDelta);\n\n            if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 0});\n            } else {\n                this.focalPoint.set({opacity: 1});\n            }\n        } else if (angleDelta !== 0) {\n            this._resetFocalPointPosition();\n        }\n\n        this._zoomImage();\n    },\n\n    /**\n     * If focal point is active and outside of viewport after straightening, reset it.\n     */\n    _cleanupFocalPointAfterStraighten: function() {\n        if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n            this.focalPoint.set({opacity: 1});\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n            this.toggleFocalPoint();\n        }\n    },\n\n    /**\n     * Reset focal point to the middle of image.\n     */\n    _resetFocalPointPosition: function() {\n        var state = this.focalPointState;\n        state.offsetX = 0;\n        state.offsetY = 0;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n     *\n     * @param object\n     * @param containingObject\n     *\n     * @returns {boolean}\n     */\n    _isCenterInside: function(object, containingObject) {\n        return (object.left > containingObject.left - containingObject.width / 2\n            && object.top > containingObject.top - containingObject.height / 2\n            && object.left < containingObject.left + containingObject.width / 2\n            && object.top < containingObject.top + containingObject.height / 2\n        );\n    },\n\n    /**\n     * Adjust the focal point by an angle in degrees.\n     * @param angle\n     */\n    _adjustFocalPointByAngle: function(angle) {\n        var angleInRadians = angle * (Math.PI / 180);\n        var state = this.focalPointState;\n\n        var focalX = state.offsetX;\n        var focalY = state.offsetY;\n\n        // Calculate how the focal point would need to move in a circle to keep on the same spot\n        // on the image if it was rotated with zoom intact.\n        var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n        var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n        var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n        var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n        var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n        this.focalPoint.left = this.image.left + adjustedFocalX;\n        this.focalPoint.top = this.image.top + adjustedFocalY;\n\n        state.offsetX = newFocalX;\n        state.offsetY = newFocalY;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n     * If the rectangle fits, 1 will be returned.\n     *\n     * @param rectangle\n     * @param containingVertices\n     */\n    _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n        var rectangleVertices = this._getRectangleVertices(rectangle);\n        var vertex;\n\n        // Check if any of the viewport vertices end up out of bounds\n        for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n            vertex = rectangleVertices[verticeIndex];\n\n            if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                break;\n            }\n\n            vertex = false;\n        }\n\n        // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n        var adjustmentRatio;\n\n        if (!vertex) {\n            adjustmentRatio = 1;\n        } else {\n            // Find out which edge got crossed by the vertex\n            var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n            var rectangleCenter = {\n                x: rectangle.left + rectangle.width / 2,\n                y: rectangle.top + rectangle.height / 2\n            };\n\n            // Calculate how much further that edge needs to be.\n            // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n            var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n            var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n            // Adjust the zoom ratio\n            adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n        }\n\n        return adjustmentRatio;\n    },\n\n    /**\n     * Save the image.\n     *\n     * @param ev\n     */\n    saveImage: function(ev) {\n        var $button = $(ev.currentTarget);\n        if ($button.hasClass('disabled')) {\n            return false;\n        }\n\n        $('.btn', this.$buttons).addClass('disabled');\n        this.$buttons.append('<div class=\"spinner\"></div>');\n\n        var postData = {\n            assetId: this.assetId,\n            viewportRotation: this.viewportRotation,\n            imageRotation: this.imageStraightenAngle,\n            replace: $button.hasClass('replace') ? 1 : 0\n        };\n\n        if (this.cropperState) {\n            var cropData = {};\n\n            cropData.height = this.cropperState.height;\n            cropData.width = this.cropperState.width;\n            cropData.offsetX = this.cropperState.offsetX;\n            cropData.offsetY = this.cropperState.offsetY;\n\n            postData.imageDimensions = this.cropperState.imageDimensions;\n\n            postData.cropData = cropData;\n        } else {\n            postData.imageDimensions = this.getScaledImageDimensions();\n        }\n\n        if (this.focalPoint) {\n            postData.focalPoint = this.focalPointState;\n        }\n\n        postData.flipData = this.flipData;\n        postData.zoom = this.zoomRatio;\n\n        Craft.postActionRequest('assets/save-image', postData, function(data) {\n            this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n            if (data.error) {\n                alert(data.error);\n                return;\n            }\n\n            this.onSave();\n            this.hide();\n            Craft.cp.runQueue();\n        }.bind(this));\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToCoverRatio: function(dimensions) {\n        // Convert the angle to radians\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        // Calculate the dimensions of the scaled image using the magic of math\n        var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n        var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n        // Calculate the ratio\n        return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToFitRatio: function(dimensions) {\n        // Get the bounding box for a rotated image\n        var boundingBox = this._getImageBoundingBox(dimensions);\n\n        // Scale the bounding box to fit\n        var scale = 1;\n        if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n            var vertScale = this.editorHeight / boundingBox.height;\n            var horiScale = this.editorWidth / boundingBox.width;\n            scale = Math.min(horiScale, vertScale);\n        }\n\n        return scale;\n    },\n\n    /**\n     * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n     */\n    getCombinedZoomRatio: function(dimensions) {\n        return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n    },\n\n    /**\n     * Draw the grid.\n     *\n     * @private\n     */\n    _showGrid: function() {\n        if (!this.grid) {\n            var strokeOptions = {\n                strokeWidth: 1,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            var lineCount = 8;\n            var gridWidth = this.viewport.width;\n            var gridHeight = this.viewport.height;\n            var xStep = gridWidth / (lineCount + 1);\n            var yStep = gridHeight / (lineCount + 1);\n\n            var grid = [\n                new fabric.Rect({\n                    strokeWidth: 2,\n                    stroke: 'rgba(255,255,255,1)',\n                    originX: 'center',\n                    originY: 'center',\n                    width: gridWidth,\n                    height: gridHeight,\n                    left: gridWidth / 2,\n                    top: gridHeight / 2,\n                    fill: 'rgba(255,255,255,0)'\n                })\n            ];\n\n            var i;\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n            }\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n            }\n\n            this.grid = new fabric.Group(grid, {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                angle: this.viewport.angle\n            });\n\n            this.canvas.add(this.grid);\n            this.renderImage();\n        }\n    },\n\n    /**\n     * Hide the grid\n     */\n    _hideGrid: function() {\n        this.canvas.remove(this.grid);\n        this.grid = null;\n        this.renderImage();\n    },\n\n    /**\n     * Remove all the events when hiding the editor.\n     */\n    onFadeOut: function() {\n        this.destroy();\n    },\n\n    /**\n     * Make sure underlying content is not scrolled by accident.\n     */\n    show: function() {\n        this.base();\n\n        $('html').addClass('noscroll');\n    },\n\n    /**\n     * Allow the content to scroll.\n     */\n    hide: function() {\n        this.removeAllListeners();\n        this.straighteningInput.removeAllListeners();\n        $('html').removeClass('noscroll');\n        this.base();\n    },\n\n    /**\n     * onSave callback.\n     */\n    onSave: function() {\n        this.settings.onSave();\n        this.trigger('save');\n    },\n\n    /**\n     * Enable the rotation slider.\n     */\n    enableSlider: function() {\n        this.$imageTools.removeClass('hidden');\n    },\n\n    /**\n     * Disable the rotation slider.\n     */\n    disableSlider: function() {\n        this.$imageTools.addClass('hidden');\n    },\n\n    /**\n     * Switch to crop mode.\n     */\n    enableCropMode: function() {\n        var imageDimensions = this.getScaledImageDimensions();\n        this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n        var viewportProperties = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var callback = function() {\n            this._setFittedImageVerticeCoordinates();\n\n            // Restore cropper\n            var state = this.cropperState;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Restore based on the stored information\n            var cropperData = {\n                left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                width: state.width * sizeFactor * this.zoomRatio,\n                height: state.height * sizeFactor * this.zoomRatio\n            };\n\n            this._showCropper(cropperData);\n\n            if (this.focalPoint) {\n                sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        }.bind(this);\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Switch out of crop mode.\n     */\n    disableCropMode: function() {\n        var viewportProperties = {};\n\n        this._hideCropper();\n        var imageDimensions = this.getScaledImageDimensions();\n        var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n        var inverseZoomFactor = targetZoom / this.zoomRatio;\n        this.zoomRatio = targetZoom;\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var offsetX = this.clipper.left - this.image.left;\n        var offsetY = this.clipper.top - this.image.top;\n\n        var imageOffsetX = offsetX * inverseZoomFactor;\n        var imageOffsetY = offsetY * inverseZoomFactor;\n        imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n        imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n        // Calculate the cropper dimensions after all the zooming\n        viewportProperties.height = this.clipper.height * inverseZoomFactor;\n        viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n        if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n            if (this.focalPoint) {\n                this.toggleFocalPoint();\n            }\n\n            this._resetFocalPointPosition();\n        }\n\n        var callback = function() {\n            // Reposition focal point correctly\n            if (this.focalPoint) {\n                var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        }.bind(this);\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Transition between cropping end editor modes\n     *\n     * @param callback\n     * @param imageProperties\n     * @param viewportProperties\n     * @private\n     */\n    _editorModeTransition: function(callback, imageProperties, viewportProperties) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            // Without this it looks semi-broken during animation\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n                this.renderImage();\n            }\n\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    callback();\n                    this.animationInProgress = false;\n                    this.renderImage();\n                }.bind(this)\n            });\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration\n            });\n        }\n    },\n\n    _showSpinner: function() {\n        this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n        var canvas = document.getElementById('spinner-canvas');\n        var context = canvas.getContext('2d');\n        var start = new Date();\n        var lines = 16,\n            cW = context.canvas.width,\n            cH = context.canvas.height;\n\n        var draw = function() {\n            var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n            context.save();\n            context.clearRect(0, 0, cW, cH);\n            context.translate(cW / 2, cH / 2);\n            context.rotate(Math.PI * 2 * rotation);\n            for (var i = 0; i < lines; i++) {\n                context.beginPath();\n                context.rotate(Math.PI * 2 / lines);\n                context.moveTo(cW / 10, 0);\n                context.lineTo(cW / 4, 0);\n                context.lineWidth = cW / 30;\n                context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                context.stroke();\n            }\n            context.restore();\n        };\n        this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n    },\n\n    _hideSpinner: function() {\n        window.clearInterval(this.spinnerInterval);\n        this.$spinnerCanvas.remove();\n        this.$spinnerCanvas = null;\n    },\n\n    /**\n     * Show the cropper.\n     *\n     * @param clipperData\n     */\n    _showCropper: function(clipperData) {\n        this._setupCropperLayer(clipperData);\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Hide the cropper.\n     */\n    _hideCropper: function() {\n        if (this.clipper) {\n            this.croppingCanvas.remove(this.clipper);\n            this.croppingCanvas.remove(this.croppingShade);\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n\n            this.croppingCanvas = null;\n            this.renderCropper = null;\n        }\n    },\n\n    /**\n     * Draw the cropper.\n     *\n     * @param clipperData\n     */\n    _setupCropperLayer: function(clipperData) {\n        // Set up the canvas for cropper\n        this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n            backgroundColor: 'rgba(0,0,0,0)',\n            hoverCursor: 'default',\n            selection: false\n        });\n\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        this.renderCropper = function() {\n            Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n        }.bind(this);\n\n        $('#cropping-canvas', this.$editorContainer).css({\n            position: 'absolute',\n            top: 0,\n            left: 0\n        });\n\n        this.croppingShade = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: this.editorWidth,\n            height: this.editorHeight,\n            fill: 'rgba(0,0,0,0.7)'\n        });\n\n        // Calculate the cropping rectangle size\n        var imageDimensions = this.getScaledImageDimensions();\n        var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n        var rectWidth = imageDimensions.width / rectangleRatio;\n        var rectHeight = imageDimensions.height / rectangleRatio;\n\n        if (this.hasOrientationChanged()) {\n            var temp = rectHeight;\n            rectHeight = rectWidth;\n            rectWidth = temp;\n        }\n\n        // Set up the cropping viewport rectangle\n        this.clipper = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: rectWidth,\n            height: rectHeight,\n            stroke: 'black',\n            fill: 'rgba(128,0,0,1)',\n            strokeWidth: 0\n        });\n\n        // Set from clipper data\n        if (clipperData) {\n            this.clipper.set(clipperData);\n        }\n\n        this.clipper.globalCompositeOperation = 'destination-out';\n        this.croppingCanvas.add(this.croppingShade);\n        this.croppingCanvas.add(this.clipper);\n    },\n\n    /**\n     * Redraw the cropper boundaries\n     */\n    _redrawCropperElements: function() {\n        if (typeof this._redrawCropperElements._ === 'undefined') {\n            this._redrawCropperElements._ = {};\n        }\n\n        if (this.cropperHandles) {\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n        }\n        this._redrawCropperElements._.lineOptions = {\n            strokeWidth: 4,\n            stroke: 'rgb(255,255,255)',\n            fill: false\n        };\n\n        this._redrawCropperElements._.gridOptions = {\n            strokeWidth: 2,\n            stroke: 'rgba(255,255,255,0.5)'\n        };\n\n        // Draw the handles\n        this._redrawCropperElements._.pathGroup = [\n            new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n        ];\n\n        this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n            left: this.clipper.left,\n            top: this.clipper.top,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        // Don't forget the rectangle\n        this.croppingRectangle = new fabric.Rect({\n            left: this.clipper.left,\n            top: this.clipper.top,\n            width: this.clipper.width,\n            height: this.clipper.height,\n            fill: 'rgba(0,0,0,0)',\n            stroke: 'rgba(255,255,255,0.8)',\n            strokeWidth: 2,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        this.cropperGrid = new fabric.Group(\n            [\n                new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n            ], {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n        this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n        this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n        if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n            this._redrawCropperElements._.cropTextTop -= 24;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n        }\n\n        this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n            left: this.croppingRectangle.left,\n            top: this._redrawCropperElements._.cropTextTop,\n            fontSize: 13,\n            fill: 'rgb(200,200,200)',\n            backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n            font: 'Craft',\n            width: 70,\n            height: 15,\n            originX: 'center',\n            originY: 'center',\n            textAlign: 'center'\n        });\n\n        this.croppingCanvas.add(this.cropperHandles);\n        this.croppingCanvas.add(this.cropperGrid);\n        this.croppingCanvas.add(this.croppingRectangle);\n        this.croppingCanvas.add(this.croppingAreaText);\n    },\n\n    /**\n     * Reposition the cropper when the image editor dimensions change.\n     *\n     * @param previousImageArea\n     */\n    _repositionCropper: function(previousImageArea) {\n        if (!this.croppingCanvas) {\n            return;\n        }\n\n        // Get the current clipper offset relative to center\n        var currentOffset = {\n            x: this.clipper.left - this.croppingCanvas.width / 2,\n            y: this.clipper.top - this.croppingCanvas.height / 2\n        };\n\n        // Resize the cropping canvas\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        // Check by what factor will the new final bounding box be different\n        var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n        var areaFactor = currentArea.width / previousImageArea.width;\n\n        // Adjust the cropper size to scale along with the bounding box\n        this.clipper.width = Math.round(this.clipper.width * areaFactor);\n        this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n        // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n        // for editor size changes and then multiply by the size factor to adjust for image size changes\n        this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n        this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n        // Resize the cropping shade\n        this.croppingShade.set({\n            width: this.editorWidth,\n            height: this.editorHeight,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        });\n\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Get the dimensions of a bounding rectangle by a set of four coordinates.\n     *\n     * @param coordinateSet\n     */\n    _getBoundingRectangle: function(coordinateSet) {\n        return {\n            width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n            height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n        };\n    },\n\n    /**\n     * Handle the mouse being clicked.\n     *\n     * @param ev\n     */\n    _handleMouseDown: function(ev) {\n        // Focal before resize before dragging\n        var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n        var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n        var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n        if (handle || move || focal) {\n            this.previousMouseX = ev.pageX;\n            this.previousMouseY = ev.pageY;\n\n            if (focal) {\n                this.draggingFocal = true;\n            } else if (handle) {\n                this.scalingCropper = handle;\n            } else if (move) {\n                this.draggingCropper = true;\n            }\n        }\n    },\n\n    /**\n     * Handle the mouse being moved.\n     *\n     * @param ev\n     */\n    _handleMouseMove: function(ev) {\n        if (this.mouseMoveEvent !== null) {\n            Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n        }\n        this.mouseMoveEvent = ev;\n    },\n\n    _handleMouseMoveInternal: function() {\n        if (this.mouseMoveEvent === null) {\n            return;\n        }\n\n        if (this.focalPoint && this.draggingFocal) {\n            this._handleFocalDrag(this.mouseMoveEvent);\n            this.storeFocalPointState();\n            this.renderImage();\n        } else if (this.draggingCropper || this.scalingCropper) {\n            if (this.draggingCropper) {\n                this._handleCropperDrag(this.mouseMoveEvent);\n            } else {\n                this._handleCropperResize(this.mouseMoveEvent);\n            }\n\n            this._redrawCropperElements();\n\n            this.storeCropperState();\n            this.renderCropper();\n        } else {\n            this._setMouseCursor(this.mouseMoveEvent);\n        }\n\n        this.previousMouseX = this.mouseMoveEvent.pageX;\n        this.previousMouseY = this.mouseMoveEvent.pageY;\n\n        this.mouseMoveEvent = null;\n    },\n\n    /**\n     * Handle mouse being released.\n     *\n     * @param ev\n     */\n    _handleMouseUp: function(ev) {\n        this.draggingCropper = false;\n        this.scalingCropper = false;\n        this.draggingFocal = false;\n    },\n\n    /**\n     * Handle mouse out\n     *\n     * @param ev\n     */\n    _handleMouseOut: function(ev) {\n        this._handleMouseUp(ev);\n        this.mouseMoveEvent = ev;\n        this._handleMouseMoveInternal();\n    },\n\n    /**\n     * Handle cropper being dragged.\n     *\n     * @param ev\n     */\n    _handleCropperDrag: function(ev) {\n        if (typeof this._handleCropperDrag._ === 'undefined') {\n            this._handleCropperDrag._ = {};\n        }\n\n        this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n            return false;\n        }\n\n        this._handleCropperDrag._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n        // If this would drag it outside of the image\n        if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n            // Try to find the furthest point in the same general direction where we can drag it\n\n            // Delta iterator setup\n            this._handleCropperDrag._.dxi = 0;\n            this._handleCropperDrag._.dyi = 0;\n            this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n            this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n            // The furthest we can move\n            this._handleCropperDrag._.furthest = 0;\n            this._handleCropperDrag._.furthestDeltas = {};\n\n            // Loop through every combination of dragging it not so far\n            for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                    this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                    if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                        if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                            this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                            this._handleCropperDrag._.furthestDeltas = {\n                                x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                            }\n                        }\n                    }\n                }\n            }\n\n            // REALLY can't drag along the cursor movement\n            if (this._handleCropperDrag._.furthest == 0) {\n                return;\n            } else {\n                this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n            }\n        }\n\n        this.clipper.set({\n            left: this.clipper.left + this._handleCropperDrag._.deltaX,\n            top: this.clipper.top + this._handleCropperDrag._.deltaY\n        });\n    },\n\n    /**\n     * Handle focal point being dragged.\n     *\n     * @param ev\n     */\n    _handleFocalDrag: function(ev) {\n        if (typeof this._handleFocalDrag._ === 'undefined') {\n            this._handleFocalDrag._ = {};\n        }\n\n        if (this.focalPoint) {\n            this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                return;\n            }\n\n            this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n            this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n            // Just make sure that the focal point stays inside the image\n            if (this.currentView === 'crop') {\n                if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                    return;\n                }\n            } else {\n                if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                    && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                    return;\n                }\n            }\n\n            this.focalPoint.set({\n                left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n            });\n        }\n    },\n\n    /**\n     * Set the cropping constraint\n     * @param constraint\n     */\n    setCroppingConstraint: function(constraint) {\n        // In case this caused the sidebar width to change.\n        this.updateSizeAndPosition();\n\n        switch (constraint) {\n            case 'none':\n                this.croppingConstraint = false;\n                break;\n\n            case 'original':\n                this.croppingConstraint = this.originalWidth / this.originalHeight;\n                break;\n\n            case 'current':\n                this.croppingConstraint = this.clipper.width / this.clipper.height;\n                break;\n\n            case 'custom':\n\n                break;\n            default:\n                this.croppingConstraint = parseFloat(constraint);\n\n                break;\n        }\n    },\n\n    /**\n     * Enforce the cropping constraint\n     */\n    enforceCroppingConstraint: function() {\n        if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n            this.enforceCroppingConstraint._ = {};\n        }\n\n        if (this.animationInProgress || !this.croppingConstraint) {\n            return;\n        }\n\n        this.animationInProgress = true;\n\n        // Mock the clipping rectangle for collision tests\n        this.enforceCroppingConstraint._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        // If wider than it should be\n        if (this.clipper.width > this.clipper.height * this.croppingConstraint) {\n            this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n            // Make it taller!\n            this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n            // Getting really awkward having to convert between 0;0 being center or top-left corner.\n            this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n            // If the clipper would end up out of bounds, make it narrower instead.\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n            }\n        } else {\n            // Follow the same pattern, if taller than it should be.\n            this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n            this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n            this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n            }\n        }\n\n        this.enforceCroppingConstraint._.properties = {\n            height: this.enforceCroppingConstraint._.rectangle.height,\n            width: this.enforceCroppingConstraint._.rectangle.width\n        };\n\n        // Make sure to redraw cropper handles and gridlines when resizing\n        this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n            onChange: function() {\n                this._redrawCropperElements();\n                this.croppingCanvas.renderAll();\n            }.bind(this),\n            duration: this.settings.animationDuration,\n            onComplete: function() {\n                this._redrawCropperElements();\n                this.animationInProgress = false;\n                this.renderCropper();\n                this.storeCropperState();\n            }.bind(this)\n        });\n    },\n\n    /**\n     * Handle cropper being resized.\n     *\n     * @param ev\n     */\n    _handleCropperResize: function(ev) {\n        if (typeof this._handleCropperResize._ === 'undefined') {\n            this._handleCropperResize._ = {};\n        }\n\n        // Size deltas\n        this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n            this._handleCropperResize._.deltaX = 0;\n        }\n\n        if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n            this._handleCropperResize._.deltaY = 0;\n        }\n\n        if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n            return;\n        }\n\n        // Translate from center-center origin to absolute coords\n        this._handleCropperResize._.startingRectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        }\n\n        this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n        if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n            return;\n        }\n\n        if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n            return;\n        }\n\n        // Translate back to center-center origin.\n        this.clipper.set({\n            top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n            left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n            width: this._handleCropperResize._.rectangle.width,\n            height: this._handleCropperResize._.rectangle.height\n        });\n\n        this._redrawCropperElements();\n    },\n\n    _calculateNewCropperSizeByDeltas: function(startingRectangle, deltaX, deltaY, cropperDirection) {\n        if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n            this._calculateNewCropperSizeByDeltas._ = {};\n        }\n\n        // Center deltas\n        this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n        this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n        this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n        this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n        this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n        // Lock the aspect ratio if needed\n        if (this.croppingConstraint) {\n            this._calculateNewCropperSizeByDeltas._.change = 0;\n\n            // Take into account the mouse direction and figure out the \"real\" change in cropper size\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'br':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n\n            if (this.croppingConstraint > 1) {\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n            } else {\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n            // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n        } else {\n            // Lock the aspect ratio\n            if (this.shiftKeyHeld &&\n                (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                    cropperDirection === 'bl' || cropperDirection === 'br')\n            ) {\n                this._calculateNewCropperSizeByDeltas._.ratio;\n                if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                }\n            }\n\n            if (cropperDirection.match(/t/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/b/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/r/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n            if (cropperDirection.match(/l/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n        }\n\n        this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n        this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n        this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n        this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n        return this._calculateNewCropperSizeByDeltas._.rectangle;\n    },\n\n    /**\n     * Set mouse cursor by it's position over cropper.\n     *\n     * @param ev\n     */\n    _setMouseCursor: function(ev) {\n        if (typeof this._setMouseCursor._ === 'undefined') {\n            this._setMouseCursor._ = {};\n        }\n\n        if (Garnish.isMobileBrowser(true)) {\n            return;\n        }\n        this._setMouseCursor._.cursor = 'default';\n        this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n        if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n            this._setMouseCursor._.cursor = 'pointer';\n        } else if (this._setMouseCursor._.handle) {\n            if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                this._setMouseCursor._.cursor = 'ns-resize';\n            } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                this._setMouseCursor._.cursor = 'ew-resize';\n            } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                this._setMouseCursor._.cursor = 'nwse-resize';\n            } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                this._setMouseCursor._.cursor = 'nesw-resize';\n            }\n        } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n            this._setMouseCursor._.cursor = 'move';\n        }\n\n        $('.body').css('cursor', this._setMouseCursor._.cursor);\n    },\n\n    /**\n     * Test whether the mouse cursor is on any cropper handles.\n     *\n     * @param ev\n     */\n    _cropperHandleHitTest: function(ev) {\n        if (typeof this._cropperHandleHitTest._ === 'undefined') {\n            this._cropperHandleHitTest._ = {};\n        }\n\n        this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n        this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n        this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n        this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n        this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n        this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n        // Left side top/bottom\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tl';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'bl';\n            }\n        }\n        // Right side top/bottom\n        if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tr';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'br';\n            }\n        }\n\n        // Left or right\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'l';\n        }\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'r';\n        }\n\n        // Top or bottom\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 't';\n        }\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 'b';\n        }\n\n        return false;\n    },\n\n    /**\n     * Test whether the mouse cursor is on a fabricJS object.\n     *\n     * @param object\n     * @param event\n     *\n     * @return boolean\n     */\n\n    _isMouseOver: function(event, object) {\n        if (typeof this._isMouseOver._ === 'undefined') {\n            this._isMouseOver._ = {};\n        }\n\n        this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n        this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n        this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._isMouseOver._.lb = object.left - object.width / 2;\n        this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n        this._isMouseOver._.tb = object.top - object.height / 2;\n        this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n        return (\n            this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n            this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n            this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n            this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n        );\n    },\n\n    /**\n     * Get vertices of a rectangle defined by left,top,height and width properties.\n     * Optionally it's possible to provide offsetX and offsetY values.\n     * Left and top properties of rectangle reference the top-left corner.\n     *\n     * @param rectangle\n     * @param [offsetX]\n     * @param [offsetY]\n     */\n    _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n        if (typeof this._getRectangleVertices._ === 'undefined') {\n            this._getRectangleVertices._ = {};\n        }\n\n        if (typeof offsetX === 'undefined') {\n            offsetX = 0;\n        }\n        if (typeof offsetY === 'undefined') {\n            offsetY = 0;\n        }\n\n        this._getRectangleVertices._.topLeft = {\n            x: rectangle.left + offsetX,\n            y: rectangle.top + offsetY\n        };\n\n        this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n        this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n        this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n        return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n    },\n\n    /**\n     * Set image vertice coordinates for an image that's been zoomed to fit.\n     */\n    _setFittedImageVerticeCoordinates: function() {\n        this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n    },\n\n    /**\n     * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n     * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n     *\n     * @param zoomMode\n     */\n    getImageVerticeCoords: function(zoomMode) {\n        var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n        var imageDimensions = this.getScaledImageDimensions();\n\n        var ratio;\n\n        if (typeof zoomMode === \"number\") {\n            ratio = zoomMode;\n        } else if (zoomMode === \"cover\") {\n            ratio = this.getZoomToCoverRatio(imageDimensions);\n        } else {\n            ratio = this.getZoomToFitRatio(imageDimensions);\n        }\n\n        // Get the dimensions of the scaled image\n        var scaledHeight = imageDimensions.height * ratio;\n        var scaledWidth = imageDimensions.width * ratio;\n\n        // Calculate the segments of the containing box for the image.\n        // When referring to top/bottom or right/left segments, these are on the\n        // right-side and bottom projection of the containing box for the zoomed out image.\n        var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n        var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n        var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n        var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n        // Calculate the offsets from editor box for the image-containing box\n        var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n        var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n        // Finally, calculate the image vertice coordinates\n        return {\n            a: {\n                x: horizontalOffset + rightHorizontalSegment,\n                y: verticalOffset\n            },\n            b: {\n                x: this.editorWidth - horizontalOffset,\n                y: verticalOffset + topVerticalSegment\n            },\n            c: {\n                x: horizontalOffset + leftHorizontalSegment,\n                y: this.editorHeight - verticalOffset\n            },\n            d: {\n                x: horizontalOffset,\n                y: verticalOffset + bottomVerticalSegment\n            }\n        };\n    },\n\n    /**\n     * Debug stuff by continuously rendering a fabric object on canvas.\n     *\n     * @param fabricObj\n     */\n    _debug: function(fabricObj) {\n        this.canvas.remove(this.debugger);\n        this.debugger = fabricObj;\n        this.canvas.add(this.debugger);\n    },\n\n    /**\n     * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n     * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n     * return true if the point is in the rectangle.\n     *\n     * Adapted from: http://stackoverflow.com/a/2763387/2040791\n     *\n     * @param points\n     * @param rectangle\n     */\n    arePointsInsideRectangle: function(points, rectangle) {\n        if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n            this.arePointsInsideRectangle._ = {};\n        }\n\n        // Pre-calculate the vectors and scalar products for two rectangle edges\n        this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n        this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n        this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n        this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n        for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n            this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n            // Calculate the vectors for two rectangle sides and for\n            // the vector from vertices a and b to the point P\n            this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n            this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n            // Calculate scalar or dot products for some vector combinations\n            this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n            this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n            this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n            this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n            if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                return false;\n            }\n        }\n\n        return true;\n    },\n\n    /**\n     * Returns an object representing the vector between points a and b.\n     *\n     * @param a\n     * @param b\n     */\n    _getVector: function(a, b) {\n        return {x: b.x - a.x, y: b.y - a.y};\n    },\n\n    /**\n     * Returns the scalar product of two vectors\n     *\n     * @param a\n     * @param b\n     */\n    _getScalarProduct: function(a, b) {\n        return a.x * b.x + a.y * b.y;\n    },\n\n    /**\n     * Returns the magnitude of a vector_redrawCropperElements\n     * .\n     *\n     * @param vector\n     */\n    _getVectorMagnitude: function(vector) {\n        return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n    },\n\n    /**\n     * Returns the angle between two vectors in degrees with two decimal points\n     *\n     * @param a\n     * @param b\n     */\n    _getAngleBetweenVectors: function(a, b) {\n        return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n    },\n\n    /**\n     * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n     *\n     * @param rectangle\n     * @param vertex\n     *\n     * @returns {*}\n     */\n    _getEdgeCrossed: function(rectangle, vertex) {\n        // Determine over which edge the vertex is\n        var edgePoints = [\n            [rectangle.a, rectangle.b],\n            [rectangle.b, rectangle.c],\n            [rectangle.c, rectangle.d],\n            [rectangle.d, rectangle.a]\n        ];\n\n        var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n        var smallestDiff = 180;\n        var edgeCrossed = null;\n\n        // Test each edge\n        for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n            var edge = edgePoints[edgeIndex];\n            var toCenter = this._getVector(edge[0], centerPoint);\n            var edgeVector = this._getVector(edge[0], edge[1]);\n            var toVertex = this._getVector(edge[0], vertex);\n\n            // If the angle between toCenter/toVertex is the sum of\n            // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n            // the edgeVector is between the other two meaning that this is the offending vertex.\n            // To avoid the rounding errors, we'll take the closest match\n            var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n            if (diff < smallestDiff) {\n                smallestDiff = diff;\n                edgeCrossed = edge;\n            }\n        }\n\n        return edgeCrossed;\n    },\n\n    /**\n     * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n     *\n     * @param dimensions\n     */\n    _getImageBoundingBox: function(dimensions) {\n        var box = {};\n\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        var proportion = dimensions.height / dimensions.width;\n        box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n        box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n        if (this.hasOrientationChanged()) {\n            var temp = box.width;\n            box.width = box.height;\n            box.height = temp;\n        }\n\n        return box;\n    }\n}, {\n    defaults: {\n        animationDuration: 100,\n        allowSavingAsNew: true,\n        onSave: $.noop,\n        allowDegreeFractions: null,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend({\n    $includeSubfoldersContainer: null,\n    $includeSubfoldersCheckbox: null,\n    showingIncludeSubfoldersCheckbox: false,\n\n    $uploadButton: null,\n    $uploadInput: null,\n    $progressBar: null,\n    $folders: null,\n\n    uploader: null,\n    promptHandler: null,\n    progressBar: null,\n\n    _uploadTotalFiles: 0,\n    _uploadFileProgress: {},\n    _uploadedAssetIds: [],\n    _currentUploaderSettings: {},\n\n    _assetDrag: null,\n    _folderDrag: null,\n    _expandDropTargetFolderTimeout: null,\n    _tempExpandedFolders: [],\n\n    _fileConflictTemplate: {\n        choices: [\n            {value: 'keepBoth', title: Craft.t('app', 'Keep both')}, {value: 'replace', title: Craft.t('app', 'Replace it')}\n        ]\n    },\n    _folderConflictTemplate: {\n        choices: [\n            {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')}, {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n        ]\n    },\n\n    init: function(elementType, $container, settings) {\n        this.base(elementType, $container, settings);\n\n        if (this.settings.context === 'index') {\n            if (!this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n        } else {\n            this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n            if (this.settings.modal) {\n                this.settings.modal.on('updateSizeAndPosition', $.proxy(this, '_positionProgressBar'));\n            }\n        }\n    },\n\n    initSources: function() {\n        if (this.settings.context === 'index' && !this._folderDrag) {\n            this._initIndexPageMode();\n        }\n\n        return this.base();\n    },\n\n    initSource: function($source) {\n        this.base($source);\n\n        this._createFolderContextMenu($source);\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                if ($source.data('folder-id')) {\n                    this._folderDrag.addItems($source.parent());\n                }\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    deinitSource: function($source) {\n        this.base($source);\n\n        // Does this source have a context menu?\n        var contextMenu = $source.data('contextmenu');\n\n        if (contextMenu) {\n            contextMenu.destroy();\n        }\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                this._folderDrag.removeItems($source.parent());\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    _getSourceLevel: function($source) {\n        return $source.parentsUntil('nav', 'ul').length;\n    },\n\n    /**\n     * Initialize the index page-specific features\n     */\n    _initIndexPageMode: function() {\n        if (this._folderDrag) {\n            return;\n        }\n\n        // Make the elements selectable\n        this.settings.selectable = true;\n        this.settings.multiSelect = true;\n\n        var onDragStartProxy = $.proxy(this, '_onDragStart'),\n            onDropTargetChangeProxy = $.proxy(this, '_onDropTargetChange');\n\n        // Asset dragging\n        // ---------------------------------------------------------------------\n\n        this._assetDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n\n            filter: $.proxy(function() {\n                return this.view.getSelectedElements().has('div.element[data-movable]');\n            }, this),\n\n            helper: $.proxy(function($file) {\n                return this._getFileDragHelper($file);\n            }, this),\n\n            dropTargets: $.proxy(function() {\n                // Which data attribute should we be checking?\n                var attr;\n                if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                    attr = 'data-can-move-peer-files-to';\n                } else {\n                    attr = 'data-can-move-to';\n                }\n\n                var targets = [];\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder\n                    var $source = this.$sources.eq(i);\n                    if (Garnish.hasAttr($source, attr)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            }, this),\n\n            onDragStart: onDragStartProxy,\n            onDropTargetChange: onDropTargetChangeProxy,\n            onDragStop: $.proxy(this, '_onFileDragStop'),\n            helperBaseZindex: 800\n        });\n\n        // Folder dragging\n        // ---------------------------------------------------------------------\n\n        this._folderDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n\n            filter: $.proxy(function() {\n                // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                var $selected = this.sourceSelect.getSelectedItems(),\n                    draggees = [];\n\n                for (var i = 0; i < $selected.length; i++) {\n                    var $source = $selected.eq(i);\n\n                    if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                        continue;\n                    }\n\n                    if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                        draggees.push($source.parent()[0]);\n                    }\n                }\n\n                return $(draggees);\n            }, this),\n\n            helper: $.proxy(function($draggeeHelper) {\n                var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                    $helperNav = $('<nav/>').appendTo($helperSidebar),\n                    $helperUl = $('<ul/>').appendTo($helperNav);\n\n                $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                $draggeeHelper.children('a').addClass('sel');\n\n                // Match the style\n                $draggeeHelper.css({\n                    'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                    'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                    'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                    'padding-left': this._folderDrag.$draggee.css('padding-left')\n                });\n\n                return $helperSidebar;\n            }, this),\n\n            dropTargets: $.proxy(function() {\n                var targets = [];\n\n                // Tag the dragged folder and it's subfolders\n                var draggedSourceIds = [];\n                this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                    draggedSourceIds.push($(this).data('key'));\n                });\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder and not one of the dragged folders\n                    var $source = this.$sources.eq(i),\n                        key = $source.data('key');\n\n                    if (!this._getFolderUidFromSourceKey(key)) {\n                        continue;\n                    }\n\n                    if (!Craft.inArray(key, draggedSourceIds)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            }, this),\n\n            onDragStart: onDragStartProxy,\n            onDropTargetChange: onDropTargetChangeProxy,\n            onDragStop: $.proxy(this, '_onFolderDragStop')\n        });\n    },\n\n    /**\n     * On file drag stop\n     */\n    _onFileDragStop: function() {\n        if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n            // Keep it selected\n            var originatingSource = this.$source;\n\n            var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                originalAssetIds = [];\n\n            // For each file, prepare array data.\n            for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                originalAssetIds.push(originalAssetId);\n            }\n\n            // Are any files actually getting moved?\n            if (originalAssetIds.length) {\n                this.setIndexBusy();\n\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(originalAssetIds.length);\n                this.progressBar.showProgressBar();\n\n                // For each file to move a separate request\n                var parameterArray = [];\n                for (i = 0; i < originalAssetIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: {\n                            assetId: originalAssetIds[i],\n                            folderId: targetFolderId\n                        }\n                    });\n                }\n\n                // Define the callback for when all file moves are complete\n                var onMoveFinish = $.proxy(function(responseArray) {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var response = responseArray[i];\n\n                        // Push prompt into prompt array\n                        if (response.conflict) {\n                            this.promptHandler.addPrompt({\n                                assetId: response.assetId,\n                                suggestedFilename: response.suggestedFilename,\n                                prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                            });\n                        }\n\n                        if (response.error) {\n                            alert(response.error);\n                        }\n                    }\n\n                    this.setIndexAvailable();\n                    this.progressBar.hideProgressBar();\n                    var reloadIndex = false;\n\n                    var performAfterMoveActions = function() {\n                        // Select original source\n                        this.sourceSelect.selectItem(originatingSource);\n\n                        // Make sure we use the correct offset when fetching the next page\n                        this._totalVisible -= this._assetDrag.$draggee.length;\n\n                        // And remove the elements that have been moved away\n                        for (var i = 0; i < originalAssetIds.length; i++) {\n                            $('[data-id=' + originalAssetIds[i] + ']').remove();\n                        }\n\n                        this.view.deselectAllElements();\n                        this._collapseExtraExpandedFolders(targetFolderId);\n\n                        if (reloadIndex) {\n                            this.updateElements();\n                        }\n                    };\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = $.proxy(function(returnData) {\n                            var newParameterArray = [];\n\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    reloadIndex = true;\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'keepBoth') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            filename: returnData[i].suggestedFilename\n                                        }\n                                    });\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            force: true\n                                        }\n                                    });\n                                }\n                            }\n\n                            // Nothing to do, carry on\n                            if (newParameterArray.length === 0) {\n                                performAfterMoveActions.apply(this);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                // Move conflicting files again with resolutions now\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        }, this);\n\n                        this._assetDrag.fadeOutHelpers();\n                        this.promptHandler.showBatchPrompts(promptCallback);\n                    } else {\n                        performAfterMoveActions.apply(this);\n                        this._assetDrag.fadeOutHelpers();\n                    }\n                }, this);\n\n                // Initiate the file move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._assetDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * On folder drag stop\n     */\n    _onFolderDragStop: function() {\n        // Only move if we have a valid target and we're not trying to move into our direct parent\n        if (\n            this._folderDrag.$activeDropTarget &&\n            this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n        ) {\n            var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n            this._collapseExtraExpandedFolders(targetFolderId);\n\n            // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n            var folderIds = [];\n\n            for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                    folderId = $a.data('folder-id');\n\n                // Make sure it's not already in the target folder and use this single folder Id.\n                if (folderId != targetFolderId) {\n                    folderIds.push(folderId);\n                    break;\n                }\n            }\n\n            if (folderIds.length) {\n                folderIds.sort();\n                folderIds.reverse();\n\n                this.setIndexBusy();\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(folderIds.length);\n                this.progressBar.showProgressBar();\n\n                var parameterArray = [];\n\n                for (i = 0; i < folderIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-folder',\n                        params: {\n                            folderId: folderIds[i],\n                            parentId: targetFolderId\n                        }\n                    });\n                }\n\n                // Increment, so to avoid displaying folder files that are being moved\n                this.requestId++;\n\n                /*\n                 Here's the rundown:\n                 1) Send all the folders being moved\n                 2) Get results:\n                 a) For all conflicting, receive prompts and resolve them to get:\n                 b) For all valid move operations: by now server has created the needed folders\n                 in target destination. Server returns an array of file move operations\n                 c) server also returns a list of all the folder id changes\n                 d) and the data-id of node to be removed, in case of conflict\n                 e) and a list of folders to delete after the move\n                 3) From data in 2) build a large file move operation array\n                 4) Create a request loop based on this, so we can display progress bar\n                 5) when done, delete all the folders and perform other maintenance\n                 6) Champagne\n                 */\n\n                // This will hold the final list of files to move\n                var fileMoveList = [];\n\n                var newSourceKey = '';\n\n                var onMoveFinish = function(responseArray) {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var data = responseArray[i];\n\n                        // If successful and have data, then update\n                        if (data.success) {\n                            if (data.transferList) {\n                                fileMoveList = data.transferList;\n                            }\n\n                            if (data.newFolderId) {\n                                newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                            }\n                        }\n\n                        // Push prompt into prompt array\n                        if (data.conflict) {\n                            data.prompt = {\n                                message: data.conflict,\n                                choices: this._folderConflictTemplate.choices\n                            };\n\n                            this.promptHandler.addPrompt(data);\n                        }\n\n                        if (data.error) {\n                            alert(data.error);\n                        }\n                    }\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = $.proxy(function(returnData) {\n                            this.promptHandler.resetPrompts();\n\n                            var newParameterArray = [];\n\n                            var params = {};\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    params.force = true;\n                                }\n\n                                if (returnData[i].choice === 'merge') {\n                                    params.merge = true;\n                                }\n\n                                params.folderId = data.folderId;\n                                params.parentId = data.parentId;\n\n                                newParameterArray.push({\n                                    action: 'assets/move-folder',\n                                    params: params\n                                });\n                            }\n\n                            // Start working on them lists, baby\n                            if (newParameterArray.length === 0) {\n                                $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        }, this);\n\n                        this.promptHandler.showBatchPrompts(promptCallback);\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                    } else {\n                        $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                    }\n                }.bind(this);\n\n                // Initiate the folder move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees until we get the Ajax response\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._folderDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * Really move the folder. Like really. For real.\n     */\n    _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n        this.progressBar.setItemCount(1);\n        this.progressBar.showProgressBar();\n\n        var moveCallback = function(folderDeleteList) {\n            // Delete the old folders\n            var counter = 0;\n            var limit = folderDeleteList.length;\n            for (var i = 0; i < folderDeleteList.length; i++) {\n                // When all folders are deleted, reload the sources.\n                Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, function() {\n                    if (++counter === limit) {\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        this._folderDrag.returnHelpersToDraggees();\n                        this.setInstanceState('selectedSource', newSourceKey);\n                        this.refreshSources();\n                    }\n                }.bind(this));\n            }\n        }.bind(this);\n\n        if (fileMoveList.length > 0) {\n            var parameterArray = [];\n\n            for (var i = 0; i < fileMoveList.length; i++) {\n                parameterArray.push({\n                    action: 'assets/move-asset',\n                    params: fileMoveList[i]\n                });\n            }\n            this._performBatchRequests(parameterArray, function() {\n                moveCallback(folderDeleteList);\n            });\n        } else {\n            moveCallback(folderDeleteList);\n        }\n    },\n\n    /**\n     * Returns the root level source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getRootSource: function($source) {\n        var $parent;\n        while (($parent = this._getParentSource($source)) && $parent.length) {\n            $source = $parent;\n        }\n        return $source;\n    },\n\n    /**\n     * Get parent source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getParentSource: function($source) {\n        if (this._getSourceLevel($source) > 1) {\n            return $source.parent().parent().siblings('a');\n        }\n    },\n\n    _selectSourceByFolderId: function(targetFolderId) {\n        var $targetSource = this._getSourceByKey(targetFolderId);\n\n        // Make sure that all the parent sources are expanded and this source is visible.\n        var $parentSources = $targetSource.parent().parents('li');\n\n        for (var i = 0; i < $parentSources.length; i++) {\n            var $parentSource = $($parentSources[i]);\n\n            if (!$parentSource.hasClass('expanded')) {\n                $parentSource.children('.toggle').trigger('click');\n            }\n        }\n\n        this.selectSource($targetSource);\n        this.updateElements();\n    },\n\n    /**\n     * Initialize the uploader.\n     *\n     * @private\n     */\n    afterInit: function() {\n        if (!this.$uploadButton) {\n            this.$uploadButton = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                'data-icon': 'upload',\n                style: 'position: relative; overflow: hidden;',\n                text: Craft.t('app', 'Upload files'),\n            });\n            this.addButton(this.$uploadButton);\n\n            this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n        }\n\n        this.promptHandler = new Craft.PromptHandler();\n        this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            fileInput: this.$uploadInput,\n            dropZone: this.$container\n        };\n\n        options.events = {\n            fileuploadstart: $.proxy(this, '_onUploadStart'),\n            fileuploadprogressall: $.proxy(this, '_onUploadProgress'),\n            fileuploaddone: $.proxy(this, '_onUploadComplete')\n        };\n\n        if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        this._currentUploaderSettings = options;\n\n        this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n        this.$uploadButton.on('click', $.proxy(function() {\n            if (this.$uploadButton.hasClass('disabled')) {\n                return;\n            }\n            if (!this.isIndexBusy) {\n                this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n            }\n        }, this));\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific volume in the URL?\n        if (this.settings.context === 'index' && typeof defaultVolumeHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n                if ($source.data('volume-handle') === defaultVolumeHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    onSelectSource: function() {\n        var $source = this._getSourceByKey(this.sourceKey);\n        var folderId = $source.data('folder-id');\n\n        if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n            this.uploader.setParams({\n                folderId: this.$source.attr('data-folder-id')\n            });\n            this.$uploadButton.removeClass('disabled');\n        } else {\n            this.$uploadButton.addClass('disabled');\n        }\n\n        // Update the URL if we're on the Assets index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'assets';\n            var $rootSource = this._getRootSource($source);\n            if ($rootSource && $rootSource.data('volume-handle')) {\n                uri += '/' + $rootSource.data('volume-handle');\n            }\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n\n        this.base();\n    },\n\n    _getFolderUidFromSourceKey: function(sourceKey) {\n        var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n        return m ? m[1] : null;\n    },\n\n    startSearching: function() {\n        // Does this source have subfolders?\n        if (!this.settings.hideSidebar && this.$source.siblings('ul').length) {\n            if (this.$includeSubfoldersContainer === null) {\n                var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                    this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                    this.updateElements();\n                });\n            } else {\n                this.$includeSubfoldersContainer.velocity('stop');\n            }\n\n            var checked = this.getSelectedSourceState('includeSubfolders', false);\n            this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: 0,\n                opacity: 1\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = true;\n        }\n\n        this.base();\n    },\n\n    stopSearching: function() {\n        if (this.showingIncludeSubfoldersCheckbox) {\n            this.$includeSubfoldersContainer.velocity('stop');\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: -25,\n                opacity: 0\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = false;\n        }\n\n        this.base();\n    },\n\n    getViewParams: function() {\n        var data = this.base();\n\n        if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n            data.criteria.includeSubfolders = true;\n        }\n\n        return data;\n    },\n\n    /**\n     * React on upload submit.\n     *\n     * @private\n     */\n    _onUploadStart: function() {\n        this.setIndexBusy();\n\n        // Initial values\n        this._positionProgressBar();\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n\n        this.promptHandler.resetPrompts();\n    },\n\n    /**\n     * Update uploaded byte count.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On Upload Complete.\n     */\n    _onUploadComplete: function(event, data) {\n        var response = data.result;\n        var filename = data.files[0].name;\n\n        var doReload = true;\n\n        if (response.success || response.conflict) {\n            // Add the uploaded file to the selected ones, if appropriate\n            this._uploadedAssetIds.push(response.assetId);\n\n            // If there is a prompt, add it to the queue\n            if (response.conflict) {\n                response.prompt = {\n                    message: Craft.t('app', response.conflict, {file: response.filename}),\n                    choices: this._fileConflictTemplate.choices\n                };\n\n                this.promptHandler.addPrompt(response);\n            }\n\n            Craft.cp.runQueue();\n        } else {\n            if (response.error) {\n                alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n            } else {\n                alert(Craft.t('app', 'Upload failed for {filename}.', {filename: filename}));\n            }\n\n            doReload = false;\n        }\n\n        // For the last file, display prompts, if any. If not - just update the element view.\n        if (this.uploader.isLastUpload()) {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n\n            if (this.promptHandler.getPromptCount()) {\n                this.promptHandler.showBatchPrompts($.proxy(this, '_uploadFollowup'));\n            } else {\n                if (doReload) {\n                    this._updateAfterUpload();\n                }\n            }\n        }\n    },\n\n    /**\n     * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n     *\n     * @private\n     */\n    _updateAfterUpload: function() {\n        if (this.settings.context !== 'index') {\n            this.setSortAttribute('dateModified');\n            this.setSortDirection('desc');\n        }\n        this.updateElements();\n    },\n\n    /**\n     * Follow up to an upload that triggered at least one conflict resolution prompt.\n     *\n     * @param returnData\n     * @private\n     */\n    _uploadFollowup: function(returnData) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n\n        this.promptHandler.resetPrompts();\n\n        var finalCallback = function() {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n            this._updateAfterUpload();\n        }.bind(this);\n\n        this.progressBar.setItemCount(returnData.length);\n\n        var doFollowup = function(parameterArray, parameterIndex, callback) {\n            var postData = {};\n            var action = null;\n\n            var followupCallback = function(data, textStatus) {\n                if (textStatus === 'success' && data.assetId) {\n                    this._uploadedAssetIds.push(data.assetId);\n                } else if (data.error) {\n                    alert(data.error);\n                }\n                parameterIndex++;\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (parameterIndex === parameterArray.length) {\n                    callback();\n                } else {\n                    doFollowup(parameterArray, parameterIndex, callback);\n                }\n            }.bind(this);\n\n            if (parameterArray[parameterIndex].choice === 'replace') {\n                action = 'assets/replace-file';\n                postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                if (parameterArray[parameterIndex].conflictingAssetId) {\n                    postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                } else {\n                    postData.targetFilename = parameterArray[parameterIndex].filename;\n                }\n            } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                action = 'assets/delete-asset';\n                postData.assetId = parameterArray[parameterIndex].assetId;\n            }\n\n            if (!action) {\n                // We don't really need to do another request, so let's pretend that already happened\n                followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n            } else {\n                Craft.postActionRequest(action, postData, followupCallback);\n            }\n        }.bind(this);\n\n        this.progressBar.showProgressBar();\n        doFollowup(returnData, 0, finalCallback);\n    },\n\n    /**\n     * Perform actions after updating elements\n     * @private\n     */\n    onUpdateElements: function() {\n        this._onUpdateElements(false, this.view.getAllElements());\n        this.view.on('appendElements', $.proxy(function(ev) {\n            this._onUpdateElements(true, ev.newElements);\n        }, this));\n\n        this.base();\n    },\n\n    /**\n     * Do the after-update initializations\n     * @private\n     */\n    _onUpdateElements: function(append, $newElements) {\n        if (this.settings.context === 'index') {\n            if (!append) {\n                this._assetDrag.removeAllItems();\n            }\n\n            this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n        }\n\n        // See if we have freshly uploaded files to add to selection\n        if (this._uploadedAssetIds.length) {\n            if (this.view.settings.selectable) {\n                for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                    this.view.selectElementById(this._uploadedAssetIds[i]);\n                }\n            }\n\n            // Reset the list.\n            this._uploadedAssetIds = [];\n        }\n\n        this.base(append, $newElements);\n\n        this.removeListener(this.$elements, 'keydown');\n        this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n        this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item).find('.element');\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    _onDragStart: function() {\n        this._tempExpandedFolders = [];\n    },\n\n    /**\n     * Get File Drag Helper\n     */\n    _getFileDragHelper: function($element) {\n        var currentView = this.getSelectedSourceState('mode');\n        var $outerContainer;\n        var $innerContainer;\n\n        switch (currentView) {\n            case 'table': {\n                $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                var $tbody = $('<tbody/>').appendTo($table);\n\n                $element.appendTo($tbody);\n\n                // Copy the column widths\n                this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                var $helperCells = $element.children();\n\n                for (var i = 0; i < $helperCells.length; i++) {\n                    // Hard-set the cell widths\n                    var $helperCell = $($helperCells[i]);\n\n                    // Skip the checkbox cell\n                    if ($helperCell.hasClass('checkbox-cell')) {\n                        $helperCell.remove();\n                        $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                        continue;\n                    }\n\n                    var $firstRowCell = $(this._$firstRowCells[i]),\n                        width = $firstRowCell.width();\n\n                    $firstRowCell.width(width);\n                    $helperCell.width(width);\n                }\n\n                return $outerContainer;\n            }\n            case 'thumbs': {\n                $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                $element.appendTo($innerContainer);\n\n                return $outerContainer;\n            }\n        }\n\n        return $();\n    },\n\n    /**\n     * On Drop Target Change\n     */\n    _onDropTargetChange: function($dropTarget) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        if ($dropTarget) {\n            var folderId = $dropTarget.data('folder-id');\n\n            if (folderId) {\n                this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                    this._expandDropTargetFolderTimeout = setTimeout($.proxy(this, '_expandFolder'), 500);\n                }\n            } else {\n                this.dropTargetFolder = null;\n            }\n        }\n\n        if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n            // Temporarily remove the .sel class on the active source\n            this.$source.removeClass('sel');\n        } else {\n            this.$source.addClass('sel');\n        }\n    },\n\n    /**\n     * Collapse Extra Expanded Folders\n     */\n    _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        // If a source ID is passed in, exclude its parents\n        var $excludedSources;\n\n        if (dropTargetFolderId) {\n            $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n        }\n\n        for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n            var $source = this._tempExpandedFolders[i];\n\n            // Check the parent list, if a source id is passed in\n            if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                this._collapseFolder($source);\n                this._tempExpandedFolders.splice(i, 1);\n            }\n        }\n    },\n\n    _getSourceByKey: function(key) {\n        return this.$sources.filter('[data-key$=\"' + key + '\"]');\n    },\n\n    _hasSubfolders: function($source) {\n        return $source.siblings('ul').find('li').length;\n    },\n\n    _isExpanded: function($source) {\n        return $source.parent('li').hasClass('expanded');\n    },\n\n    _expandFolder: function() {\n        // Collapse any temp-expanded drop targets that aren't parents of this one\n        this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n        this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n        // Keep a record of that\n        this._tempExpandedFolders.push(this.dropTargetFolder);\n    },\n\n    _collapseFolder: function($source) {\n        if ($source.parent().hasClass('expanded')) {\n            $source.siblings('.toggle').trigger('click');\n        }\n    },\n\n    _createFolderContextMenu: function($source) {\n        // Make sure it's a volume folder\n        if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n            return;\n        }\n\n        var menuOptions = [{label: Craft.t('app', 'New subfolder'), onClick: $.proxy(this, '_createSubfolder', $source)}];\n\n        // For all folders that are not top folders\n        if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n            menuOptions.push({label: Craft.t('app', 'Rename folder'), onClick: $.proxy(this, '_renameFolder', $source)});\n            menuOptions.push({label: Craft.t('app', 'Delete folder'), onClick: $.proxy(this, '_deleteFolder', $source)});\n        }\n\n        new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n    },\n\n    _createSubfolder: function($parentFolder) {\n        var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n        if (subfolderName) {\n            var params = {\n                parentId: $parentFolder.data('folder-id'),\n                folderName: subfolderName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/create-folder', params, $.proxy(function(data, textStatus) {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    this._prepareParentForChildren($parentFolder);\n\n                    var $subfolder = $(\n                        '<li>' +\n                        '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                        ' data-folder-id=\"' + data.folderId + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                        '>' +\n                        data.folderName +\n                        '</a>' +\n                        '</li>'\n                    );\n\n                    var $a = $subfolder.children('a:first');\n                    this._appendSubfolder($parentFolder, $subfolder);\n                    this.initSource($a);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            }, this));\n        }\n    },\n\n    _deleteFolder: function($targetFolder) {\n        if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n            var params = {\n                folderId: $targetFolder.data('folder-id')\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/delete-folder', params, $.proxy(function(data, textStatus) {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    var $parentFolder = this._getParentSource($targetFolder);\n\n                    // Remove folder and any trace from its parent, if needed\n                    this.deinitSource($targetFolder);\n\n                    $targetFolder.parent().remove();\n                    this._cleanUpTree($parentFolder);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            }, this));\n        }\n    },\n\n    /**\n     * Rename\n     */\n    _renameFolder: function($targetFolder) {\n        var oldName = $.trim($targetFolder.text()),\n            newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n        if (newName && newName !== oldName) {\n            var params = {\n                folderId: $targetFolder.data('folder-id'),\n                newName: newName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/rename-folder', params, $.proxy(function(data, textStatus) {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    $targetFolder.text(data.newName);\n\n                    // If the current folder was renamed.\n                    if (this._getFolderUidFromSourceKey(this.sourceSelect.$selectedItems.data('key')) === this._getFolderUidFromSourceKey($targetFolder.data('key'))) {\n                        this.updateElements();\n                    }\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            }, this), 'json');\n        }\n    },\n\n    /**\n     * Prepare a source folder for children folder.\n     *\n     * @param $parentFolder\n     * @private\n     */\n    _prepareParentForChildren: function($parentFolder) {\n        if (!this._hasSubfolders($parentFolder)) {\n            $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n            this.initSourceToggle($parentFolder);\n        }\n    },\n\n    /**\n     * Appends a subfolder to the parent folder at the correct spot.\n     *\n     * @param $parentFolder\n     * @param $subfolder\n     * @private\n     */\n    _appendSubfolder: function($parentFolder, $subfolder) {\n        var $subfolderList = $parentFolder.siblings('ul'),\n            $existingChildren = $subfolderList.children('li'),\n            subfolderLabel = $.trim($subfolder.children('a:first').text()),\n            folderInserted = false;\n\n        for (var i = 0; i < $existingChildren.length; i++) {\n            var $existingChild = $($existingChildren[i]);\n\n            if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                $existingChild.before($subfolder);\n                folderInserted = true;\n                break;\n            }\n        }\n\n        if (!folderInserted) {\n            $parentFolder.siblings('ul').append($subfolder);\n        }\n    },\n\n    _cleanUpTree: function($parentFolder) {\n        if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n            this.deinitSourceToggle($parentFolder);\n            $parentFolder.siblings('ul').remove();\n            $parentFolder.siblings('.toggle').remove();\n            $parentFolder.parent().removeClass('expanded');\n        }\n    },\n\n    _positionProgressBar: function() {\n        if (!this.progressBar) {\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n        }\n\n        var $container = $(),\n            scrollTop = 0,\n            offset = 0;\n\n        if (this.settings.context === 'index') {\n            $container = this.progressBar.$progressBar.closest('#content');\n            scrollTop = Garnish.$win.scrollTop();\n        } else {\n            $container = this.progressBar.$progressBar.closest('.main');\n            scrollTop = this.$main.scrollTop();\n        }\n\n        var containerTop = $container.offset().top;\n        var diff = scrollTop - containerTop;\n        var windowHeight = Garnish.$win.height();\n\n        if ($container.height() > windowHeight) {\n            offset = (windowHeight / 2) - 6 + diff;\n        } else {\n            offset = ($container.height() / 2) - 6;\n        }\n\n        if (this.settings.context !== 'index') {\n            offset = scrollTop + (($container.height() / 2) - 6);\n        }\n\n        this.progressBar.$progressBar.css({\n            top: offset\n        });\n    },\n\n    _performBatchRequests: function(parameterArray, finalCallback) {\n        var responseArray = [];\n\n        var doRequest = function(parameters) {\n            Craft.postActionRequest(parameters.action, parameters.params, function(data, textStatus) {\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (textStatus === 'success') {\n                    responseArray.push(data);\n\n                    // If assets were just merged we should get the reference tags updated right away\n                    Craft.cp.runQueue();\n                }\n\n                if (responseArray.length >= parameterArray.length) {\n                    finalCallback(responseArray);\n                }\n            }.bind(this));\n        }.bind(this);\n\n        for (var i = 0; i < parameterArray.length; i++) {\n            doRequest(parameterArray[i]);\n        }\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend({\n    requestId: 0,\n    hud: null,\n    $uploadBtn: null,\n    uploader: null,\n    progressBar: null,\n\n    originalFilename: '',\n    originalExtension: '',\n\n    init: function() {\n        if (arguments.length > 0 && typeof arguments[0] === 'object') {\n            arguments[0].editorSettings = {\n                onShowHud: $.proxy(this.resetOriginalFilename, this),\n                onCreateForm: $.proxy(this._renameHelper, this),\n                validators: [$.proxy(this.validateElementForm, this)]\n            };\n        }\n\n        this.base.apply(this, arguments);\n\n        if (this.settings.canUpload) {\n            this._attachUploader();\n        }\n\n        this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n        this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.elementSelect.$focusedItem;\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item);\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n    },\n\n    /**\n     * Create the element editor\n     */\n    createElementEditor: function($element) {\n        return this.base($element, {\n            params: {\n                defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n            },\n            input: this\n        });\n    },\n\n    /**\n     * Attach the uploader with drag event handler\n     */\n    _attachUploader: function() {\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            dropZone: this.$container,\n            formData: {\n                fieldId: this.settings.fieldId,\n            }\n        };\n\n        if (this.settings.sourceElementId) {\n            options.formData.elementId = this.settings.sourceElementId;\n        }\n\n        if (this.settings.criteria.siteId) {\n            options.formData.siteId = this.settings.criteria.siteId;\n        }\n\n        if (this.$addElementBtn) {\n            this.$uploadBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn dashed',\n                'data-icon': 'upload',\n                text: this.settings.limit == 1 ? Craft.t('app', 'Upload a file') : Craft.t('app', 'Upload files'),\n            }).insertAfter(this.$addElementBtn);\n            options.fileInput = $('<input/>', {\n                type: 'file',\n                class: 'hidden',\n                multiple: this.settings.limit != 1,\n            }).insertAfter(this.$uploadBtn);\n\n            // Trigger a window resize in case the field is inside an element editor HUD\n            Garnish.$win.trigger('resize');\n        }\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        if (typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        options.canAddMoreFiles = $.proxy(this, 'canAddMoreFiles');\n\n        options.events = {};\n        options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n        options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n        options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        if (this.$uploadBtn) {\n            this.$uploadBtn.on('click', $.proxy(function(ev) {\n                // We can't store a reference to the file input, because it gets replaced with a new input\n                // each time a new file is uploaded - see https://stackoverflow.com/a/25034721/1688568\n                this.$uploadBtn.next('input[type=file]').trigger('click');\n            }, this));\n        }\n    },\n\n    refreshThumbnail: function(elementId) {\n        var parameters = {\n            elementId: elementId,\n            siteId: this.settings.criteria.siteId,\n            size: this.settings.viewMode\n        };\n\n        Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n            if (data.error) {\n                alert(data.error);\n            } else {\n                var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                this.thumbLoader.load($existing);\n            }\n        }.bind(this));\n    },\n\n    /**\n     * Add the freshly uploaded file to the input field.\n     */\n    selectUploadedFile: function(element) {\n        // Check if we're able to add new elements\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        var $newElement = element.$element;\n\n        // Make a couple tweaks\n        $newElement.addClass('removable');\n        $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        $newElement.appendTo(this.$elementsContainer);\n\n        var margin = -($newElement.outerWidth() + 10);\n\n        this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addElementBtn.velocity(animateCss, 'fast');\n\n        this.addElements($newElement);\n\n        delete this.modal;\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function() {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var parameters = {\n                elementId: data.result.assetId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var html = $(data.html);\n                    Craft.appendHeadHtml(data.headHtml);\n                    this.selectUploadedFile(Craft.getElementInfo(html));\n                }\n\n                // Last file\n                if (this.uploader.isLastUpload()) {\n                    this.progressBar.hideProgressBar();\n                    this.$container.removeClass('uploading');\n\n                    if (window.draftEditor) {\n                        window.draftEditor.checkForm();\n                    }\n                }\n            }.bind(this));\n\n            Craft.cp.runQueue();\n        }\n    },\n\n    /**\n     * We have to take into account files about to be added as well\n     */\n    canAddMoreFiles: function(slotsTaken) {\n        return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n    },\n\n    /**\n     * Parse the passed filename into the base filename and extension.\n     *\n     * @param filename\n     * @returns {{extension: string, baseFileName: string}}\n     */\n    _parseFilename: function(filename) {\n        var parts = filename.split('.'),\n            extension = '';\n\n        if (parts.length > 1) {\n            extension = parts.pop();\n        }\n        var baseFileName = parts.join('.');\n        return {extension: extension, baseFileName: baseFileName};\n    },\n\n    /**\n     * A helper function or the filename field.\n     * @private\n     */\n    _renameHelper: function($form) {\n        $('.renameHelper', $form).on('focus', $.proxy(function(e) {\n            var input = e.currentTarget,\n                filename = this._parseFilename(input.value);\n\n            if (this.originalFilename === '' && this.originalExtension === '') {\n                this.originalFilename = filename.baseFileName;\n                this.originalExtension = filename.extension;\n            }\n\n            var startPos = 0,\n                endPos = filename.baseFileName.length;\n\n            if (typeof input.selectionStart !== 'undefined') {\n                input.selectionStart = startPos;\n                input.selectionEnd = endPos;\n            } else if (document.selection && document.selection.createRange) {\n                // IE branch\n                input.select();\n                var range = document.selection.createRange();\n                range.collapse(true);\n                range.moveEnd(\"character\", endPos);\n                range.moveStart(\"character\", startPos);\n                range.select();\n            }\n        }, this));\n    },\n\n    resetOriginalFilename: function() {\n        this.originalFilename = \"\";\n        this.originalExtension = \"\";\n    },\n\n    validateElementForm: function() {\n        var $filenameField = $('.renameHelper', this.elementEditor.hud.$hud.data('elementEditor').$form);\n        var filename = this._parseFilename($filenameField.val());\n\n        if (filename.extension !== this.originalExtension) {\n            // Blank extension\n            if (filename.extension === '') {\n                // If filename changed as well, assume removal of extension a mistake\n                if (this.originalFilename !== filename.baseFileName) {\n                    $filenameField.val(filename.baseFileName + '.' + this.originalExtension);\n                    return true;\n                } else {\n                    // If filename hasn't changed, make sure they want to remove extension\n                    return confirm(Craft.t('app', \"Are you sure you want to remove the extension “.{ext}”?\", {ext: this.originalExtension}));\n                }\n            } else {\n                // If the extension has changed, make sure it s intentional\n                return confirm(Craft.t('app', \"Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?\",\n                    {\n                        oldExt: this.originalExtension,\n                        newExt: filename.extension\n                    }));\n            }\n        }\n        return true;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend({\n    $selectTransformBtn: null,\n    _selectedTransform: null,\n\n    init: function(elementType, settings) {\n        settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n        this.base(elementType, settings);\n\n        if (settings.transforms.length) {\n            this.createSelectTransformButton(settings.transforms);\n        }\n    },\n\n    createSelectTransformButton: function(transforms) {\n        if (!transforms || !transforms.length) {\n            return;\n        }\n\n        var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n        this.$selectBtn.appendTo($btnGroup);\n\n        this.$selectTransformBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn menubtn disabled',\n            text: Craft.t('app', 'Select transform'),\n        }).appendTo($btnGroup);\n\n        var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n            $menuList = $('<ul></ul>').appendTo($menu);\n\n        for (var i = 0; i < transforms.length; i++) {\n            $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n        }\n\n        var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n            onOptionSelect: $.proxy(this, 'onSelectTransform')\n        });\n        MenuButton.disable();\n\n        this.$selectTransformBtn.data('menuButton', MenuButton);\n    },\n\n    onSelectionChange: function(ev) {\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            allowTransforms = false;\n\n        if ($selectedElements.length && this.settings.transforms.length) {\n            allowTransforms = true;\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                    break;\n                }\n            }\n        }\n\n        var MenuBtn = null;\n\n        if (this.$selectTransformBtn) {\n            MenuBtn = this.$selectTransformBtn.data('menuButton');\n        }\n\n        if (allowTransforms) {\n            if (MenuBtn) {\n                MenuBtn.enable();\n            }\n\n            this.$selectTransformBtn.removeClass('disabled');\n        } else if (this.$selectTransformBtn) {\n            if (MenuBtn) {\n                MenuBtn.disable();\n            }\n\n            this.$selectTransformBtn.addClass('disabled');\n        }\n\n        this.base();\n    },\n\n    onSelectTransform: function(option) {\n        var transform = $(option).data('transform');\n        this.selectImagesWithTransform(transform);\n    },\n\n    selectImagesWithTransform: function(transform) {\n        // First we must get any missing transform URLs\n        if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n            Craft.AssetSelectorModal.transformUrls[transform] = {};\n        }\n\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            imageIdsWithMissingUrls = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $item = $($selectedElements[i]),\n                elementId = Craft.getElementInfo($item).id;\n\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                imageIdsWithMissingUrls.push(elementId);\n            }\n        }\n\n        if (imageIdsWithMissingUrls.length) {\n            this.showFooterSpinner();\n\n            this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, $.proxy(function() {\n                this.hideFooterSpinner();\n                this.selectImagesWithTransform(transform);\n            }, this));\n        } else {\n            this._selectedTransform = transform;\n            this.selectElements();\n            this._selectedTransform = null;\n        }\n    },\n\n    fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n        var elementId = imageIdsWithMissingUrls.pop();\n\n        var data = {\n            assetId: elementId,\n            handle: transform\n        };\n\n        Craft.postActionRequest('assets/generate-transform', data, $.proxy(function(response, textStatus) {\n            Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n            if (textStatus === 'success') {\n                if (response.url) {\n                    Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                }\n            }\n\n            // More to load?\n            if (imageIdsWithMissingUrls.length) {\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n            } else {\n                callback();\n            }\n        }, this));\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = this.base($selectedElements);\n\n        if (this._selectedTransform) {\n            for (var i = 0; i < info.length; i++) {\n                var elementId = info[i].id;\n\n                if (\n                    typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                    Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                ) {\n                    info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                }\n            }\n        }\n\n        return info;\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo, this._selectedTransform);\n    }\n}, {\n    defaults: {\n        canSelectImageTransforms: false,\n        transforms: []\n    },\n\n    transformUrls: {}\n});\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend({\n    remainingSessionTime: null,\n    checkRemainingSessionTimer: null,\n    showLoginModalTimer: null,\n    decrementLogoutWarningInterval: null,\n\n    showingLogoutWarningModal: false,\n    showingLoginModal: false,\n\n    logoutWarningModal: null,\n    loginModal: null,\n\n    $logoutWarningPara: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $loginBtn: null,\n    $loginErrorPara: null,\n\n    submitLoginIfLoggedOut: false,\n\n    /**\n     * Init\n     */\n    init: function() {\n        this.updateRemainingSessionTime(Craft.remainingSessionTime);\n    },\n\n    /**\n     * Sets a timer for the next time to check the auth timeout.\n     */\n    setCheckRemainingSessionTimer: function(seconds) {\n        if (this.checkRemainingSessionTimer) {\n            clearTimeout(this.checkRemainingSessionTimer);\n        }\n\n        this.checkRemainingSessionTimer = setTimeout($.proxy(this, 'checkRemainingSessionTime'), seconds * 1000);\n    },\n\n    /**\n     * Pings the server to see how many seconds are left on the current user session, and handles the response.\n     */\n    checkRemainingSessionTime: function(extendSession) {\n        $.ajax({\n            url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n            type: 'GET',\n            dataType: 'json',\n            complete: $.proxy(function(jqXHR, textStatus) {\n                if (textStatus === 'success') {\n                    if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                        Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                    }\n\n                    this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                    this.submitLoginIfLoggedOut = false;\n                } else {\n                    this.updateRemainingSessionTime(-1);\n                }\n            }, this)\n        });\n    },\n\n    /**\n     * Updates our record of the auth timeout, and handles it.\n     */\n    updateRemainingSessionTime: function(remainingSessionTime) {\n        this.remainingSessionTime = parseInt(remainingSessionTime);\n\n        // Are we within the warning window?\n        if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n            // Is there still time to renew the session?\n            if (this.remainingSessionTime) {\n                if (!this.showingLogoutWarningModal) {\n                    // Show the warning modal\n                    this.showLogoutWarningModal();\n                }\n\n                // Will the session expire before the next checkup?\n                if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                    if (this.showLoginModalTimer) {\n                        clearTimeout(this.showLoginModalTimer);\n                    }\n\n                    this.showLoginModalTimer = setTimeout($.proxy(this, 'showLoginModal'), this.remainingSessionTime * 1000);\n                }\n            } else {\n                if (this.showingLoginModal) {\n                    if (this.submitLoginIfLoggedOut) {\n                        this.submitLogin();\n                    }\n                } else {\n                    // Show the login modal\n                    this.showLoginModal();\n                }\n            }\n\n            this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n        } else {\n            // Everything's good!\n            this.hideLogoutWarningModal();\n            this.hideLoginModal();\n\n            // Will be be within the minSafeSessionTime before the next update?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n            } else {\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the logout warning modal.\n     */\n    showLogoutWarningModal: function() {\n        var quickShow;\n\n        if (this.showingLoginModal) {\n            this.hideLoginModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLogoutWarningModal = true;\n\n        if (!this.logoutWarningModal) {\n            let $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>');\n            let $body = $('<div class=\"body\"/>').appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $logoutBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Log out now'),\n            }).appendTo($buttons);\n            let $renewSessionBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Keep me logged in'),\n            }).appendTo($buttons);\n\n            this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n            this.logoutWarningModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                onFadeIn: function() {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the renew button\n                        setTimeout(function() {\n                            $renewSessionBtn.trigger('focus');\n                        }, 100);\n                    }\n                }\n            });\n\n            this.addListener($logoutBtn, 'activate', 'logout');\n            this.addListener($form, 'submit', 'renewSession');\n        }\n\n        if (quickShow) {\n            this.logoutWarningModal.quickShow();\n        } else {\n            this.logoutWarningModal.show();\n        }\n\n        this.updateLogoutWarningMessage();\n\n        this.decrementLogoutWarningInterval = setInterval($.proxy(this, 'decrementLogoutWarning'), 1000);\n    },\n\n    /**\n     * Updates the logout warning message indicating that the session is about to expire.\n     */\n    updateLogoutWarningMessage: function() {\n        this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n            time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n        }));\n\n        this.logoutWarningModal.updateSizeAndPosition();\n    },\n\n    decrementLogoutWarning: function() {\n        if (this.remainingSessionTime > 0) {\n            this.remainingSessionTime--;\n            this.updateLogoutWarningMessage();\n        }\n\n        if (this.remainingSessionTime === 0) {\n            clearInterval(this.decrementLogoutWarningInterval);\n        }\n    },\n\n    /**\n     * Hides the logout warning modal.\n     */\n    hideLogoutWarningModal: function(quick) {\n        this.showingLogoutWarningModal = false;\n\n        if (this.logoutWarningModal) {\n            if (quick) {\n                this.logoutWarningModal.quickHide();\n            } else {\n                this.logoutWarningModal.hide();\n            }\n\n            if (this.decrementLogoutWarningInterval) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the login modal.\n     */\n    showLoginModal: function() {\n        var quickShow;\n\n        if (this.showingLogoutWarningModal) {\n            this.hideLogoutWarningModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLoginModal = true;\n\n        if (!this.loginModal) {\n            var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$loginBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Login'),\n            }).appendTo($buttonContainer);\n            this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.loginModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark loginmodalshade',\n                onFadeIn: $.proxy(function() {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the password input\n                        setTimeout($.proxy(function() {\n                            this.$passwordInput.trigger('focus');\n                        }, this), 100);\n                    }\n                }, this),\n                onFadeOut: $.proxy(function() {\n                    this.$passwordInput.val('');\n                }, this)\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $.proxy(function($newPasswordInput) {\n                    this.$passwordInput = $newPasswordInput;\n                }, this)\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($form, 'submit', 'login');\n        }\n\n        if (quickShow) {\n            this.loginModal.quickShow();\n        } else {\n            this.loginModal.show();\n        }\n    },\n\n    /**\n     * Hides the login modal.\n     */\n    hideLoginModal: function(quick) {\n        this.showingLoginModal = false;\n\n        if (this.loginModal) {\n            if (quick) {\n                this.loginModal.quickHide();\n            } else {\n                this.loginModal.hide();\n            }\n        }\n    },\n\n    logout: function() {\n        $.get({\n            url: Craft.getActionUrl('users/logout'),\n            dataType: 'json',\n            success: $.proxy(function() {\n                Craft.redirectTo('');\n            }, this)\n        });\n    },\n\n    renewSession: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        this.hideLogoutWarningModal();\n        this.checkRemainingSessionTime(true);\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$loginBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$loginBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    login: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.validatePassword()) {\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            if (typeof Craft.csrfTokenValue !== 'undefined') {\n                // Check the auth status one last time before sending this off,\n                // in case the user has already logged back in from another window/tab\n                this.submitLoginIfLoggedOut = true;\n                this.checkRemainingSessionTime();\n            } else {\n                this.submitLogin();\n            }\n        }\n    },\n\n    submitLogin: function() {\n        var data = {\n            loginName: Craft.username,\n            password: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/login', data, $.proxy(function(response, textStatus) {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.hideLoginModal();\n                    this.checkRemainingSessionTime();\n                } else {\n                    this.showLoginError(response.error);\n                    Garnish.shake(this.loginModal.$container);\n\n                    if (!Garnish.isMobileBrowser(true)) {\n                        this.$passwordInput.trigger('focus');\n                    }\n                }\n            } else {\n                this.showLoginError();\n            }\n        }, this));\n    },\n\n    showLoginError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$loginErrorPara.text(error);\n        this.loginModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showLoginError('');\n    }\n}, {\n    checkInterval: 60,\n    minSafeSessionTime: 120\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend({\n    authManager: null,\n\n    $nav: null,\n    $mainContainer: null,\n    $alerts: null,\n    $crumbs: null,\n    $notificationContainer: null,\n    $main: null,\n    $primaryForm: null,\n    $headerContainer: null,\n    $header: null,\n    $mainContent: null,\n    $details: null,\n    $tabsContainer: null,\n    $tabsList: null,\n    $tabs: null,\n    $overflowTabBtn: null,\n    $overflowTabList: null,\n    $selectedTab: null,\n    selectedTabIndex: null,\n    $sidebarContainer: null,\n    $sidebar: null,\n    $contentContainer: null,\n    $edition: null,\n\n    $confirmUnloadForms: null,\n    $deltaForms: null,\n    $collapsibleTables: null,\n\n    fixedHeader: false,\n\n    enableQueue: true,\n    totalJobs: 0,\n    jobInfo: null,\n    displayedJobInfo: null,\n    displayedJobInfoUnchanged: 1,\n    trackJobProgressTimeout: null,\n    jobProgressIcon: null,\n\n    checkingForUpdates: false,\n    forcingRefreshOnUpdatesCheck: false,\n    includingDetailsOnUpdatesCheck: false,\n    checkForUpdatesCallbacks: null,\n\n    init: function() {\n        // Is this session going to expire?\n        if (Craft.remainingSessionTime !== 0) {\n            this.authManager = new Craft.AuthManager();\n        }\n\n        // Find all the key elements\n        this.$nav = $('#nav');\n        this.$mainContainer = $('#main-container');\n        this.$alerts = $('#alerts');\n        this.$crumbs = $('#crumbs');\n        this.$notificationContainer = $('#notifications');\n        this.$main = $('#main');\n        this.$primaryForm = $('#main-form');\n        this.$headerContainer = $('#header-container');\n        this.$header = $('#header');\n        this.$mainContent = $('#main-content');\n        this.$details = $('#details');\n        this.$sidebarContainer = $('#sidebar-container');\n        this.$sidebar = $('#sidebar');\n        this.$contentContainer = $('#content-container');\n        this.$collapsibleTables = $('table.collapsible');\n\n        this.updateSidebarMenuLabel();\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$details.find('.meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        if (this.$header.length) {\n            this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n            this.updateFixedHeader();\n        }\n\n        Garnish.$doc.ready($.proxy(function() {\n            // Update responsive tables on window resize\n            this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n            this.handleWindowResize();\n\n            // Fade the notification out two seconds after page load\n            var $errorNotifications = this.$notificationContainer.children('.error'),\n                $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n            $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n            $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n            // Wait a frame before initializing any confirm-unload forms,\n            // so other JS that runs on ready() has a chance to initialize\n            Garnish.requestAnimationFrame($.proxy(this, 'initSpecialForms'));\n        }, this));\n\n        // Alerts\n        if (this.$alerts.length) {\n            this.initAlerts();\n        }\n\n        // Toggles\n        this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n        this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n        // Does this page have a primary form?\n        if (!this.$primaryForm.length) {\n            this.$primaryForm = $('form[data-saveshortcut]:first');\n        }\n\n        // Does the primary form support the save shortcut?\n        if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n            let shortcuts = [];\n            let actions = this.$primaryForm.data('actions');\n            if (typeof actions === 'undefined') {\n                shortcuts.push([\n                    {\n                        keyCode: Garnish.S_KEY,\n                        ctrl: true,\n                    }, {\n                        redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                        retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                    }\n                ]);\n            } else {\n                for (let i = 0; i < actions.length; i++) {\n                    let action = actions[i];\n                    if (!action.shortcut) {\n                        continue;\n                    }\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                            shift: !!action.shift,\n                        }, {\n                            action: action.action,\n                            redirect: action.redirect,\n                            confirm: action.confirm,\n                            params: action.params,\n                            data: action.data,\n                            retainScroll: action.retainScroll,\n                        }\n                    ]);\n                }\n            }\n            for (let i = 0; i < shortcuts.length; i++) {\n                Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                    this.submitPrimaryForm(shortcuts[i][1]);\n                });\n            }\n        }\n\n        this.initTabs();\n\n        // Should we match the previous scroll position?\n        let scrollY = Craft.getLocalStorage('scrollY');\n        if (typeof scrollY !== 'undefined') {\n            Craft.removeLocalStorage('scrollY');\n            Garnish.$doc.ready(() => {\n                Garnish.requestAnimationFrame(() => {\n                    window.scrollTo(0, scrollY);\n                });\n            });\n        }\n\n        if ($.isTouchCapable()) {\n            this.$mainContainer.on('focus', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputFocus'));\n            this.$mainContainer.on('blur', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputBlur'));\n        }\n    },\n\n    initSpecialForms: function() {\n        // Look for forms that we should watch for changes on\n        this.$confirmUnloadForms = $('form[data-confirm-unload]');\n        this.$deltaForms = $('form[data-delta]');\n\n        if (!this.$confirmUnloadForms.length) {\n            return;\n        }\n\n        var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n        var $form, serialized;\n\n        for (var i = 0; i < $forms.length; i++) {\n            $form = $forms.eq(i);\n            if (!$form.data('initialSerializedValue')) {\n                if (typeof $form.data('serializer') === 'function') {\n                    serialized = $form.data('serializer')();\n                } else {\n                    serialized = $form.serialize();\n                }\n                $form.data('initialSerializedValue', serialized);\n            }\n            this.addListener($form, 'submit', function(ev) {\n                if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                    this.removeListener(Garnish.$win, 'beforeunload');\n                }\n                if (Garnish.hasAttr($form, 'data-delta')) {\n                    ev.preventDefault();\n                    var serialized;\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                    Craft.createForm(data)\n                        .appendTo(Garnish.$bod)\n                        .submit();\n                }\n            });\n        }\n\n        this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n            var confirmUnload = false;\n            var $form, serialized;\n            if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                confirmUnload = true;\n            } else {\n                for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                    $form = this.$confirmUnloadForms.eq(i);\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    if ($form.data('initialSerializedValue') !== serialized) {\n                        confirmUnload = true;\n                        break;\n                    }\n                }\n            }\n\n            if (confirmUnload) {\n                var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                if (ev) {\n                    ev.originalEvent.returnValue = message;\n                } else {\n                    window.event.returnValue = message;\n                }\n\n                return message;\n            }\n        });\n    },\n\n    _handleInputFocus: function() {\n        this.updateFixedHeader();\n    },\n\n    _handleInputBlur: function() {\n        this.updateFixedHeader();\n    },\n\n    /**\n     * Submits a form.\n     * @param {Object} [options]\n     * @param {string} [options.action] The `action` param value override\n     * @param {string} [options.redirect] The `redirect` param value override\n     * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n     * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n     * @param {Object} [options.data] Additional data to be passed to the submit event\n     * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n     */\n    submitPrimaryForm: function(options) {\n        // Give other stuff on the page a chance to prepare\n        this.trigger('beforeSaveShortcut');\n\n        if (typeof options !== 'object' || !$.isPlainObject(options)) {\n            options = {};\n        }\n\n        if (!options.redirect) {\n            options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n        }\n\n        if (!options.data) {\n            options.data = {};\n        }\n        options.data.saveShortcut = true;\n\n        Craft.submitForm(this.$primaryForm, options);\n    },\n\n    updateSidebarMenuLabel: function() {\n        var $item = this.$sidebar.find('a.sel:first');\n        var $label = $item.children('.label');\n        $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n        Garnish.$bod.removeClass('showing-sidebar');\n    },\n\n    toggleNav: function() {\n        Garnish.$bod.toggleClass('showing-nav');\n    },\n\n    toggleSidebar: function() {\n        Garnish.$bod.toggleClass('showing-sidebar');\n    },\n\n    initTabs: function() {\n        // Clear out all our old info in case the tabs were just replaced\n        this.$tabsList = this.$tabs = this.$overflowTabBtn = this.$overflowTabList = this.$selectedTab =\n            this.selectedTabIndex = null;\n\n        this.$tabsContainer = $('#tabs');\n        if (!this.$tabsContainer.length) {\n            this.$tabsContainer = null;\n            return;\n        }\n\n        this.$tabsList = this.$tabsContainer.find('> ul');\n        this.$tabs = this.$tabsList.find('> li');\n        this.$overflowTabBtn = $('#overflow-tab-btn');\n        if (!this.$overflowTabBtn.data('menubtn')) {\n            new Garnish.MenuBtn(this.$overflowTabBtn);\n        }\n        this.$overflowTabList = this.$overflowTabBtn.data('menubtn').menu.$container.find('> ul');\n\n        for (let i = 0; i < this.$tabs.length; i++) {\n            const $tab = this.$tabs.eq(i);\n            this.removeAllListeners($tab);\n\n            // Does it link to an anchor?\n            const $a = $tab.children('a');\n            const href = $a.attr('href');\n            if (href && href.charAt(0) === '#') {\n                this.addListener($a, 'keydown', ev => {\n                    if ([Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                        ev.preventDefault();\n                        this.selectTab(ev.currentTarget);\n                        $a.focus();\n                    }\n                });\n                this.addListener($a, 'click', ev => {\n                    ev.preventDefault();\n                    this.selectTab(ev.currentTarget);\n                });\n\n                if (encodeURIComponent(href.substr(1)) === document.location.hash.substr(1)) {\n                    this.selectTab($a);\n                }\n            }\n\n            if (!this.$selectedTab && $a.hasClass('sel')) {\n                this._selectTab($a, i);\n            }\n        }\n    },\n\n    selectTab: function(tab) {\n        var $tab = $(tab);\n\n        if (this.$selectedTab) {\n            if (this.$selectedTab.get(0) === $tab.get(0)) {\n                return;\n            }\n            this.deselectTab();\n        }\n\n        $tab.addClass('sel');\n        var href = $tab.attr('href')\n        $(href).removeClass('hidden');\n        if (typeof history !== 'undefined') {\n            history.replaceState(undefined, undefined, href);\n        }\n        this._selectTab($tab, this.$tabs.index($tab.parent()));\n        this.updateTabs();\n        this.$overflowTabBtn.data('menubtn').menu.hide();\n    },\n\n    _selectTab: function($tab, index) {\n        if ($tab === this.$selectedTab) {\n            return;\n        }\n\n        this.$selectedTab = $tab;\n        this.selectedTabIndex = index;\n        if (index === 0) {\n            $('#content').addClass('square');\n        } else {\n            $('#content').removeClass('square');\n        }\n\n        Garnish.$win.trigger('resize');\n        // Fixes Redactor fixed toolbars on previously hidden panes\n        Garnish.$doc.trigger('scroll');\n\n        // If there is a revision menu, set its links to this tab ID\n        let href = $tab && $tab.attr('href');\n        if (href && href.charAt(0) === '#') {\n            let menubtn = $('#context-btn').menubtn().data('menubtn');\n            if (menubtn) {\n                for (let i = 0; i < menubtn.menu.$options.length; i++) {\n                    let a = menubtn.menu.$options[i];\n                    if (a.href) {\n                        a.href = a.href.match(/^[^#]*/)[0] + href;\n                    }\n                }\n            }\n        }\n    },\n\n    deselectTab: function() {\n        if (!this.$selectedTab) {\n            return;\n        }\n\n        this.$selectedTab.removeClass('sel');\n        if (this.$selectedTab.attr('href').charAt(0) === '#') {\n            $(this.$selectedTab.attr('href')).addClass('hidden');\n        }\n        this._selectTab(null, null);\n    },\n\n    handleWindowResize: function() {\n        this.updateTabs();\n        this.updateResponsiveTables();\n    },\n\n    updateTabs: function() {\n        if (!this.$tabsContainer) {\n            return;\n        }\n\n        var maxWidth = Math.floor(this.$tabsContainer.width()) - 40;\n        var totalWidth = 0;\n        var showOverflowMenu = false;\n        var tabMargin = Garnish.$bod.width() >= 768 ? -12 : -7;\n        var $tab;\n\n        // Start with the selected tab, because that needs to be visible\n        if (this.$selectedTab) {\n            this.$selectedTab.parent('li').appendTo(this.$tabsList);\n            totalWidth = Math.ceil(this.$selectedTab.parent('li').width());\n        }\n\n        for (var i = 0; i < this.$tabs.length; i++) {\n            $tab = this.$tabs.eq(i).appendTo(this.$tabsList);\n            if (i !== this.selectedTabIndex) {\n                totalWidth += Math.ceil($tab.width());\n                // account for the negative margin\n                if (i !== 0 || this.$selectedTab) {\n                    totalWidth += tabMargin;\n                }\n            }\n\n            if (i === this.selectedTabIndex || totalWidth <= maxWidth) {\n                $tab.find('> a').removeAttr('role').removeAttr('tabindex');\n            } else {\n                const $a = $tab.appendTo(this.$overflowTabList).find('> a');\n                this.$overflowTabBtn.data('menubtn').menu.addOptions($a);\n                showOverflowMenu = true;\n            }\n        }\n\n        if (showOverflowMenu) {\n            this.$overflowTabBtn.removeClass('hidden');\n        } else {\n            this.$overflowTabBtn.addClass('hidden');\n        }\n    },\n\n    updateResponsiveTables: function() {\n        for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n            this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n            this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n            this.updateResponsiveTables._check = false;\n\n            if (this.updateResponsiveTables._containerWidth > 0) {\n                // Is this the first time we've checked this table?\n                if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                    this.updateResponsiveTables._check = true;\n                } else {\n                    this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                    // Getting wider?\n                    if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                        if (this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._$table.removeClass('collapsed');\n                            this.updateResponsiveTables._check = true;\n                        }\n                    } else if (!this.updateResponsiveTables._isCollapsed) {\n                        this.updateResponsiveTables._check = true;\n                    }\n                }\n\n                // Are we checking the table width?\n                if (this.updateResponsiveTables._check) {\n                    if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                        this.updateResponsiveTables._$table.addClass('collapsed');\n                    }\n                }\n\n                // Remember the container width for next time\n                this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n            }\n        }\n    },\n\n    updateFixedHeader: function() {\n        // Have we scrolled passed the top of #main?\n        if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n            if (!this.fixedHeader) {\n                var headerHeight = this.$headerContainer.height();\n\n                // Hard-set the minimum content container height\n                this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                // Hard-set the header container height\n                this.$headerContainer.height(headerHeight);\n                Garnish.$bod.addClass('fixed-header');\n\n                // Fix the sidebar and details pane positions if they are taller than #content-container\n                var contentHeight = this.$contentContainer.outerHeight();\n                var $detailsHeight = this.$details.outerHeight();\n                var css = {\n                    top: headerHeight + 'px',\n                    'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                };\n                this.$sidebar.addClass('fixed').css(css);\n                this.$details.addClass('fixed').css(css);\n                this.fixedHeader = true;\n            }\n        } else if (this.fixedHeader) {\n            this.$headerContainer.height('auto');\n            Garnish.$bod.removeClass('fixed-header');\n            this.$contentContainer.css('min-height', '');\n            this.$sidebar.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.$details.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.fixedHeader = false;\n        }\n    },\n\n    /**\n     * Dispays a notification.\n     *\n     * @param {string} type\n     * @param {string} message\n     */\n    displayNotification: function(type, message) {\n        var notificationDuration = Craft.CP.notificationDuration;\n\n        if (type === 'error') {\n            notificationDuration *= 2;\n        }\n\n        var $notification = $('<div class=\"notification ' + type + '\">' + message + '</div>')\n            .appendTo(this.$notificationContainer);\n\n        var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n        $notification\n            .hide()\n            .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n            .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n            .delay(notificationDuration)\n            .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                complete: function() {\n                    $notification.remove();\n                }\n            });\n\n        this.trigger('displayNotification', {\n            notificationType: type,\n            message: message\n        });\n    },\n\n    /**\n     * Displays a notice.\n     *\n     * @param {string} message\n     */\n    displayNotice: function(message) {\n        this.displayNotification('notice', message);\n    },\n\n    /**\n     * Displays an error.\n     *\n     * @param {string} message\n     */\n    displayError: function(message) {\n        if (!message) {\n            message = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.displayNotification('error', message);\n    },\n\n    fetchAlerts: function() {\n        var data = {\n            path: Craft.path\n        };\n\n        Craft.queueActionRequest('app/get-cp-alerts', data, $.proxy(this, 'displayAlerts'));\n    },\n\n    displayAlerts: function(alerts) {\n        this.$alerts.remove();\n\n        if (Garnish.isArray(alerts) && alerts.length) {\n            this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n            for (var i = 0; i < alerts.length; i++) {\n                $('<li>' + alerts[i] + '</li>').appendTo(this.$alerts);\n            }\n\n            var height = this.$alerts.outerHeight();\n            this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n            this.initAlerts();\n        }\n    },\n\n    initAlerts: function() {\n        // Are there any shunnable alerts?\n        var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n        for (var i = 0; i < $shunnableAlerts.length; i++) {\n            this.addListener($shunnableAlerts[i], 'click', $.proxy(function(ev) {\n                ev.preventDefault();\n\n                var $link = $(ev.currentTarget);\n\n                var data = {\n                    message: $link.prop('className').substr(5)\n                };\n\n                Craft.queueActionRequest('app/shun-cp-alert', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            $link.parent().remove();\n                        } else {\n                            this.displayError(response.error);\n                        }\n                    }\n                }, this));\n            }, this));\n        }\n    },\n\n    checkForUpdates: function(forceRefresh, includeDetails, callback) {\n        // Make 'includeDetails' optional\n        if (typeof includeDetails === 'function') {\n            callback = includeDetails;\n            includeDetails = false;\n        }\n\n        // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n        // then just set a new callback that re-checks for updates when the current one is done.\n        if (this.checkingForUpdates && (\n            (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n            (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n        )) {\n            var realCallback = callback;\n\n            callback = function() {\n                this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n            }.bind(this);\n        }\n\n        // Callback function?\n        if (typeof callback === 'function') {\n            if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                this.checkForUpdatesCallbacks = [];\n            }\n\n            this.checkForUpdatesCallbacks.push(callback);\n        }\n\n        if (!this.checkingForUpdates) {\n            this.checkingForUpdates = true;\n            this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n            this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n            this._checkForUpdates(forceRefresh, includeDetails)\n                .then(function(info) {\n                    this.updateUtilitiesBadge();\n                    this.checkingForUpdates = false;\n\n                    if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                        var callbacks = this.checkForUpdatesCallbacks;\n                        this.checkForUpdatesCallbacks = null;\n\n                        for (var i = 0; i < callbacks.length; i++) {\n                            callbacks[i](info);\n                        }\n                    }\n\n                    this.trigger('checkForUpdates', {\n                        updateInfo: info\n                    });\n                }.bind(this));\n        }\n    },\n\n    _checkForUpdates: function(forceRefresh, includeDetails) {\n        return new Promise(function(resolve, reject) {\n            if (!forceRefresh) {\n                this._checkForCachedUpdates(includeDetails)\n                    .then(function(info) {\n                        if (info.cached !== false) {\n                            resolve(info);\n                        }\n\n                        this._getUpdates(includeDetails)\n                            .then(function(info) {\n                                resolve(info);\n                            });\n                    }.bind(this));\n            } else {\n                this._getUpdates(includeDetails)\n                    .then(function(info) {\n                        resolve(info);\n                    });\n            }\n        }.bind(this));\n    },\n\n    _checkForCachedUpdates: function(includeDetails) {\n        return new Promise(function(resolve, reject) {\n            var data = {\n                onlyIfCached: true,\n                includeDetails: includeDetails,\n            };\n            Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    resolve({cached: false});\n                }\n            });\n        });\n    },\n\n    _getUpdates: function(includeDetails) {\n        return new Promise(function(resolve, reject) {\n            Craft.sendApiRequest('GET', 'updates')\n                .then(function(updates) {\n                    this._cacheUpdates(updates, includeDetails).then(resolve);\n                }.bind(this))\n                .catch(function(e) {\n                    this._cacheUpdates({}).then(resolve);\n                }.bind(this));\n        }.bind(this));\n    },\n\n    _cacheUpdates: function(updates, includeDetails) {\n        return new Promise(function(resolve, reject) {\n            Craft.postActionRequest('app/cache-updates', {\n                updates: updates,\n                includeDetails: includeDetails,\n            }, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    reject();\n                }\n            }, {\n                contentType: 'json'\n            });\n        });\n    },\n\n    updateUtilitiesBadge: function() {\n        var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n        // Ignore if there is no (non-selected) Utilities nav item\n        if (!$utilitiesLink.length) {\n            return;\n        }\n\n        Craft.queueActionRequest('app/get-utilities-badge-count', $.proxy(function(response) {\n            // Get the existing utility nav badge, if any\n            var $badge = $utilitiesLink.children('.badge');\n\n            if (response.badgeCount) {\n                if (!$badge.length) {\n                    $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                }\n                $badge.text(response.badgeCount);\n            } else if ($badge.length) {\n                $badge.remove();\n            }\n        }, this));\n    },\n\n    runQueue: function() {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        if (Craft.runQueueAutomatically) {\n            Craft.queueActionRequest('queue/run', $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.trackJobProgress(false, true);\n                }\n            }, this));\n        } else {\n            this.trackJobProgress(false, true);\n        }\n    },\n\n    trackJobProgress: function(delay, force) {\n        if (force && this.trackJobProgressTimeout) {\n            clearTimeout(this.trackJobProgressTimeout);\n            this.trackJobProgressTimeout = null;\n        }\n\n        // Ignore if we're already tracking jobs, or the queue is disabled\n        if (this.trackJobProgressTimeout || !this.enableQueue) {\n            return;\n        }\n\n        if (delay === true) {\n            // Determine the delay based on how long the displayed job info has remained unchanged\n            var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n            this.trackJobProgressTimeout = setTimeout($.proxy(this, '_trackJobProgressInternal'), timeout);\n        } else {\n            this._trackJobProgressInternal();\n        }\n    },\n\n    _trackJobProgressInternal: function() {\n        Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                this.trackJobProgressTimeout = null;\n                this.totalJobs = response.total;\n                this.setJobInfo(response.jobs);\n\n                if (this.jobInfo.length) {\n                    // Check again after a delay\n                    this.trackJobProgress(true);\n                }\n            }\n        }, this));\n    },\n\n    setJobInfo: function(jobInfo) {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        this.jobInfo = jobInfo;\n\n        // Update the displayed job info\n        var oldInfo = this.displayedJobInfo;\n        this.displayedJobInfo = this.getDisplayedJobInfo();\n\n        // Same old same old?\n        if (\n            oldInfo &&\n            this.displayedJobInfo &&\n            oldInfo.id === this.displayedJobInfo.id &&\n            oldInfo.progress === this.displayedJobInfo.progress &&\n            oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n            oldInfo.status === this.displayedJobInfo.status\n        ) {\n            this.displayedJobInfoUnchanged++;\n        } else {\n            // Reset the counter\n            this.displayedJobInfoUnchanged = 1;\n        }\n\n        this.updateJobIcon();\n\n        // Fire a setJobInfo event\n        this.trigger('setJobInfo');\n    },\n\n    /**\n     * Returns info for the job that should be displayed in the CP sidebar\n     */\n    getDisplayedJobInfo: function() {\n        if (!this.enableQueue) {\n            return null;\n        }\n\n        // Set the status preference order\n        var statuses = [\n            Craft.CP.JOB_STATUS_RESERVED,\n            Craft.CP.JOB_STATUS_FAILED,\n            Craft.CP.JOB_STATUS_WAITING\n        ];\n\n        for (var i = 0; i < statuses.length; i++) {\n            for (var j = 0; j < this.jobInfo.length; j++) {\n                if (this.jobInfo[j].status === statuses[i]) {\n                    return this.jobInfo[j];\n                }\n            }\n        }\n    },\n\n    updateJobIcon: function() {\n        if (!this.enableQueue || !this.$nav.length) {\n            return;\n        }\n\n        if (this.displayedJobInfo) {\n            if (!this.jobProgressIcon) {\n                this.jobProgressIcon = new JobProgressIcon();\n            }\n\n            if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n            } else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n            }\n        } else {\n            if (this.jobProgressIcon) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.complete();\n                delete this.jobProgressIcon;\n            }\n        }\n    },\n\n    /**\n     * Returns the active site for the control panel\n     *\n     * @return {number}\n     */\n    getSiteId: function() {\n        // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n        let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n        if (typeof siteId !== 'undefined') {\n            Craft.removeLocalStorage('BaseElementIndex.siteId');\n            this.setSiteId(siteId);\n            return siteId;\n        }\n        return Craft.getCookie('siteId');\n    },\n\n    /**\n     * Sets the active site for the control panel\n     * @param {number} siteId\n     */\n    setSiteId: function(siteId) {\n        Craft.setCookie('siteId', siteId, {\n            maxAge: 31536000 // 1 year\n        });\n    }\n}, {\n    //maxWidth: 1051, //1024,\n    notificationDuration: 2000,\n\n    JOB_STATUS_WAITING: 1,\n    JOB_STATUS_RESERVED: 2,\n    JOB_STATUS_DONE: 3,\n    JOB_STATUS_FAILED: 4\n});\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend({\n    $li: null,\n    $a: null,\n    $label: null,\n    $progressLabel: null,\n\n    progress: null,\n    failMode: false,\n\n    _$bgCanvas: null,\n    _$staticCanvas: null,\n    _$hoverCanvas: null,\n    _$failCanvas: null,\n\n    _staticCtx: null,\n    _hoverCtx: null,\n    _canvasSize: null,\n    _arcPos: null,\n    _arcRadius: null,\n    _lineWidth: null,\n\n    _arcStartPos: 0,\n    _arcEndPos: 0,\n    _arcStartStepSize: null,\n    _arcEndStepSize: null,\n    _arcStep: null,\n    _arcStepTimeout: null,\n    _arcAnimateCallback: null,\n\n    _progressBar: null,\n\n    init: function() {\n        this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n        this.$a = $('<a/>', {\n            id: 'job-icon',\n            href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n        }).appendTo(this.$li);\n        this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n        var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n        this.$label = $('<span/>').appendTo($labelContainer);\n        this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n        let m = (window.devicePixelRatio > 1 ? 2 : 1);\n        this._canvasSize = 18 * m;\n        this._arcPos = this._canvasSize / 2;\n        this._arcRadius = 7 * m;\n        this._lineWidth = 3 * m;\n\n        this._$bgCanvas = this._createCanvas('bg', '#61666b');\n        this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n        this._$hoverCanvas = this._createCanvas('hover', '#fff');\n        this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n        this._staticCtx = this._$staticCanvas[0].getContext('2d');\n        this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n        this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n        this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n    },\n\n    setDescription: function(description, progressLabel) {\n        this.$a.attr('title', description);\n        this.$label.text(description);\n        if (progressLabel) {\n            this.$progressLabel.text(progressLabel).show();\n        } else {\n            this.$progressLabel.hide();\n        }\n    },\n\n    setProgress: function(progress) {\n        if (progress == 0) {\n            this._$staticCanvas.hide();\n            this._$hoverCanvas.hide();\n        } else {\n            this._$staticCanvas.show();\n            this._$hoverCanvas.show();\n            if (this.progress && progress > this.progress) {\n                this._animateArc(0, progress / 100);\n            } else {\n                this._setArc(0, progress / 100);\n            }\n        }\n\n        this.progress = progress;\n    },\n\n    complete: function() {\n        this._animateArc(0, 1, $.proxy(function() {\n            this._$bgCanvas.velocity('fadeOut');\n\n            this._animateArc(1, 1, $.proxy(function() {\n                this.$a.remove();\n                this.destroy();\n            }, this));\n        }, this));\n    },\n\n    showFailMode: function(message) {\n        if (this.failMode) {\n            return;\n        }\n\n        this.failMode = true;\n        this.progress = null;\n\n        this._$bgCanvas.hide();\n        this._$staticCanvas.hide();\n        this._$hoverCanvas.hide();\n        this._$failCanvas.show();\n\n        this.setDescription(message);\n    },\n\n    hideFailMode: function() {\n        if (!this.failMode) {\n            return;\n        }\n\n        this.failMode = false;\n\n        this._$bgCanvas.show();\n        this._$staticCanvas.show();\n        this._$hoverCanvas.show();\n        this._$failCanvas.hide();\n    },\n\n    _createCanvas: function(id, color) {\n        var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n            ctx = $canvas[0].getContext('2d');\n\n        ctx.strokeStyle = color;\n        ctx.lineWidth = this._lineWidth;\n        ctx.lineCap = 'round';\n        return $canvas;\n    },\n\n    _setArc: function(startPos, endPos) {\n        this._arcStartPos = startPos;\n        this._arcEndPos = endPos;\n\n        this._drawArc(this._staticCtx, startPos, endPos);\n        this._drawArc(this._hoverCtx, startPos, endPos);\n    },\n\n    _drawArc: function(ctx, startPos, endPos) {\n        ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n        ctx.beginPath();\n        ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n    },\n\n    _animateArc: function(targetStartPos, targetEndPos, callback) {\n        if (this._arcStepTimeout) {\n            clearTimeout(this._arcStepTimeout);\n        }\n\n        this._arcStep = 0;\n        this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n        this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n        this._arcAnimateCallback = callback;\n        this._takeNextArcStep();\n    },\n\n    _takeNextArcStep: function() {\n        this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n        this._arcStep++;\n\n        if (this._arcStep < 10) {\n            this._arcStepTimeout = setTimeout($.proxy(this, '_takeNextArcStep'), 50);\n        } else if (this._arcAnimateCallback) {\n            this._arcAnimateCallback();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend({\n    editableGroups: null,\n    $newCategoryBtnGroup: null,\n    $newCategoryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', $.proxy(this, 'updateButton'));\n        this.on('selectSite', $.proxy(this, 'updateButton'));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible groups the user has permission to create new categories in\n        this.editableGroups = [];\n\n        for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n            var group = Craft.editableCategoryGroups[i];\n\n            if (this.getSourceByKey('group:' + group.uid)) {\n                this.editableGroups.push(group);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific category group in the URL?\n        if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n\n                if ($source.data('handle') === defaultGroupHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        // Get the handle of the selected source\n        var selectedSourceHandle = this.$source.data('handle');\n\n        var i, href, label;\n\n        // Update the New Category button\n        // ---------------------------------------------------------------------\n\n        if (this.editableGroups.length) {\n            // Remove the old button, if there is one\n            if (this.$newCategoryBtnGroup) {\n                this.$newCategoryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a group that they have permission to create categories in\n            var selectedGroup;\n\n            if (selectedSourceHandle) {\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    if (this.editableGroups[i].handle === selectedSourceHandle) {\n                        selectedGroup = this.editableGroups[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n            // Otherwise only show a menu button\n            if (selectedGroup) {\n                href = this._getGroupTriggerHref(selectedGroup);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                        this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.editableGroups.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newCategoryBtnGroup);\n                }\n            } else {\n                this.$newCategoryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New category'),\n                }).appendTo(this.$newCategoryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    var group = this.editableGroups[i];\n\n                    if (this.settings.context === 'index' || group !== selectedGroup) {\n                        href = this._getGroupTriggerHref(group);\n                        label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', $.proxy(function(ev) {\n                        this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                    }, this));\n                }\n            }\n\n            this.addButton(this.$newCategoryBtnGroup);\n        }\n\n        // Update the URL if we're on the Categories index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'categories';\n\n            if (selectedSourceHandle) {\n                uri += '/' + selectedSourceHandle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getGroupTriggerHref: function(group) {\n        if (this.settings.context === 'index') {\n            var uri = 'categories/' + group.handle + '/new';\n            if (this.siteId && this.siteId != Craft.primarySiteId) {\n                for (var i = 0; i < Craft.sites.length; i++) {\n                    if (Craft.sites[i].id == this.siteId) {\n                        uri += '/' + Craft.sites[i].handle;\n                    }\n                }\n            }\n            return 'href=\"' + Craft.getUrl(uri) + '\"';\n        } else {\n            return 'data-id=\"' + group.id + '\"';\n        }\n    },\n\n    _openCreateCategoryModal: function(groupId) {\n        if (this.$newCategoryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the group\n        var group;\n\n        for (var i = 0; i < this.editableGroups.length; i++) {\n            if (this.editableGroups[i].id == groupId) {\n                group = this.editableGroups[i];\n                break;\n            }\n        }\n\n        if (!group) {\n            return;\n        }\n\n        this.$newCategoryBtn.addClass('inactive');\n        var newCategoryBtnText = this.$newCategoryBtn.text();\n        this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newCategoryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                groupId: groupId\n            },\n            onBeginLoading: $.proxy(function() {\n                this.$newCategoryBtn.addClass('loading');\n            }, this),\n            onEndLoading: $.proxy(function() {\n                this.$newCategoryBtn.removeClass('loading');\n            }, this),\n            onHideHud: $.proxy(function() {\n                this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n            }, this),\n            onSaveElement: $.proxy(function(response) {\n                // Make sure the right group is selected\n                var groupSourceKey = 'group:' + group.uid;\n\n                if (this.sourceKey !== groupSourceKey) {\n                    this.selectSourceByKey(groupSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            }, this)\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend({\n    setSettings: function() {\n        this.base.apply(this, arguments);\n        this.settings.sortable = false;\n    },\n\n    getModalSettings: function() {\n        var settings = this.base();\n        settings.hideOnSelect = false;\n        return settings;\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.find('.element');\n    },\n\n    onModalSelect: function(elements) {\n        // Disable the modal\n        this.modal.disable();\n        this.modal.disableCancelBtn();\n        this.modal.disableSelectBtn();\n        this.modal.showFooterSpinner();\n\n        // Get the new category HTML\n        var selectedCategoryIds = this.getSelectedElementIds();\n\n        for (var i = 0; i < elements.length; i++) {\n            selectedCategoryIds.push(elements[i].id);\n        }\n\n        var data = {\n            categoryIds: selectedCategoryIds,\n            siteId: elements[0].siteId,\n            id: this.settings.id,\n            name: this.settings.name,\n            branchLimit: this.settings.branchLimit,\n            selectionLabel: this.settings.selectionLabel\n        };\n\n        Craft.postActionRequest('elements/get-categories-input-html', data, $.proxy(function(response, textStatus) {\n            this.modal.enable();\n            this.modal.enableCancelBtn();\n            this.modal.enableSelectBtn();\n            this.modal.hideFooterSpinner();\n\n            if (textStatus === 'success') {\n                var $newInput = $(response.html),\n                    $newElementsContainer = $newInput.children('.elements');\n\n                this.$elementsContainer.replaceWith($newElementsContainer);\n                this.$elementsContainer = $newElementsContainer;\n                this.resetElements();\n\n                var filteredElements = [];\n\n                for (var i = 0; i < elements.length; i++) {\n                    var element = elements[i],\n                        $element = this.getElementById(element.id);\n\n                    if ($element) {\n                        this.animateElementIntoPlace(element.$element, $element);\n                        filteredElements.push(element);\n                    }\n                }\n\n                this.updateDisabledElementsInModal();\n                this.modal.hide();\n                this.onSelectElements(filteredElements);\n            }\n        }, this));\n    },\n\n    removeElement: function($element) {\n        // Find any descendants this category might have\n        var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n        // Remove our record of them all at once\n        this.removeElements($allCategories);\n\n        // Animate them away one at a time\n        for (var i = 0; i < $allCategories.length; i++) {\n            this._animateCategoryAway($allCategories, i);\n        }\n    },\n\n    _animateCategoryAway: function($allCategories, i) {\n        var callback;\n\n        // Is this the last one?\n        if (i === $allCategories.length - 1) {\n            callback = $.proxy(function() {\n                var $li = $allCategories.first().parent().parent(),\n                    $ul = $li.parent();\n\n                if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                    $li.remove();\n                } else {\n                    $ul.remove();\n                }\n            }, this);\n        }\n\n        var func = $.proxy(function() {\n            this.animateElementAway($allCategories.eq(i), callback);\n        }, this);\n\n        if (i === 0) {\n            func();\n        } else {\n            setTimeout(func, 100 * i);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend({\n    columns: null,\n    rows: null,\n\n    init: function(data) {\n        let columns = data.columns;\n        let rows = data.rows;\n\n        rows.forEach($.proxy(function(d) {\n            $.each(d, function(cellIndex) {\n                var column = columns[cellIndex];\n\n                var parseTime;\n\n                switch (column.type) {\n                    case 'date':\n                        parseTime = d3.timeParse(\"%Y-%m-%d\");\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'datetime':\n                        parseTime = d3.timeParse(\"%Y-%m-%d %H:00:00\");\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'percent':\n                        d[cellIndex] = d[cellIndex] / 100;\n                        break;\n\n                    case 'number':\n                        d[cellIndex] = +d[cellIndex];\n                        break;\n\n                    default:\n                    // do nothing\n                }\n            });\n        }, this));\n\n        this.columns = columns;\n        this.rows = rows;\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend({\n    $container: null,\n    $tip: null,\n\n    init: function($container) {\n        this.$container = $container;\n\n        this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n        this.hide();\n    },\n\n    setContent: function(html) {\n        this.$tip.html(html);\n    },\n\n    setPosition: function(position) {\n        this.$tip.css(\"left\", position.left + \"px\");\n        this.$tip.css(\"top\", position.top + \"px\");\n    },\n\n    show: function() {\n        this.$tip.css(\"display\", 'block');\n    },\n\n    hide: function() {\n        this.$tip.css(\"display\", 'none');\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend({\n    $container: null,\n    $chart: null,\n\n    chartBaseClass: 'cp-chart',\n    dataTable: null,\n\n    formatLocale: null,\n    timeFormatLocale: null,\n    orientation: null,\n\n    svg: null,\n    width: null,\n    height: null,\n\n    init: function(container, settings) {\n        this.$container = container;\n\n        this.setSettings(Craft.charts.BaseChart.defaults);\n        this.setSettings(settings);\n\n        var globalSettings = {\n            formats: window.d3Formats,\n            formatLocaleDefinition: window.d3FormatLocaleDefinition,\n            timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n        };\n\n        this.setSettings(globalSettings);\n\n        d3.select(window).on('resize', $.proxy(function() {\n            this.resize();\n        }, this));\n    },\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n        this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n    },\n\n    draw: function(dataTable, settings) {\n        // Settings and chart attributes\n\n        this.setSettings(settings);\n\n        this.dataTable = dataTable;\n        this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n        this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n        this.orientation = this.settings.orientation;\n\n        // Set (or reset) the chart element\n\n        if (this.$chart) {\n            this.$chart.remove();\n        }\n\n        var className = this.chartBaseClass;\n\n        if (this.settings.chartClass) {\n            className += ' ' + this.settings.chartClass;\n        }\n\n        this.$chart = $('<div class=\"' + className + '\" />').appendTo(this.$container);\n    },\n\n    resize: function() {\n        this.draw(this.dataTable, this.settings);\n    },\n\n    onAfterDrawTicks: function() {\n        // White border for ticks' text\n        $('.tick', this.$chart).each(function(tickKey, tick) {\n            var $tickText = $('text', tick);\n\n            var $clone = $tickText.clone();\n            $clone.appendTo(tick);\n\n            $tickText.attr('stroke', '#ffffff');\n            $tickText.attr('stroke-width', 3);\n        });\n    }\n}, {\n    defaults: {\n        formatLocaleDefinition: null,\n        timeFormatLocaleDefinition: null,\n        formats: {\n            numberFormat: ',.2f',\n            percentFormat: ',.2%',\n            currencyFormat: '$,.2f',\n            shortDateFormats: {\n                day: \"%-m/%-d\",\n                month: \"%-m/%y\",\n                year: \"%Y\"\n            }\n        },\n        margin: {top: 0, right: 0, bottom: 0, left: 0},\n        chartClass: null,\n        colors: [\"#0594D1\", \"#DE3800\", \"#FF9A00\", \"#009802\", \"#9B009B\"]\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend({\n    tip: null,\n    drawingArea: null,\n\n    init: function(container, settings) {\n        this.base(container, Craft.charts.Area.defaults);\n\n        this.setSettings(settings);\n    },\n\n    draw: function(dataTable, settings) {\n        this.base(dataTable, settings);\n\n        if (this.tip) {\n            this.tip = null;\n        }\n\n        var margin = this.getChartMargin();\n\n        this.width = this.$chart.width() - margin.left - margin.right;\n        this.height = this.$chart.height() - margin.top - margin.bottom;\n\n        // Append SVG to chart element\n\n        var svg = {\n            width: this.width + (margin.left + margin.right),\n            height: this.height + (margin.top + margin.bottom),\n            translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n            translateY: margin.top\n        };\n\n        this.svg = d3.select(this.$chart.get(0)).append(\"svg\")\n            .attr(\"width\", svg.width)\n            .attr(\"height\", svg.height);\n\n        this.drawingArea = this.svg.append(\"g\")\n            .attr(\"transform\", \"translate(\" + svg.translateX + \",\" + svg.translateY + \")\");\n\n        // Draw elements\n\n        this.drawTicks();\n        this.drawAxes();\n        this.drawChart();\n        this.drawTipTriggers();\n    },\n\n    drawTicks: function() {\n        // Draw X ticks\n\n        var x = this.getX(true);\n        var xTicks = 3;\n        var xAxis = d3.axisBottom(x)\n            .tickFormat(this.getXFormatter())\n            .ticks(xTicks);\n\n        this.drawingArea.append(\"g\")\n            .attr(\"class\", \"x ticks-axis\")\n            .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n            .call(xAxis);\n\n        // Draw Y ticks\n\n        var y = this.getY();\n        var yTicks = 2;\n        var yAxis;\n\n        if (this.orientation !== 'rtl') {\n            yAxis = d3.axisLeft(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"y ticks-axis\")\n                .call(yAxis);\n        } else {\n            yAxis = d3.axisRight(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"y ticks-axis\")\n                .attr(\"transform\", \"translate(\" + this.width + \",0)\")\n                .call(yAxis);\n        }\n\n        // On after draw ticks\n\n        this.onAfterDrawTicks();\n    },\n\n    drawAxes: function() {\n        if (this.settings.xAxis.showAxis) {\n            var x = this.getX();\n            var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"x axis\")\n                .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n                .call(xAxis);\n        }\n\n        if (this.settings.yAxis.showAxis) {\n            var y = this.getY();\n            var chartPadding = 0;\n            var yAxis;\n\n            if (this.orientation === 'rtl') {\n                yAxis = d3.axisLeft(y).ticks(0);\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y axis\")\n                    .attr(\"transform\", \"translate(\" + (this.width - chartPadding) + \", 0)\")\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y).ticks(0);\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y axis\")\n                    .attr(\"transform\", \"translate(\" + chartPadding + \", 0)\")\n                    .call(yAxis);\n            }\n        }\n    },\n\n    drawChart: function() {\n        var x = this.getX(true);\n        var y = this.getY();\n\n        // X & Y grid lines\n\n        if (this.settings.xAxis.gridlines) {\n            var xLineAxis = d3.axisBottom(x);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"x grid-line\")\n                .attr(\"transform\", \"translate(0,\" + this.height + \")\")\n                .call(xLineAxis\n                    .tickSize(-this.height, 0, 0)\n                    .tickFormat(\"\")\n                );\n        }\n\n        var yTicks = 2;\n\n        if (this.settings.yAxis.gridlines) {\n            var yLineAxis = d3.axisLeft(y);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"y grid-line\")\n                .attr(\"transform\", \"translate(0 , 0)\")\n                .call(yLineAxis\n                    .tickSize(-(this.width), 0)\n                    .tickFormat(\"\")\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks)\n                );\n        }\n\n        // Line\n\n        var line = d3.line()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append(\"g\")\n            .attr(\"class\", \"chart-line\")\n            .append(\"path\")\n            .datum(this.dataTable.rows)\n            .style('fill', 'none')\n            .style('stroke', this.settings.colors[0])\n            .style('stroke-width', '3px')\n            .attr(\"d\", line);\n\n        // Area\n\n        var area = d3.area()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y0(this.height)\n            .y1(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append(\"g\")\n            .attr(\"class\", \"chart-area\")\n            .append(\"path\")\n            .datum(this.dataTable.rows)\n            .style('fill', this.settings.colors[0])\n            .style('fill-opacity', '0.3')\n            .attr(\"d\", area);\n\n        // Plots\n\n        if (this.settings.plots) {\n            this.drawingArea.append('g')\n                .attr(\"class\", \"plots\")\n                .selectAll(\"circle\")\n                .data(this.dataTable.rows)\n                .enter()\n                .append(\"circle\")\n                .style('fill', this.settings.colors[0])\n                .attr(\"class\", $.proxy(function(d, index) {\n                    return 'plot plot-' + index;\n                }, this))\n                .attr(\"r\", 4)\n                .attr(\"cx\", $.proxy(function(d) {\n                    return x(d[0]);\n                }, this))\n                .attr(\"cy\", $.proxy(function(d) {\n                    return y(d[1]);\n                }, this));\n        }\n    },\n\n    drawTipTriggers: function() {\n        if (this.settings.tips) {\n            if (!this.tip) {\n                this.tip = new Craft.charts.Tip(this.$chart);\n            }\n\n            // Define xAxisTickInterval\n\n            var chartMargin = this.getChartMargin();\n            var tickSizeOuter = 6;\n            var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n            var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n            // Tip trigger width\n\n            var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n            // Draw triggers\n\n            var x = this.getX(true);\n            var y = this.getY();\n\n            this.drawingArea.append('g')\n                .attr(\"class\", \"tip-triggers\")\n                .selectAll(\"rect\")\n                .data(this.dataTable.rows)\n                .enter().append(\"rect\")\n                .attr(\"class\", \"tip-trigger\")\n                .style('fill', 'transparent')\n                .style('fill-opacity', '1')\n                .attr(\"width\", tipTriggerWidth)\n                .attr(\"height\", this.height)\n                .attr(\"x\", $.proxy(function(d) {\n                    return x(d[0]) - tipTriggerWidth / 2;\n                }, this))\n                .on(\"mouseover\", $.proxy(function(d, index) {\n                    // Expand plot\n\n                    this.drawingArea.select('.plot-' + index).attr(\"r\", 5);\n\n                    // Set tip content\n\n                    var $content = $('<div />');\n                    var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                    var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                    $xValue.html(this.getXFormatter()(d[0]));\n                    $yValue.html(this.getYFormatter()(d[1]));\n\n                    var content = $content.get(0);\n\n                    this.tip.setContent(content);\n\n                    // Set tip position\n\n                    var margin = this.getChartMargin();\n\n                    var offset = 24;\n                    var top = (y(d[1]) + offset);\n                    var left;\n\n                    if (this.orientation !== 'rtl') {\n                        left = (x(d[0]) + margin.left + offset);\n\n                        var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                        var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                        if (calcLeft > maxLeft) {\n                            left = x(d[0]) - (this.tip.$tip.width() + offset);\n                        }\n                    } else {\n                        left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                    }\n\n                    if (left < 0) {\n                        left = (x(d[0]) + margin.left + offset);\n                    }\n\n                    var position = {\n                        top: top,\n                        left: left\n                    };\n\n                    this.tip.setPosition(position);\n\n                    // Show tip\n\n                    this.tip.show();\n                }, this))\n                .on(\"mouseout\", $.proxy(function(d, index) {\n                    // Unexpand Plot\n                    this.drawingArea.select('.plot-' + index).attr(\"r\", 4);\n\n                    // Hide tip\n                    this.tip.hide();\n                }, this));\n        }\n    },\n\n    getChartMargin: function() {\n        var margin = this.settings.margin;\n\n        // Estimate the max width of y ticks and set it as the left margin\n\n        var values = this.getYTickValues();\n        var yTicksMaxWidth = 0;\n\n        $.each(values, $.proxy(function(key, value) {\n            var characterWidth = 8;\n\n            var formatter = this.getYFormatter();\n\n            var formattedValue = formatter(value);\n            var computedTickWidth = formattedValue.length * characterWidth;\n\n            if (computedTickWidth > yTicksMaxWidth) {\n                yTicksMaxWidth = computedTickWidth;\n            }\n        }, this));\n\n        yTicksMaxWidth += 10;\n\n        margin.left = yTicksMaxWidth;\n\n        return margin;\n    },\n\n    getX: function(padded) {\n        var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomain = [xDomainMin, xDomainMax];\n\n        if (this.orientation === 'rtl') {\n            xDomain = [xDomainMax, xDomainMin];\n        }\n\n        var left = 0;\n        var right = 0;\n\n        if (padded) {\n            left = 0;\n            right = 0;\n        }\n\n        var x = d3.scaleTime().range([left, (this.width - right)]);\n\n        x.domain(xDomain);\n\n        return x;\n    },\n\n    getY: function() {\n        var yDomain = [0, this.getYMaxValue()];\n\n        var y = d3.scaleLinear().range([this.height, 0]);\n\n        y.domain(yDomain);\n\n        return y;\n    },\n\n    getXFormatter: function() {\n        var formatter;\n\n        if (this.settings.xAxis.formatter !== $.noop) {\n            formatter = this.settings.xAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYFormatter: function() {\n        var formatter;\n\n        if (this.settings.yAxis.formatter !== $.noop) {\n            formatter = this.settings.yAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYMaxValue: function() {\n        return d3.max(this.dataTable.rows, function(d) {\n            return d[1];\n        });\n    },\n\n    getYTickValues: function() {\n        var maxValue = this.getYMaxValue();\n\n        if (maxValue > 1) {\n            return [(maxValue / 2), maxValue];\n        } else {\n            return [0, maxValue];\n        }\n    }\n}, {\n    defaults: {\n        chartClass: 'area',\n        margin: {top: 25, right: 5, bottom: 25, left: 0},\n        plots: true,\n        tips: true,\n        xAxis: {\n            gridlines: false,\n            showAxis: true,\n            formatter: $.noop\n        },\n        yAxis: {\n            gridlines: true,\n            showAxis: false,\n            formatter: $.noop\n        }\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = \"0\" + duration.hours;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = \"0\" + duration.minutes;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = \"0\" + duration.seconds;\n        }\n\n        return duration.hours + ':' + duration.minutes + ':' + duration.seconds;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day + \" %H:00:00\");\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.children('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorInput, 'click', function (ev) {\n            ev.stopPropagation();\n        });\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'input', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        var val = this.$input.val();\n\n        // If empty, set the preview to transparent\n        if (!val.length || val === '#') {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Make sure the value starts with a #\n        if (val[0] !== '#') {\n            val = '#' + val;\n            this.$input.val(val);\n        }\n\n        this.$colorPreview.css('background-color', val);\n\n        if (this.$colorInput) {\n            this.$colorInput.val(val);\n        }\n    }\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function() {\n        if (Craft.ColorInput._browserSupportsColorInputs === null) {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend({\n    elementIndex: null,\n    $elementIndexSourcesContainer: null,\n\n    $sidebar: null,\n    $sourcesContainer: null,\n    $sourceSettingsContainer: null,\n    $newHeadingBtn: null,\n    $footer: null,\n    $footerBtnContainer: null,\n    $saveBtn: null,\n    $cancelBtn: null,\n    $saveSpinner: null,\n    $loadingSpinner: null,\n\n    sourceSort: null,\n    sources: null,\n    selectedSource: null,\n    updateSourcesOnSave: false,\n\n    availableTableAttributes: null,\n\n    init: function(elementIndex, settings) {\n        this.base();\n\n        this.setSettings(settings, {\n            resizable: true\n        });\n\n        this.elementIndex = elementIndex;\n        this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n        var $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n        this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n        this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n        this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n        this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n        this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n        this.$newHeadingBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit add icon',\n            text: Craft.t('app', 'New heading'),\n        }).appendTo($('<div class=\"buttons left secondary-buttons\"/>').appendTo(this.$footer));\n\n        this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n        this.setContainer($container);\n        this.show();\n\n        var data = {\n            elementType: this.elementIndex.elementType\n        };\n\n        Craft.postActionRequest('element-index-settings/get-customize-sources-modal-data', data, $.proxy(function(response, textStatus) {\n            this.$loadingSpinner.remove();\n\n            if (textStatus === 'success') {\n                this.$saveBtn.removeClass('disabled');\n                this.buildModal(response);\n            }\n        }, this));\n\n        this.addListener(this.$newHeadingBtn, 'click', 'handleNewHeadingBtnClick');\n        this.addListener(this.$cancelBtn, 'click', 'hide');\n        this.addListener(this.$saveBtn, 'click', 'save');\n        this.addListener(this.$container, 'submit', 'save');\n    },\n\n    buildModal: function(response) {\n        // Store the available table attribute options\n        this.availableTableAttributes = response.availableTableAttributes;\n\n        // Create the source item sorter\n        this.sourceSort = new Garnish.DragSort({\n            handle: '.move',\n            axis: 'y',\n            onSortChange: $.proxy(function() {\n                this.updateSourcesOnSave = true;\n            }, this)\n        });\n\n        // Create the sources\n        this.sources = [];\n\n        for (var i = 0; i < response.sources.length; i++) {\n            var source = this.addSource(response.sources[i]);\n            this.sources.push(source);\n        }\n\n        if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n            this.sources[0].select();\n        }\n    },\n\n    addSource: function(sourceData) {\n        var $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n        var $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n        var $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n        $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n        var source;\n\n        // Is this a heading?\n        if (typeof sourceData.heading !== 'undefined') {\n            $item.addClass('heading');\n            $itemInput.attr('name', 'sourceOrder[][heading]');\n            source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.heading);\n        } else {\n            $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n            source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.label);\n\n            // Select this by default?\n            if ((this.elementIndex.sourceKey + '/').substr(0, sourceData.key.length + 1) === sourceData.key + '/') {\n                source.select();\n            }\n        }\n\n        this.sourceSort.addItems($item);\n\n        return source;\n    },\n\n    handleNewHeadingBtnClick: function() {\n        var source = this.addSource({\n            heading: ''\n        });\n\n        Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n\n        source.select();\n        this.updateSourcesOnSave = true;\n    },\n\n    save: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n            return;\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n        var data = this.$container.serialize() + '&elementType=' + this.elementIndex.elementType;\n\n        Craft.postActionRequest('element-index-settings/save-customize-sources-modal-settings', data, $.proxy(function(response, textStatus) {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success' && response.success) {\n                // Have any changes been made to the source list?\n                if (this.updateSourcesOnSave) {\n                    if (this.$elementIndexSourcesContainer.length) {\n                        var $lastSource = null,\n                            $pendingHeading;\n\n                        for (var i = 0; i < this.sourceSort.$items.length; i++) {\n                            var $item = this.sourceSort.$items.eq(i),\n                                source = $item.data('source'),\n                                $indexSource = source.getIndexSource();\n\n                            if (!$indexSource) {\n                                continue;\n                            }\n\n                            if (source.isHeading()) {\n                                $pendingHeading = $indexSource;\n                            } else {\n                                if ($pendingHeading) {\n                                    this.appendSource($pendingHeading, $lastSource);\n                                    $lastSource = $pendingHeading;\n                                    $pendingHeading = null;\n                                }\n\n                                this.appendSource($indexSource, $lastSource);\n                                $lastSource = $indexSource;\n                            }\n                        }\n\n                        // Remove any additional sources (most likely just old headings)\n                        if ($lastSource) {\n                            var $extraSources = $lastSource.nextAll();\n                            this.elementIndex.sourceSelect.removeItems($extraSources);\n                            $extraSources.remove();\n                        }\n                    }\n                }\n\n                // If a source is selected, have the element index select that one by default on the next request\n                if (this.selectedSource && this.selectedSource.sourceData.key) {\n                    this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                    this.elementIndex.updateElements();\n                }\n\n                Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n                this.hide();\n            } else {\n                var error = (textStatus === 'success' && response.error ? response.error : Craft.t('app', 'A server error occurred.'));\n                Craft.cp.displayError(error);\n            }\n        }, this));\n    },\n\n    appendSource: function($source, $lastSource) {\n        if (!$lastSource) {\n            $source.prependTo(this.$elementIndexSourcesContainer);\n        } else {\n            $source.insertAfter($lastSource);\n        }\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.sources.length; i++) {\n            this.sources[i].destroy();\n        }\n\n        delete this.sources;\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend({\n    modal: null,\n\n    $item: null,\n    $itemLabel: null,\n    $itemInput: null,\n    $settingsContainer: null,\n\n    sourceData: null,\n\n    init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n        this.modal = modal;\n        this.$item = $item;\n        this.$itemLabel = $itemLabel;\n        this.$itemInput = $itemInput;\n        this.sourceData = sourceData;\n\n        this.$item.data('source', this);\n\n        this.addListener(this.$item, 'click', 'select');\n    },\n\n    isHeading: function() {\n        return false;\n    },\n\n    isSelected: function() {\n        return (this.modal.selectedSource === this);\n    },\n\n    select: function() {\n        if (this.isSelected()) {\n            return;\n        }\n\n        if (this.modal.selectedSource) {\n            this.modal.selectedSource.deselect();\n        }\n\n        this.$item.addClass('sel');\n        this.modal.selectedSource = this;\n\n        if (!this.$settingsContainer) {\n            this.$settingsContainer = this.createSettings()\n                .appendTo(this.modal.$sourceSettingsContainer);\n        } else {\n            this.$settingsContainer.removeClass('hidden');\n        }\n\n        this.modal.$sourceSettingsContainer.scrollTop(0);\n    },\n\n    createSettings: function() {\n        return $('<div/>');\n    },\n\n    getIndexSource: function() {\n    },\n\n    deselect: function() {\n        this.$item.removeClass('sel');\n        this.modal.selectedSource = null;\n        this.$settingsContainer.addClass('hidden');\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.text(val);\n    },\n\n    destroy: function() {\n        this.$item.data('source', null);\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend({\n    createSettings: function() {\n        let $settings = $('<div/>').append(Craft.ui.createTextField({\n            label: Craft.t('app', 'Header Column Heading'),\n            id: 'defaultHeaderColHeading' + Math.floor(Math.random() * 100000),\n            name: `sources[${this.sourceData.key}][headerColHeading]`,\n            value: this.sourceData.headerColHeading,\n            placeholder: this.sourceData.defaultHeaderColHeading,\n        }));\n\n        if (this.sourceData.tableAttributes.length) {\n            $settings.append(this.createTableColumnsField());\n        }\n\n        return $settings;\n    },\n\n    createTableColumnsField: function() {\n        // Create the title column option\n        let [firstKey, firstLabel] = this.sourceData.tableAttributes[0];\n        let $titleColumnCheckbox = this.createTableColumnOption(firstKey, firstLabel, true, true);\n\n        // Create the rest of the options\n        let $columnCheckboxes = $('<div/>');\n        let selectedAttributes = [firstKey];\n\n        $('<input type=\"hidden\" name=\"sources[' + this.sourceData.key + '][tableAttributes][]\" value=\"\"/>').appendTo($columnCheckboxes);\n\n        // Add the selected columns, in the selected order\n        for (let i = 1; i < this.sourceData.tableAttributes.length; i++) {\n            let [key, label] = this.sourceData.tableAttributes[i];\n            $columnCheckboxes.append(this.createTableColumnOption(key, label, false, true));\n            selectedAttributes.push(key);\n        }\n\n        // Add the rest\n        let availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n        availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n        for (let i = 0; i < availableTableAttributes.length; i++) {\n            let [key, label] = availableTableAttributes[i];\n            if (!Craft.inArray(key, selectedAttributes)) {\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false, false));\n            }\n        }\n\n        new Garnish.DragSort($columnCheckboxes.children(), {\n            handle: '.move',\n            axis: 'y'\n        });\n\n        return Craft.ui.createField($([$titleColumnCheckbox[0], $columnCheckboxes[0]]), {\n            label: Craft.t('app', 'Table Columns'),\n            instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n        });\n    },\n\n    createTableColumnOption: function(key, label, first, checked) {\n        var $option = $('<div class=\"customize-sources-table-column\"/>')\n            .append('<div class=\"icon move\"/>')\n            .append(\n                Craft.ui.createCheckbox({\n                    label: Craft.escapeHtml(label),\n                    name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                    value: key,\n                    checked: checked,\n                    disabled: first\n                })\n            );\n\n        if (first) {\n            $option.children('.move').addClass('disabled');\n        }\n\n        return $option;\n    },\n\n    getIndexSource: function() {\n        var $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n        if ($source) {\n            return $source.closest('li');\n        }\n    }\n});\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend({\n    $labelField: null,\n    $labelInput: null,\n    $deleteBtn: null,\n\n    isHeading: function() {\n        return true;\n    },\n\n    select: function() {\n        this.base();\n        this.$labelInput.trigger('focus');\n    },\n\n    createSettings: function() {\n        let $settings = $('<div/>');\n\n        this.$labelField = Craft.ui.createTextField({\n            label: Craft.t('app', 'Heading'),\n            instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n            value: this.sourceData.heading\n        }).appendTo($settings);\n\n        this.$labelInput = this.$labelField.find('.text');\n\n        $settings.append('<hr/>');\n\n        this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n            .appendTo($settings);\n\n        this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n        this.addListener(this.$deleteBtn, 'click', 'deleteHeading');\n\n        return $settings;\n    },\n\n    handleLabelInputChange: function() {\n        this.updateItemLabel(this.$labelInput.val());\n        this.modal.updateSourcesOnSave = true;\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n        this.$itemInput.val(val);\n    },\n\n    deleteHeading: function() {\n        this.modal.sourceSort.removeItems(this.$item);\n        this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n        this.modal.updateSourcesOnSave = true;\n\n        if (this.isSelected()) {\n            this.deselect();\n\n            if (this.modal.sources.length) {\n                this.modal.sources[0].select();\n            }\n        }\n\n        this.$item.remove();\n        this.$settingsContainer.remove();\n        this.destroy();\n    },\n\n    getIndexSource: function() {\n        var label = (this.$labelInput ? this.$labelInput.val() : this.sourceData.heading);\n        return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend({\n    $table: null,\n\n    init: function(table, settings) {\n        this.$table = $(table);\n        var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n        settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n        settings.container = this.$table.children('tbody');\n        settings.helper = $.proxy(this, 'getHelper');\n        settings.caboose = '<tr/>';\n        settings.axis = Garnish.Y_AXIS;\n        settings.magnetStrength = 4;\n        settings.helperLagBase = 1.5;\n\n        this.base($rows, settings);\n    },\n\n    getHelper: function($helperRow) {\n        var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n            $table = $('<table/>').appendTo($helper),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the table width and classes\n        $table.width(this.$table.width());\n        $table.prop('className', this.$table.prop('className'));\n\n        // Copy the column widths\n        var $firstRow = this.$table.find('tr:first'),\n            $cells = $firstRow.children(),\n            $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            $($helperCells[i]).width($($cells[i]).width());\n        }\n\n        return $helper;\n    }\n}, {\n    defaults: {\n        handle: '.move',\n        helperClass: 'datatablesorthelper'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend({\n    id: null,\n    userId: null,\n\n    $deleteActionRadios: null,\n    $deleteSpinner: null,\n\n    userSelect: null,\n    _deleting: false,\n\n    init: function(userId, settings) {\n        this.id = Math.floor(Math.random() * 1000000000);\n        this.userId = userId;\n        settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n        let $form = $(\n            '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n            Craft.getCsrfInput() +\n            '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n            (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n            (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n            '</form>'\n        ).appendTo(Garnish.$bod);\n        let $body = $(\n            '<div class=\"body\">' +\n            '<div class=\"content-summary\">' +\n            '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n            '<ul class=\"bullets\"></ul>' +\n            '</div>' +\n            '<div class=\"options\">' +\n            '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n            '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n            '<div class=\"elements\"></div>' +\n            '<button type=\"button\" class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</button>' +\n            '</div>' +\n            '</div>' +\n            '<div>' +\n            '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete their content') + '</label>' +\n            '</div>' +\n            '</div>'\n        ).appendTo($form);\n        let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo($buttons);\n\n        if (settings.contentSummary.length) {\n            for (let i = 0; i < settings.contentSummary.length; i++) {\n                $body.find('ul').append($('<li/>', {text: settings.contentSummary[i]}));\n            }\n        } else {\n            $body.find('ul').remove();\n        }\n\n        this.$deleteActionRadios = $body.find('input[type=radio]');\n        this.$deleteSubmitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: this._submitBtnLabel(false),\n        }).appendTo($buttons);\n        this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n        var idParam;\n\n        if (Garnish.isArray(this.userId)) {\n            idParam = ['and'];\n\n            for (let i = 0; i < this.userId.length; i++) {\n                idParam.push('not ' + this.userId[i]);\n            }\n        } else {\n            idParam = 'not ' + this.userId;\n        }\n\n        this.userSelect = new Craft.BaseElementSelectInput({\n            id: 'transferselect' + this.id,\n            name: 'transferContentTo',\n            elementType: 'craft\\\\elements\\\\User',\n            criteria: {\n                id: idParam\n            },\n            limit: 1,\n            modalSettings: {\n                closeOtherModals: false\n            },\n            onSelectElements: $.proxy(function() {\n                this.updateSizeAndPosition();\n\n                if (!this.$deleteActionRadios.first().prop('checked')) {\n                    this.$deleteActionRadios.first().trigger('click');\n                } else {\n                    this.validateDeleteInputs();\n                }\n            }, this),\n            onRemoveElements: $.proxy(this, 'validateDeleteInputs'),\n            selectable: false,\n            editable: false\n        });\n\n        this.addListener($cancelBtn, 'click', 'hide');\n\n        this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n        this.addListener($form, 'submit', 'handleSubmit');\n\n        this.base($form, settings);\n    },\n\n    _submitBtnLabel: function(withContent) {\n        let message = withContent\n            ? 'Delete {num, plural, =1{user} other{users}} and content'\n            : 'Delete {num, plural, =1{user} other{users}}';\n\n        return Craft.t('app', message, {\n            num: Garnish.isArray(this.userId) ? this.userId.length : 1,\n        });\n    },\n\n    validateDeleteInputs: function() {\n        var validates = false;\n\n        if (this.$deleteActionRadios.eq(1).prop('checked')) {\n            validates = true;\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(true));\n        } else {\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(false));\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n        }\n\n        this.updateSizeAndPosition();\n\n        if (validates) {\n            this.$deleteSubmitBtn.removeClass('disabled');\n        } else {\n            this.$deleteSubmitBtn.addClass('disabled');\n        }\n\n        return validates;\n    },\n\n    handleSubmit: function(ev) {\n        if (this._deleting || !this.validateDeleteInputs()) {\n            ev.preventDefault();\n            return;\n        }\n\n        this.$deleteSubmitBtn.addClass('active');\n        this.$deleteSpinner.removeClass('hidden');\n        this.disable();\n        this.userSelect.disable();\n        this._deleting = true;\n\n        // Let the onSubmit callback prevent the form from getting submitted\n        try {\n            if (this.settings.onSubmit() === false) {\n                ev.preventDefault();\n            }\n        } catch (e) {\n            ev.preventDefault();\n            this.$deleteSpinner.addClass('hidden');\n            throw e;\n        }\n    },\n\n    onFadeIn: function() {\n        // Auto-focus the first radio\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$deleteActionRadios.first().trigger('focus');\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        contentSummary: [],\n        onSubmit: $.noop,\n        redirect: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Monitor\n */\nCraft.DraftEditor = Garnish.Base.extend({\n    $revisionBtn: null,\n    $revisionLabel: null,\n    $spinner: null,\n    $expandSiteStatusesBtn: null,\n    $statusIcon: null,\n\n    $editMetaBtn: null,\n    metaHud: null,\n    $nameTextInput: null,\n    $saveMetaBtn: null,\n\n    $siteStatusPane: null,\n    $globalLightswitch: null,\n    $siteLightswitches: null,\n    $addlSiteField: null,\n\n    siteIds: null,\n    newSiteIds: null,\n\n    enableAutosave: null,\n    lastSerializedValue: null,\n    listeningForChanges: false,\n    pauseLevel: 0,\n    timeout: null,\n    saving: false,\n    saveXhr: null,\n    queue: null,\n    submittingForm: false,\n\n    duplicatedElements: null,\n    errors: null,\n\n    openingPreview: false,\n    preview: null,\n    previewToken: null,\n    createdDraftInPreview: false,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.DraftEditor.defaults);\n\n        this.queue = [];\n        this.duplicatedElements = {};\n        this.enableAutosave = Craft.autosaveDrafts;\n\n        this.siteIds = Object.keys(this.settings.siteStatuses).map(siteId => {\n            return parseInt(siteId)\n        });\n\n        this.$revisionBtn = $('#context-btn');\n        this.$revisionLabel = $('#revision-label');\n        this.$spinner = $('#revision-spinner');\n        this.$expandSiteStatusesBtn = $('#expand-status-btn');\n        this.$statusIcon = $('#revision-status');\n\n        if (this.settings.canEditMultipleSites) {\n            this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n        }\n\n        if (this.settings.previewTargets.length) {\n            if (this.settings.enablePreview) {\n                this.addListener($('#preview-btn'), 'click', 'openPreview');\n            }\n\n            const $shareBtn = $('#share-btn');\n\n            if (this.settings.previewTargets.length === 1) {\n                this.addListener($shareBtn, 'click', function() {\n                    this.openShareLink(this.settings.previewTargets[0].url);\n                });\n            } else {\n                this.createShareMenu($shareBtn);\n            }\n        }\n\n        // If this is a revision, we're done here\n        if (this.settings.revisionId) {\n            return;\n        }\n\n        // Override the serializer to use our own\n        Craft.cp.$primaryForm.data('serializer', function() {\n            return this.serializeForm(true)\n        }.bind(this));\n\n        this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n        if (this.settings.draftId) {\n            this.initForDraft();\n        } else {\n            // If the \"Create a draft\" button is a secondary button, then add special handling for it\n            this.addListener($('#save-draft-btn'), 'click', function(ev) {\n                ev.preventDefault();\n                this.createDraft();\n                this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n            }.bind(this));\n\n            // If they're not allowed to update the source element, override the save shortcut to create a draft too\n            if (!this.settings.canUpdateSource) {\n                this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', function(ev) {\n                    if (ev.saveShortcut) {\n                        ev.preventDefault();\n                        this.createDraft();\n                        this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                    }\n                }.bind(this));\n            }\n        }\n    },\n\n    listenForChanges: function() {\n        if (this.listeningForChanges || this.pauseLevel > 0 || !this.enableAutosave) {\n            return;\n        }\n\n        this.listeningForChanges = true;\n\n        this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n            if ($(ev.target).is(this.statusIcons())) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            // If they are typing, wait half a second before checking the form\n            if (['keypress', 'keyup', 'change'].includes(ev.type)) {\n                this.timeout = setTimeout(this.checkForm.bind(this), 500);\n            } else {\n                this.checkForm();\n            }\n        });\n    },\n\n    stopListeningForChanges: function() {\n        if (!this.listeningForChanges) {\n            return;\n        }\n\n        this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n        clearTimeout(this.timeout);\n        this.listeningForChanges = false;\n    },\n\n    pause: function() {\n        this.pauseLevel++;\n        this.stopListeningForChanges();\n    },\n\n    resume: function() {\n        if (this.pauseLevel === 0) {\n            throw 'Craft.DraftEditor::resume() should only be called after pause().';\n        }\n\n        // Only actually resume operation if this has been called the same\n        // number of times that pause() was called\n        this.pauseLevel--;\n        if (this.pauseLevel === 0) {\n            if (this.enableAutosave) {\n                this.checkForm();\n            }\n            this.listenForChanges();\n        }\n    },\n\n    initForDraft: function() {\n        // Create the edit draft button\n        this.createEditMetaBtn();\n\n        this.addListener(this.$statusIcon, 'click', function() {\n            this.showStatusHud(this.$statusIcon);\n        }.bind(this));\n\n        this.addListener($('#merge-changes-btn'), 'click', this.mergeChanges);\n\n        if (Craft.autosaveDrafts) {\n            this.listenForChanges();\n        }\n\n        if (this.settings.canUpdateSource) {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n                alt: true\n            }, () => {\n                Craft.submitForm(Craft.cp.$primaryForm, {\n                    action: this.settings.publishDraftAction,\n                    redirect: this.settings.hashedCpEditUrl,\n                });\n            }, 0);\n        }\n    },\n\n    mergeChanges: function() {\n        // Make sure there aren't any unsaved changes\n        this.checkForm();\n\n        // Make sure we aren't currently saving something\n        if (this.saving) {\n            this.queue.push(this.mergeChanges.bind(this));\n            return;\n        }\n\n        this.saving = true;\n        $('#merge-changes-spinner').removeClass('hidden');\n\n        Craft.postActionRequest('drafts/merge-source-changes', {\n            elementType: this.settings.elementType,\n            draftId: this.settings.draftId,\n            siteId: this.settings.siteId,\n        }, function(response, textStatus) {\n            if (textStatus === 'success') {\n                window.location.reload();\n            } else {\n                $('#merge-changes-spinner').addClass('hidden');\n            }\n        });\n    },\n\n    expandSiteStatuses: function() {\n        this.removeListener(this.$expandSiteStatusesBtn, 'click');\n        this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', function() {\n            this.$expandSiteStatusesBtn.remove();\n        }.bind(this));\n\n        const $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n        this.$siteStatusPane = $enabledForSiteField.parent();\n\n        // If this is a revision, just show the site statuses statically and be done\n        if (this.settings.revisionId) {\n            this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n            return;\n        }\n\n        $enabledForSiteField.addClass('nested');\n        const $globalField = Craft.ui.createLightswitchField({\n            id: 'enabled',\n            label: Craft.t('app', 'Enabled'),\n            name: 'enabled',\n        }).insertBefore($enabledForSiteField);\n        $globalField.find('label').css('font-weight', 'bold');\n        this.$globalLightswitch = $globalField.find('.lightswitch');\n\n        if (!this.settings.revisionId) {\n            this._showField($globalField);\n        }\n\n        // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n        const originalEnabledValue = (this.settings.enabled && !Craft.inArray(false, this.settings.siteStatuses))\n            ? '1'\n            : (this.settings.enabledForSite ? '-' : '');\n        const originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n            '=' + (this.settings.enabledForSite ? '1' : '');\n\n        this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n            .on('change', this._updateGlobalStatus.bind(this));\n\n        this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n\n        let serializedStatuses = `enabled=${originalEnabledValue}`;\n        for (let i = 0; i < this.$siteLightswitches.length; i++) {\n            const $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n            serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n        }\n\n        Craft.cp.$primaryForm.data('initialSerializedValue',\n            Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n        // Are there additional sites that can be added?\n        if (this.settings.addlSiteIds && this.settings.addlSiteIds.length) {\n            this._createAddlSiteField();\n        }\n\n        this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n        this._updateGlobalStatus();\n    },\n\n    /**\n     * @returns {Array}\n     */\n    _getOtherSupportedSites: function() {\n        return Craft.sites.filter(s => s.id != this.settings.siteId && this.siteIds.includes(s.id));\n    },\n\n    _showField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .height(0)\n            .velocity({height: height}, 'fast', () => {\n                $field.css({\n                    overflow: '',\n                    height: '',\n                });\n            });\n    },\n\n    _removeField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .velocity({height: 0}, 'fast', () => {\n                $field.remove();\n            });\n    },\n\n    _updateGlobalStatus: function() {\n        let allEnabled = true, allDisabled = true;\n        this.$siteLightswitches.each(function() {\n            const enabled = $(this).data('lightswitch').on;\n            if (enabled) {\n                allDisabled = false;\n            } else {\n                allEnabled = false;\n            }\n            if (!allEnabled && !allDisabled) {\n                return false;\n            }\n        });\n        if (allEnabled) {\n            this.$globalLightswitch.data('lightswitch').turnOn(true);\n        } else if (allDisabled) {\n            this.$globalLightswitch.data('lightswitch').turnOff(true);\n        } else {\n            this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n        }\n    },\n\n    _updateSiteStatuses: function() {\n        const enabled = this.$globalLightswitch.data('lightswitch').on;\n        this.$siteLightswitches.each(function() {\n            if (enabled) {\n                $(this).data('lightswitch').turnOn(true);\n            } else {\n                $(this).data('lightswitch').turnOff(true);\n            }\n        });\n    },\n\n    _createSiteStatusField: function(site) {\n        const $field = Craft.ui.createLightswitchField({\n            id: `enabledForSite-${site.id}`,\n            label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n            name: `enabledForSite[${site.id}]`,\n            on: this.settings.siteStatuses.hasOwnProperty(site.id)\n                ? this.settings.siteStatuses[site.id]\n                : true,\n            disabled: !!this.settings.revisionId,\n        });\n\n        if (this.$addlSiteField) {\n            $field.insertBefore(this.$addlSiteField);\n        } else {\n            $field.appendTo(this.$siteStatusPane);\n        }\n\n        if (!this.settings.revisionId) {\n            $field.addClass('nested');\n            const $lightswitch = $field.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n        }\n\n        this._showField($field);\n\n        return $field;\n    },\n\n    _createAddlSiteField: function() {\n        const addlSites = Craft.sites.filter(s => {\n            return !this.siteIds.includes(s.id) && this.settings.addlSiteIds.includes(s.id);\n        });\n\n        if (!addlSites.length) {\n            return;\n        }\n\n        const $addlSiteSelectContainer = Craft.ui.createSelect({\n            options: [\n                {label: Craft.t('app', 'Add a site…')},\n                ...addlSites.map(s => {\n                    return {label: s.name, value: s.id};\n                }),\n            ],\n        }).addClass('fullwidth');\n\n        this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n            .addClass('nested add')\n            .appendTo(this.$siteStatusPane);\n\n        const $addlSiteSelect = $addlSiteSelectContainer.find('select');\n\n        $addlSiteSelect.on('change', () => {\n            const siteId = parseInt($addlSiteSelect.val());\n            const site = Craft.sites.find(s => s.id === siteId);\n\n            if (!site) {\n                return;\n            }\n\n            this._createSiteStatusField(site);\n\n            $addlSiteSelect\n                .val('')\n                .find(`option[value=\"${siteId}\"]`).remove();\n\n            if (this.newSiteIds === null) {\n                this.newSiteIds = [];\n            }\n\n            this.siteIds.push(siteId);\n            this.newSiteIds.push(siteId);\n\n            // Was that the last site?\n            if ($addlSiteSelect.find('option').length === 1) {\n                this._removeField(this.$addlSiteField);\n            }\n        });\n\n        this._showField(this.$addlSiteField);\n    },\n\n    showStatusHud: function(target) {\n        let bodyHtml;\n\n        if (this.errors === null) {\n            bodyHtml = '<p>' + Craft.t('app', 'The draft has been saved.') + '</p>';\n        } else {\n            bodyHtml = '<p class=\"error\">' + Craft.t('app', 'The draft could not be saved.') + '</p>';\n\n            if (this.errors.length) {\n                bodyHtml += '<ul class=\"errors\">' +\n                    this.errors.map(e => `<li>${Craft.escapeHtml(e)}</li>`).join('') +\n                    '</ul>';\n            }\n        }\n\n        const hud = new Garnish.HUD(target, bodyHtml, {\n            onHide: function() {\n                hud.destroy();\n            }\n        });\n    },\n\n    spinners: function() {\n        return this.preview\n            ? this.$spinner.add(this.preview.$spinner)\n            : this.$spinner;\n    },\n\n    statusIcons: function() {\n        return this.preview\n            ? this.$statusIcon.add(this.preview.$statusIcon)\n            : this.$statusIcon;\n    },\n\n    createEditMetaBtn: function() {\n        this.$editMetaBtn = $('<button/>', {\n            type: 'button',\n            'class': 'btn edit icon',\n            title: Craft.t('app', 'Edit draft settings'),\n        }).appendTo($('#context-btngroup'));\n        this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n    },\n\n    createShareMenu: function($shareBtn) {\n        $shareBtn.addClass('menubtn');\n\n        const $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n        const $ul = $('<ul/>').appendTo($menu);\n\n        this.settings.previewTargets.forEach(target => {\n            const $li = $('<li/>').appendTo($ul);\n            const $a = $('<a/>', {\n                text: target.label,\n            }).appendTo($li);\n            this.addListener($a, 'click', () => {\n                this.openShareLink(target.url);\n            });\n        });\n    },\n\n    getPreviewToken: function() {\n        return new Promise(function(resolve, reject) {\n            if (this.previewToken) {\n                resolve(this.previewToken);\n                return;\n            }\n\n            Craft.postActionRequest('preview/create-token', {\n                elementType: this.settings.elementType,\n                sourceId: this.settings.sourceId,\n                siteId: this.settings.siteId,\n                draftId: this.settings.draftId,\n                revisionId: this.settings.revisionId,\n            }, function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.previewToken = response.token;\n                    resolve(this.previewToken);\n                } else {\n                    reject();\n                }\n            }.bind(this));\n        }.bind(this));\n    },\n\n    getTokenizedPreviewUrl: function(url, randoParam) {\n        return new Promise(function(resolve, reject) {\n            const params = {};\n\n            if (randoParam || !this.settings.isLive) {\n                // Randomize the URL so CDNs don't return cached pages\n                params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n            }\n\n            if (this.settings.siteToken) {\n                params[Craft.siteToken] = this.settings.siteToken;\n            }\n\n            // No need for a token if we're looking at a live element\n            if (this.settings.isLive) {\n                resolve(Craft.getUrl(url, params));\n                return;\n            }\n\n            this.getPreviewToken().then(function(token) {\n                params[Craft.tokenParam] = token;\n                resolve(Craft.getUrl(url, params));\n            }).catch(reject);\n        }.bind(this));\n    },\n\n    openShareLink: function(url) {\n        this.getTokenizedPreviewUrl(url).then(function(url) {\n            window.open(url);\n        });\n    },\n\n    getPreview: function() {\n        if (!this.preview) {\n            this.preview = new Craft.Preview(this);\n            this.preview.on('open', function() {\n                if (!this.settings.draftId || !Craft.autosaveDrafts) {\n                    if (!Craft.autosaveDrafts) {\n                        this.enableAutosave = true;\n                    }\n                    this.listenForChanges();\n                }\n            }.bind(this));\n            this.preview.on('close', function() {\n                if (!this.settings.draftId || !Craft.autosaveDrafts) {\n                    if (!Craft.autosaveDrafts) {\n                        this.enableAutosave = false;\n                        const $statusIcons = this.statusIcons();\n                        if ($statusIcons.hasClass('checkmark-icon')) {\n                            $statusIcons.addClass('hidden');\n                        }\n                    }\n                    this.stopListeningForChanges();\n                }\n\n                // did we just create a draft?\n                if (this.createdDraftInPreview) {\n                    setTimeout(() => {\n                        this.createDraftNoticeHud();\n                        this.createdDraftInPreview = false;\n                    }, 750);\n                }\n            }.bind(this));\n        }\n        return this.preview;\n    },\n\n    createDraftNoticeHud: function() {\n        const $closeBtn = $('<button/>', {\n            class: 'btn',\n            type: 'button',\n            text: Craft.t('app', 'Keep it'),\n        });\n        const $deleteBtn = $('<button/>', {\n            class: 'btn caution',\n            type: 'button',\n            text: Craft.t('app', 'Delete it'),\n        });\n\n        const hud = new Garnish.HUD(\n            $('#context-btngroup'),\n            $('<div/>', {class: 'readable centeralign'})\n                .append(\n                    $('<p/>', {\n                        text: Craft.t('app', 'You’re now editing a draft.'),\n                    })\n                )\n                .append(\n                    $('<div/>', {class: 'flex flex-nowrap'})\n                        .append($closeBtn)\n                        .append($deleteBtn)\n                ),\n            {\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n            }\n        );\n\n        $closeBtn.on('click', () => {\n            hud.hide();\n            hud.destroy();\n        });\n\n        $deleteBtn.on('click', () => {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this draft?'))) {\n                Craft.submitForm(Craft.cp.$primaryForm, {\n                    action: this.settings.deleteDraftAction,\n                    redirect: this.settings.hashedCpEditUrl,\n                });\n            }\n        })\n    },\n\n    openPreview: function() {\n        return new Promise(function(resolve, reject) {\n            this.openingPreview = true;\n            this.ensureIsDraftOrRevision(true)\n                .then(function() {\n                    this.getPreview().open();\n                    this.openingPreview = false;\n                    resolve();\n                }.bind(this))\n                .catch(reject);\n        }.bind(this))\n    },\n\n    ensureIsDraftOrRevision: function(onlyIfChanged) {\n        return new Promise(function(resolve, reject) {\n            if (!this.settings.draftId && !this.settings.revisionId) {\n                if (\n                    onlyIfChanged &&\n                    this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                ) {\n                    resolve();\n                    return;\n                }\n\n                this.createDraft()\n                    .then(resolve)\n                    .catch(reject);\n            } else {\n                resolve();\n            }\n        }.bind(this));\n    },\n\n    serializeForm: function(removeActionParams) {\n        let data = Craft.cp.$primaryForm.serialize();\n\n        if (this.isPreviewActive()) {\n            // Replace the temp input with the preview form data\n            data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n        }\n\n        if (removeActionParams && !this.settings.isUnpublishedDraft) {\n            // Remove action and redirect params\n            data = data.replace(/&action=[^&]*/, '');\n            data = data.replace(/&redirect=[^&]*/, '');\n        }\n\n        return data;\n    },\n\n    checkForm: function(force) {\n        // If this isn't a draft and there's no active preview, then there's nothing to check\n        if (\n            this.settings.revisionId ||\n            (!this.settings.draftId && !this.isPreviewActive()) ||\n            this.pauseLevel > 0\n        ) {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.timeout = null;\n\n        // Has anything changed?\n        const data = this.serializeForm(true);\n        if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n            this.saveDraft(data);\n        }\n    },\n\n    isPreviewActive: function() {\n        return this.preview && this.preview.isActive;\n    },\n\n    createDraft: function() {\n        return new Promise(function(resolve, reject) {\n            this.saveDraft(this.serializeForm(true))\n                .then(resolve)\n                .catch(reject);\n        }.bind(this));\n    },\n\n    saveDraft: function(data) {\n        return new Promise(function(resolve, reject) {\n            // Ignore if we're already submitting the main form\n            if (this.submittingForm) {\n                reject();\n                return;\n            }\n\n            if (this.saving) {\n                this.queue.push(function() {\n                    this.checkForm()\n                }.bind(this));\n                return;\n            }\n\n            this.lastSerializedValue = data;\n            this.saving = true;\n            const $spinners = this.spinners().removeClass('hidden');\n            const $statusIcons = this.statusIcons()\n                .velocity('stop')\n                .css('opacity', '')\n                .removeClass('invisible checkmark-icon alert-icon fade-out')\n                .addClass('hidden');\n            if (this.$saveMetaBtn) {\n                this.$saveMetaBtn.addClass('active');\n            }\n            this.errors = null;\n\n            const url = Craft.getActionUrl(this.settings.saveDraftAction);\n\n            this.saveXhr = Craft.postActionRequest(url, this.prepareData(data), function(response, textStatus) {\n                $spinners.addClass('hidden');\n                if (this.$saveMetaBtn) {\n                    this.$saveMetaBtn.removeClass('active');\n                }\n                this.saving = false;\n\n                if (textStatus === 'abort') {\n                    return;\n                }\n\n                if (textStatus !== 'success' || response.errors) {\n                    this.errors = (response ? response.errors : null) || [];\n                    $statusIcons\n                        .velocity('stop')\n                        .css('opacity', '')\n                        .removeClass('hidden checkmark-icon')\n                        .addClass('alert-icon')\n                        .attr('title', Craft.t('app', 'The draft could not be saved.'));\n                    reject();\n                    return;\n                }\n\n                if (response.title) {\n                    $('#header h1').text(response.title);\n                }\n\n                if (response.docTitle) {\n                    document.title = response.docTitle;\n                }\n\n                this.$revisionLabel.text(response.draftName);\n\n                this.settings.draftName = response.draftName;\n\n                let revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                // Did we just add a site?\n                if (this.newSiteIds) {\n                    // Do we need to create the revision menu?\n                    if (!revisionMenu) {\n                        this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                        new Garnish.MenuBtn(this.$revisionBtn);\n                        revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                        revisionMenu.$container.removeClass('hidden');\n                    }\n                    this.newSiteIds.forEach(siteId => {\n                        const $option = revisionMenu.$options.filter(`[data-site-id=${siteId}]`);\n                        $option.find('.status').removeClass('disabled').addClass('enabled');\n                        const $li = $option.parent().removeClass('hidden');\n                        $li.closest('.site-group').removeClass('hidden');\n                    });\n                    revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                    this.newSiteIds = null;\n                }\n\n                // Did we just create a draft?\n                const draftCreated = !this.settings.draftId;\n                if (draftCreated) {\n                    // Update the document location HREF\n                    let newHref;\n                    const anchorPos = document.location.href.search('#');\n                    if (anchorPos !== -1) {\n                        newHref = document.location.href.substr(0, anchorPos);\n                    } else {\n                        newHref = document.location.href;\n                    }\n                    newHref += (newHref.match(/\\?/) ? '&' : '?') + 'draftId=' + response.draftId;\n                    if (anchorPos !== -1) {\n                        newHref += document.location.href.substr(anchorPos);\n                    }\n                    history.replaceState({}, '', newHref);\n\n                    // Replace the action input\n                    $('#action').remove();\n                    $('<input/>', {\n                        id: 'action',\n                        type: 'hidden',\n                        name: 'action',\n                        value: this.settings.saveDraftAction,\n                    }).appendTo(Craft.cp.$primaryForm);\n\n                    // Remove the \"Create a draft\" and \"Save\" buttons\n                    $('#save-draft-btn-container').remove();\n                    $('#save-btn-container').remove();\n\n                    const $actionButtonContainer = $('#action-buttons');\n\n                    // If they're allowed to update the source, add a \"Publish draft\" button\n                    if (this.settings.canUpdateSource) {\n                        $('<button/>', {\n                            type: 'button',\n                            class: 'btn secondary formsubmit',\n                            text: Craft.t('app', 'Publish draft'),\n                            title: Craft.shortcutText('S', false, true),\n                            data: {\n                                action: this.settings.publishDraftAction,\n                                redirect: this.settings.hashedCpEditUrl,\n                            },\n                        }).appendTo($actionButtonContainer).formsubmit();\n                    }\n\n                    // Add a \"Save draft\" button\n                    const $saveBtnContainer = $('<div/>', {\n                        id: 'save-btn-container',\n                        class: 'btngroup submit',\n                    }).appendTo($actionButtonContainer);\n\n                    $('<button/>', {\n                        type: 'submit',\n                        class: 'btn submit',\n                        text: Craft.t('app', 'Save draft'),\n                    }).appendTo($saveBtnContainer);\n\n                    if (this.settings.saveDraftAction || this.settings.deleteDraftAction) {\n                        const $menuBtn = $('<button/>', {\n                            type: 'button',\n                            class: 'btn submit menubtn',\n                        }).appendTo($saveBtnContainer);\n                        const $menu = $('<div/>', {\n                            class: 'menu',\n                            attr: {\n                                'data-align': 'right',\n                            },\n                        }).appendTo($saveBtnContainer);\n\n                        if (this.settings.saveDraftAction) {\n                            const $ul = $('<ul/>')\n                                .appendTo($menu)\n                                .append(\n                                    $('<li/>')\n                                        .append(\n                                            $('<a/>', {\n                                                class: 'formsubmit',\n                                                data: {\n                                                    action: this.settings.saveDraftAction,\n                                                },\n                                                text: Craft.t('app', 'Save and continue editing'),\n                                            })\n                                                .prepend(\n                                                    $('<span/>', {\n                                                        class: 'shortcut',\n                                                        text: Craft.shortcutText('S'),\n                                                    })\n                                                )\n                                        )\n                                );\n                            if (this.settings.canUpdateSource && this.settings.hashedAddAnotherRedirectUrl) {\n                                $ul.append(\n                                    $('<li/>')\n                                        .append(\n                                            $('<a/>', {\n                                                class: 'formsubmit',\n                                                data: {\n                                                    action: this.settings.publishDraftAction,\n                                                    redirect: this.settings.hashedAddAnotherRedirectUrl,\n                                                },\n                                                text: Craft.t('app', 'Publish and add another'),\n                                            })\n                                        )\n                                );\n                            }\n                            if (this.settings.deleteDraftAction) {\n                                $('<hr/>').appendTo($menu);\n                            }\n                        }\n\n                        if (this.settings.deleteDraftAction) {\n                            $('<ul/>')\n                                .appendTo($menu)\n                                .append(\n                                    $('<li/>')\n                                        .append(\n                                            $('<a/>', {\n                                                class: 'formsubmit error',\n                                                data: {\n                                                    action: this.settings.deleteDraftAction,\n                                                    redirect: this.settings.hashedCpEditUrl,\n                                                    confirm: Craft.t('app', 'Are you sure you want to delete this draft?'),\n                                                },\n                                                text: Craft.t('app', 'Delete draft'),\n                                            })\n                                        )\n                                )\n                        }\n                    }\n\n                    Craft.initUiElements($saveBtnContainer);\n\n                    // Update the editor settings\n                    this.settings.draftId = response.draftId;\n                    this.settings.isLive = false;\n                    this.previewToken = null;\n                    this.initForDraft();\n\n                    // Add the draft to the revision menu\n                    if (revisionMenu) {\n                        revisionMenu.$options.filter(':not(.site-option)').removeClass('sel');\n                        let $draftsUl = revisionMenu.$container.find('.revision-group-drafts');\n                        if (!$draftsUl.length) {\n                            const $draftHeading = $('<h6/>', {\n                                text: Craft.t('app', 'Drafts'),\n                            }).insertAfter(revisionMenu.$container.find('.revision-group-current'));\n                            $draftsUl = $('<ul/>', {\n                                'class': 'padded revision-group-drafts',\n                            }).insertAfter($draftHeading);\n                        }\n                        const $draftLi = $('<li/>').prependTo($draftsUl);\n                        const $draftA = $('<a/>', {\n                            'class': 'sel',\n                            html: '<span class=\"draft-name\"></span> <span class=\"draft-meta light\"></span>',\n                        }).appendTo($draftLi);\n                        revisionMenu.addOptions($draftA);\n                        revisionMenu.selectOption($draftA);\n\n                        // Update the site URLs\n                        const $siteOptions = revisionMenu.$options.filter('.site-option[href]');\n                        for (let i = 0; i < $siteOptions.length; i++) {\n                            const $siteOption = $siteOptions.eq(i);\n                            $siteOption.attr('href', Craft.getUrl($siteOption.attr('href'), {draftId: response.draftId}));\n                        }\n                    }\n\n                    // is Live Preview currently active?\n                    if (this.openingPreview || (this.preview && this.preview.isActive)) {\n                        this.createdDraftInPreview = true;\n                    }\n                }\n\n                if (revisionMenu) {\n                    revisionMenu.$options.filter('.sel').find('.draft-name').text(response.draftName);\n                    revisionMenu.$options.filter('.sel').find('.draft-meta').text('– ' + (response.creator\n                            ? Craft.t('app', 'saved {timestamp} by {creator}', {\n                                timestamp: response.timestamp,\n                                creator: response.creator\n                            })\n                            : Craft.t('app', 'updated {timestamp}', {\n                                timestamp: response.timestamp,\n                            })\n                    ));\n                }\n\n                // Did the controller send us updated preview targets?\n                if (\n                    response.previewTargets &&\n                    JSON.stringify(response.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                ) {\n                    this.updatePreviewTargets(response.previewTargets);\n                }\n\n                this.afterUpdate(data);\n\n                if (draftCreated) {\n                    this.trigger('createDraft');\n                }\n\n                if (this.$nameTextInput) {\n                    this.checkMetaValues();\n                }\n\n                for (const oldId in response.duplicatedElements) {\n                    if (oldId != this.settings.sourceId && response.duplicatedElements.hasOwnProperty(oldId)) {\n                        this.duplicatedElements[oldId] = response.duplicatedElements[oldId];\n                    }\n                }\n\n                resolve();\n            }.bind(this));\n        }.bind(this));\n    },\n\n    prepareData: function(data) {\n        // Swap out element IDs with their duplicated ones\n        data = this.swapDuplicatedElementIds(data);\n\n        // Add the draft info\n        if (this.settings.draftId) {\n            data += `&draftId=${this.settings.draftId}`;\n        }\n\n        if (this.settings.draftName !== null) {\n            data += `&draftName=${this.settings.draftName}`;\n        }\n\n        // Filter out anything that hasn't changed\n        const initialData = this.swapDuplicatedElementIds(Craft.cp.$primaryForm.data('initialSerializedValue'));\n        return Craft.findDeltaData(initialData, data, this.getDeltaNames());\n    },\n\n    swapDuplicatedElementIds: function(data) {\n        const idsRE = Object.keys(this.duplicatedElements).join('|');\n        if (idsRE === '') {\n            return data;\n        }\n        const lb = encodeURIComponent('[');\n        const rb = encodeURIComponent(']');\n        // Keep replacing field IDs until data stops changing\n        while (true) {\n            if (data === (\n                data = data\n                    // &fields[...][X]\n                    .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                        return pre + this.duplicatedElements[id] + post;\n                    })\n                    // &fields[...=X\n                    .replace(new RegExp(`(&fields${lb}[^=]+=)(${idsRE})\\\\b`, 'g'), (m, pre, id) => {\n                        return pre + this.duplicatedElements[id];\n                    })\n            )) {\n                break;\n            }\n        }\n        return data;\n    },\n\n    getDeltaNames: function() {\n        const deltaNames = Craft.deltaNames.slice(0);\n        for (let i = 0; i < deltaNames.length; i++) {\n            for (const oldId in this.duplicatedElements) {\n                if (this.duplicatedElements.hasOwnProperty(oldId)) {\n                    deltaNames[i] = deltaNames[i].replace('][' + oldId + ']', '][' + this.duplicatedElements[oldId] + ']');\n                }\n            }\n        }\n        return deltaNames;\n    },\n\n    updatePreviewTargets: function(previewTargets) {\n        previewTargets.forEach(newTarget => {\n            const currentTarget = this.settings.previewTargets.find(t => t.label === newTarget.label);\n            if (currentTarget) {\n                currentTarget.url = newTarget.url;\n            }\n        });\n    },\n\n    afterUpdate: function(data) {\n        Craft.cp.$primaryForm.data('initialSerializedValue', data);\n        Craft.initialDeltaValues = {};\n        const $statusIcons = this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden')\n            .addClass('checkmark-icon')\n            .attr('title', Craft.t('app', 'The draft has been saved.'));\n\n        if (!this.enableAutosave) {\n            // Fade the icon out after a couple seconds, since it won't be accurate as content continues to change\n            $statusIcons\n                .velocity('stop')\n                .velocity({\n                    opacity: 0,\n                }, {\n                    delay: 2000,\n                    complete: () => {\n                        $statusIcons.addClass('hidden');\n                    },\n                });\n        }\n\n        this.trigger('update');\n\n        this.nextInQueue();\n    },\n\n    nextInQueue: function() {\n        if (this.queue.length) {\n            this.queue.shift()();\n        }\n    },\n\n    showMetaHud: function() {\n        if (!this.metaHud) {\n            this.createMetaHud();\n            this.onMetaHudShow();\n        } else {\n            this.metaHud.show();\n        }\n\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$nameTextInput.trigger('focus');\n        }\n    },\n\n    createMetaHud: function() {\n        const $hudBody = $('<div/>');\n\n        // Add the Name field\n        const $nameField = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n        const $nameInputContainer = $('<div class=\"input\"/>').appendTo($nameField);\n        this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($nameInputContainer).val(this.settings.draftName);\n\n        // HUD footer\n        const $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n        $('<div class=\"flex-grow\"></div>').appendTo($footer);\n        this.$saveMetaBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo($footer);\n\n        this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n            onSubmit: this.saveMeta.bind(this)\n        });\n\n        this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n\n        this.metaHud.on('show', this.onMetaHudShow.bind(this));\n        this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n        this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n    },\n\n    onMetaHudShow: function() {\n        this.$editMetaBtn.addClass('active');\n    },\n\n    onMetaHudHide: function() {\n        this.$editMetaBtn.removeClass('active');\n    },\n\n    onMetaHudEscape: function() {\n        this.$nameTextInput.val(this.settings.draftName);\n    },\n\n    checkMetaValues: function() {\n        if (\n            this.$nameTextInput.val() &&\n            this.$nameTextInput.val() !== this.settings.draftName\n        ) {\n            this.$saveMetaBtn.removeClass('disabled');\n            return true;\n        }\n\n        this.$saveMetaBtn.addClass('disabled');\n        return false;\n    },\n\n    shakeMetaHud: function() {\n        Garnish.shake(this.metaHud.$hud);\n    },\n\n    saveMeta: function() {\n        if (!this.checkMetaValues()) {\n            this.shakeMetaHud();\n            return;\n        }\n\n        this.settings.draftName = this.$nameTextInput.val();\n\n        this.metaHud.hide();\n        this.checkForm(true);\n    },\n\n    handleFormSubmit: function(ev) {\n        ev.preventDefault();\n\n        // Prevent double form submits\n        if (this.submittingForm) {\n            return;\n        }\n\n        // If this a draft and was this a normal save (either via submit button or save shortcut),\n        // then trigger an autosave\n        if (\n            this.settings.draftId &&\n            (typeof ev.autosave === 'undefined' || ev.autosave) &&\n            (ev.saveShortcut || (ev.customTrigger && ev.customTrigger.data('action') === this.settings.saveDraftAction))\n        ) {\n            this.checkForm(true);\n            return;\n        }\n\n        // Prevent the normal unload confirmation dialog\n        Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n        // Abort the current save request if there is one\n        if (this.saving) {\n            this.saveXhr.abort();\n        }\n\n        // Duplicate the form with normalized data\n        const data = this.prepareData(this.serializeForm(false));\n        const $form = Craft.createForm(data);\n\n        $form.appendTo(Garnish.$bod);\n        $form.submit();\n        this.submittingForm = true;\n    },\n}, {\n    defaults: {\n        elementType: null,\n        sourceId: null,\n        siteId: null,\n        isUnpublishedDraft: false,\n        enabled: false,\n        enabledForSite: false,\n        isLive: false,\n        siteStatuses: null,\n        addlSiteIds: [],\n        cpEditUrl: null,\n        draftId: null,\n        revisionId: null,\n        draftName: null,\n        canEditMultipleSites: false,\n        canUpdateSource: false,\n        saveDraftAction: null,\n        deleteDraftAction: null,\n        publishDraftAction: null,\n        hashedCpEditUrl: null,\n        hashedAddAnotherRedirectUrl: null,\n        enablePreview: false,\n        previewTargets: [],\n        siteToken: null,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend({\n    callback: $.noop,\n\n    init: function(source, target, callback) {\n        this.callback = callback;\n        this.base(source, target);\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return this.callback(sourceVal);\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend({\n    initialized: false,\n\n    id: null,\n    baseName: null,\n    columns: null,\n    sorter: null,\n    biggestId: -1,\n\n    $table: null,\n    $tbody: null,\n    $addRowBtn: null,\n\n    rowCount: 0,\n    hasMaxRows: false,\n    hasMinRows: false,\n\n    radioCheckboxes: null,\n\n    init: function(id, baseName, columns, settings) {\n        this.id = id;\n        this.baseName = baseName;\n        this.columns = columns;\n        this.setSettings(settings, Craft.EditableTable.defaults);\n        this.radioCheckboxes = {};\n\n        this.$table = $('#' + id);\n        this.$tbody = this.$table.children('tbody');\n        this.rowCount = this.$tbody.find('tr').length;\n\n        // Is this already an editable table?\n        if (this.$table.data('editable-table')) {\n            Garnish.log('Double-instantiating an editable table on an element');\n            this.$table.data('editable-table').destroy();\n        }\n\n        this.$table.data('editable-table', this);\n\n        this.sorter = new Craft.DataTableSorter(this.$table, {\n            helperClass: 'editabletablesorthelper',\n            copyDraggeeInputValuesToHelper: true\n        });\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            // Give everything a chance to initialize\n            setTimeout($.proxy(this, 'initializeIfVisible'), 500);\n        }\n\n        if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n            for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                this.addRow()\n            }\n        }\n    },\n\n    isVisible: function() {\n        return (this.$table.parent().height() > 0);\n    },\n\n    initialize: function() {\n        if (this.initialized) {\n            return false;\n        }\n\n        this.initialized = true;\n        this.removeListener(Garnish.$win, 'resize');\n\n        var $rows = this.$tbody.children();\n\n        for (var i = 0; i < $rows.length; i++) {\n            this.createRowObj($rows[i]);\n        }\n\n        this.$addRowBtn = this.$table.next('.add');\n        this.updateAddRowButton();\n        this.addListener(this.$addRowBtn, 'activate', 'addRow');\n        return true;\n    },\n    initializeIfVisible: function() {\n        this.removeListener(Garnish.$win, 'resize');\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n        }\n    },\n    updateAddRowButton: function() {\n        if (!this.canAddRow()) {\n            this.$addRowBtn.css('opacity', '0.2');\n            this.$addRowBtn.css('pointer-events', 'none');\n        } else {\n            this.$addRowBtn.css('opacity', '1');\n            this.$addRowBtn.css('pointer-events', 'auto');\n        }\n    },\n    canDeleteRow: function() {\n        return (this.rowCount > this.settings.minRows);\n    },\n    deleteRow: function(row) {\n        if (!this.canDeleteRow()) {\n            return;\n        }\n\n        this.sorter.removeItems(row.$tr);\n        row.$tr.remove();\n\n        this.rowCount--;\n\n        this.updateAddRowButton();\n        if (this.rowCount === 0) {\n            this.$table.addClass('hidden');\n        }\n\n        // onDeleteRow callback\n        this.settings.onDeleteRow(row.$tr);\n\n        row.destroy();\n    },\n    canAddRow: function() {\n        if (this.settings.staticRows) {\n            return false;\n        }\n\n        if (this.settings.maxRows) {\n            return (this.rowCount < this.settings.maxRows);\n        }\n\n        return true;\n    },\n    addRow: function(focus, prepend) {\n        if (!this.canAddRow()) {\n            return;\n        }\n\n        var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n            $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n        if (prepend) {\n            $tr.prependTo(this.$tbody);\n        } else {\n            $tr.appendTo(this.$tbody);\n        }\n\n        var row = this.createRowObj($tr);\n        this.sorter.addItems($tr);\n\n        // Focus the first input in the row\n        if (focus !== false) {\n            $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n        }\n\n        this.rowCount++;\n        this.updateAddRowButton();\n        this.$table.removeClass('hidden');\n\n        // onAddRow callback\n        this.settings.onAddRow($tr);\n\n        return row;\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n    },\n\n    createRowObj: function($tr) {\n        return new Craft.EditableTable.Row(this, $tr);\n    },\n\n    focusOnPrevRow: function($tr, tdIndex, blurTd) {\n        var $prevTr = $tr.prev('tr');\n        var prevRow;\n\n        if ($prevTr.length) {\n            prevRow = $prevTr.data('editable-table-row');\n        } else {\n            prevRow = this.addRow(false, true);\n        }\n\n        // Focus on the same cell in the previous row\n        if (!prevRow) {\n            return;\n        }\n\n        if (!prevRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($prevTr) {\n                this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    focusOnNextRow: function($tr, tdIndex, blurTd) {\n        var $nextTr = $tr.next('tr');\n        var nextRow;\n\n        if ($nextTr.length) {\n            nextRow = $nextTr.data('editable-table-row');\n        } else {\n            nextRow = this.addRow(false);\n        }\n\n        // Focus on the same cell in the next row\n        if (!nextRow) {\n            return;\n        }\n\n        if (!nextRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($nextTr) {\n                this.focusOnNextRow($nextTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    importData: function(data, row, tdIndex) {\n        let lines = data.split(/\\r?\\n|\\r/);\n        for (let i = 0; i < lines.length; i++) {\n            let values = lines[i].split(\"\\t\");\n            for (let j = 0; j < values.length; j++) {\n                let value = values[j];\n                row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                    .val(value)\n                    .trigger('input');\n            }\n\n            // move onto the next row\n            let $nextTr = row.$tr.next('tr');\n            if ($nextTr.length) {\n                row = $nextTr.data('editable-table-row');\n            } else {\n                row = this.addRow(false);\n            }\n        }\n    },\n}, {\n    textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n    defaults: {\n        rowIdPrefix: '',\n        defaultValues: {},\n        staticRows: false,\n        minRows: null,\n        maxRows: null,\n        onAddRow: $.noop,\n        onDeleteRow: $.noop\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        var $tr = $('<tr/>', {\n            'data-id': rowId\n        });\n\n        for (var colId in columns) {\n            if (!columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            var col = columns[colId],\n                value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                $cell;\n\n            if (col.type === 'heading') {\n                $cell = $('<th/>', {\n                    'scope': 'row',\n                    'class': col['class'],\n                    'html': value\n                });\n            } else {\n                var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                $cell = $('<td/>', {\n                    'class': `${col.class} ${col.type}-cell`,\n                    'width': col.width\n                });\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $cell.addClass('textual');\n                }\n\n                if (col.code) {\n                    $cell.addClass('code');\n                }\n\n                switch (col.type) {\n                    case 'checkbox':\n                        $('<div class=\"checkbox-wrapper\"/>')\n                            .append(Craft.ui.createCheckbox({\n                                    name: name,\n                                    value: col.value || '1',\n                                    checked: !!value\n                                })\n                            )\n                            .appendTo($cell);\n                        break;\n\n                    case 'color':\n                        Craft.ui.createColorInput({\n                            name: name,\n                            value: value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'date':\n                        Craft.ui.createDateInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'lightswitch':\n                        Craft.ui.createLightswitch({\n                            name: name,\n                            value: col.value || '1',\n                            on: !!value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'select':\n                        Craft.ui.createSelect({\n                            name: name,\n                            options: col.options,\n                            value: value || (function() {\n                                for (var key in col.options) {\n                                    if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                        return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                    }\n                                }\n                                return null;\n                            })(),\n                            'class': 'small'\n                        }).appendTo($cell);\n                        break;\n\n                    case 'time':\n                        Craft.ui.createTimeInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'email':\n                    case 'url':\n                        Craft.ui.createTextInput({\n                            name: name,\n                            value: value,\n                            type: col.type,\n                            placeholder: col.placeholder || null,\n                        }).appendTo($cell);\n                        break;\n\n                    default:\n                        $('<textarea/>', {\n                            'name': name,\n                            'rows': col.rows || 1,\n                            'val': value,\n                            'placeholder': col.placeholder\n                        }).appendTo($cell);\n                }\n            }\n\n            $cell.appendTo($tr);\n        }\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'move icon',\n                'title': Craft.t('app', 'Reorder')\n            })\n        ).appendTo($tr);\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Delete')\n            })\n        ).appendTo($tr);\n\n        return $tr;\n    }\n});\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend({\n    table: null,\n    id: null,\n    niceTexts: null,\n\n    $tr: null,\n    $tds: null,\n    tds: null,\n    $textareas: null,\n    $deleteBtn: null,\n\n    init: function(table, tr) {\n        this.table = table;\n        this.$tr = $(tr);\n        this.$tds = this.$tr.children();\n        this.tds = [];\n        this.id = this.$tr.attr('data-id');\n\n        this.$tr.data('editable-table-row', this);\n\n        // Get the row ID, sans prefix\n        var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n        if (id > this.table.biggestId) {\n            this.table.biggestId = id;\n        }\n\n        this.$textareas = $();\n        this.niceTexts = [];\n        var textareasByColId = {};\n\n        var i = 0;\n        var colId, col, td, $textarea, $checkbox;\n\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n            td = this.tds[colId] = this.$tds[i];\n\n            if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                $textarea = $('textarea', td);\n                this.$textareas = this.$textareas.add($textarea);\n\n                this.addListener($textarea, 'focus', 'onTextareaFocus');\n                this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                this.niceTexts.push(new Garnish.NiceText($textarea, {\n                    onHeightChange: $.proxy(this, 'onTextareaHeightChange')\n                }));\n\n                this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                $textarea.trigger('input');\n\n                if (col.type !== 'multiline') {\n                    this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                }\n\n                textareasByColId[colId] = $textarea;\n            } else if (col.type === 'checkbox') {\n                $checkbox = $('input[type=\"checkbox\"]', td);\n\n                if (col.radioMode) {\n                    if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                        this.table.radioCheckboxes[colId] = [];\n                    }\n                    this.table.radioCheckboxes[colId].push($checkbox[0]);\n                    this.addListener($checkbox, 'change', {colId: colId}, 'onRadioCheckboxChange');\n                }\n\n                if (col.toggle) {\n                    this.addListener($checkbox, 'change', {colId: colId}, function(ev) {\n                        this.applyToggleCheckbox(ev.data.colId);\n                    });\n                }\n            }\n\n            if (!$(td).hasClass('disabled')) {\n                this.addListener(td, 'click', {td: td}, function(ev) {\n                    if (ev.target === ev.data.td) {\n                        $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                    }\n                });\n            }\n\n            i++;\n        }\n\n        // Now that all of the text cells have been nice-ified, let's normalize the heights\n        this.onTextareaHeightChange();\n\n        // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n            col = this.table.columns[colId];\n            if (col.type === 'checkbox' && col.toggle) {\n                this.applyToggleCheckbox(colId);\n            }\n        }\n\n        // Now look for any autopopulate columns\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n\n            if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                    allowNonAlphaStart: true\n                });\n            }\n        }\n\n        var $deleteBtn = this.$tr.children().last().find('.delete');\n        this.addListener($deleteBtn, 'click', 'deleteRow');\n\n        var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n        this.addListener($inputs, 'focus', function(ev) {\n            $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n        });\n        this.addListener($inputs, 'blur', function(ev) {\n            $(ev.currentTarget).closest('td').removeClass('focus');\n        });\n    },\n\n    onTextareaFocus: function(ev) {\n        this.onTextareaHeightChange();\n\n        var $textarea = $(ev.currentTarget);\n\n        if ($textarea.data('ignoreNextFocus')) {\n            $textarea.data('ignoreNextFocus', false);\n            return;\n        }\n\n        setTimeout(function() {\n            Craft.selectFullValue($textarea);\n        }, 0);\n    },\n\n    onRadioCheckboxChange: function(ev) {\n        if (ev.currentTarget.checked) {\n            for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                checkbox.checked = (checkbox === ev.currentTarget);\n            }\n        }\n    },\n\n    applyToggleCheckbox: function(checkboxColId) {\n        var checkboxCol = this.table.columns[checkboxColId];\n        var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n        var colId, colIndex, neg;\n        for (var i = 0; i < checkboxCol.toggle.length; i++) {\n            colId = checkboxCol.toggle[i];\n            colIndex = this.table.colum;\n            neg = colId[0] === '!';\n            if (neg) {\n                colId = colId.substr(1);\n            }\n            if ((checked && !neg) || (!checked && neg)) {\n                $(this.tds[colId])\n                    .removeClass('disabled')\n                    .find('textarea, input').prop('disabled', false);\n            } else {\n                $(this.tds[colId])\n                    .addClass('disabled')\n                    .find('textarea, input').prop('disabled', true);\n            }\n        }\n    },\n\n    ignoreNextTextareaFocus: function(ev) {\n        $.data(ev.currentTarget, 'ignoreNextFocus', true);\n    },\n\n    handleKeypress: function(ev) {\n        var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n        var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n        // Going to the next/previous row?\n        if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n            ev.preventDefault();\n            if (ev.shiftKey) {\n                this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            } else {\n                this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            }\n            return;\n        }\n\n        // Was this an invalid number character?\n        if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n            ev.preventDefault();\n        }\n    },\n\n    handlePaste: function(ev) {\n        let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n        if (!data.match(/[\\t\\r\\n]/)) {\n            return;\n        }\n        ev.preventDefault();\n        this.table.importData(data, this, ev.data.tdIndex);\n    },\n\n    validateValue: function(ev) {\n        if (ev.data.type === 'multiline') {\n            return;\n        }\n\n        var safeValue;\n\n        if (ev.data.type === 'number') {\n            // Only grab the number at the beginning of the value (if any)\n            var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n            if (match !== null) {\n                safeValue = match[1];\n            } else {\n                safeValue = '';\n            }\n        } else {\n            // Just strip any newlines\n            safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n        }\n\n        if (safeValue !== ev.currentTarget.value) {\n            ev.currentTarget.value = safeValue;\n        }\n    },\n\n    onTextareaHeightChange: function() {\n        // Keep all the textareas' heights in sync\n        var tallestTextareaHeight = -1;\n\n        for (var i = 0; i < this.niceTexts.length; i++) {\n            if (this.niceTexts[i].height > tallestTextareaHeight) {\n                tallestTextareaHeight = this.niceTexts[i].height;\n            }\n        }\n\n        this.$textareas.css('min-height', tallestTextareaHeight);\n\n        // If the <td> is still taller, go with that instead\n        var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n        if (tdHeight > tallestTextareaHeight) {\n            this.$textareas.css('min-height', tdHeight);\n        }\n    },\n\n    deleteRow: function() {\n        this.table.deleteRow(this);\n    }\n}, {\n    numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend({\n    maxLevels: null,\n    newChildUrl: null,\n    $trigger: null,\n    $selectedItems: null,\n    triggerEnabled: true,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n        this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n        // Do we have a custom handler?\n        if (this.settings.activate) {\n            // Prevent the element index's click handler\n            this.$trigger.data('custom-handler', true);\n\n            // Is this a custom trigger?\n            if (this.$trigger.prop('nodeName') === 'FORM') {\n                this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n            } else {\n                this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n            }\n        }\n\n        this.updateTrigger();\n        Craft.elementIndex.on('selectionChange', $.proxy(this, 'updateTrigger'));\n    },\n\n    updateTrigger: function() {\n        // Ignore if the last element was just unselected\n        if (Craft.elementIndex.getSelectedElements().length === 0) {\n            return;\n        }\n\n        if (this.validateSelection()) {\n            this.enableTrigger();\n        } else {\n            this.disableTrigger();\n        }\n    },\n\n    /**\n     * Determines if this action can be performed on the currently selected elements.\n     *\n     * @return boolean\n     */\n    validateSelection: function() {\n        var valid = true;\n        this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n        if (!this.settings.batch && this.$selectedItems.length > 1) {\n            valid = false;\n        } else if (typeof this.settings.validateSelection === 'function') {\n            valid = this.settings.validateSelection(this.$selectedItems);\n        }\n\n        return valid;\n    },\n\n    enableTrigger: function() {\n        if (this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.removeClass('disabled');\n        this.triggerEnabled = true;\n    },\n\n    disableTrigger: function() {\n        if (!this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.addClass('disabled');\n        this.triggerEnabled = false;\n    },\n\n    handleTriggerActivation: function(ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        if (this.triggerEnabled) {\n            this.settings.activate(this.$selectedItems);\n        }\n    }\n}, {\n    defaults: {\n        type: null,\n        batch: true,\n        validateSelection: null,\n        activate: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend({\n    queue: null,\n    workers: [],\n\n    init: function() {\n        this.queue = [];\n\n        for (var i = 0; i < 3; i++) {\n            this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n        }\n    },\n\n    load: function($elements) {\n        // Only immediately load the visible images\n        let $thumbs = $elements.find('.elementthumb');\n        for (let i = 0; i < $thumbs.length; i++) {\n            let $thumb = $thumbs.eq(i);\n            let $scrollParent = $thumb.scrollParent();\n            if (this.isVisible($thumb, $scrollParent)) {\n                this.addToQueue($thumb[0]);\n            } else {\n                let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                $scrollParent.on(`scroll.${key}`, {\n                    $thumb: $thumb,\n                    $scrollParent: $scrollParent,\n                    key: key,\n                }, (ev) => {\n                    if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                        delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                        $scrollParent.off(`scroll.${ev.data.key}`);\n                        this.addToQueue(ev.data.$thumb[0]);\n                    }\n                });\n            }\n        }\n    },\n\n    addToQueue: function(thumb) {\n        this.queue.push(thumb);\n\n        // See if there are any inactive workers\n        for (var i = 0; i < this.workers.length; i++) {\n            if (!this.workers[i].active) {\n                this.workers[i].loadNext();\n            }\n        }\n    },\n\n    isVisible: function($thumb, $scrollParent) {\n        let thumbOffset = $thumb.offset().top;\n        let scrollParentOffset, scrollParentHeight;\n        if ($scrollParent[0] === document) {\n            scrollParentOffset = $scrollParent.scrollTop();\n            scrollParentHeight = Garnish.$win.height();\n        } else {\n            scrollParentOffset = $scrollParent.offset().top;\n            scrollParentHeight = $scrollParent.height();\n        }\n        return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.workers.length; i++) {\n            this.workers[i].destroy();\n        }\n\n        this.base();\n    }\n}, {\n    invisibleThumbs: {},\n    retryAll: function() {\n        for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n            let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n            delete Craft.ElementThumbLoader.invisibleThumbs[key];\n            $scrollParent.off(`scroll.${key}`);\n            queue.load($thumb.parent());\n        }\n    }\n});\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend({\n    loader: null,\n    active: false,\n\n    init: function(loader) {\n        this.loader = loader;\n    },\n\n    loadNext: function() {\n        var container = this.loader.queue.shift();\n        if (typeof container === 'undefined') {\n            this.active = false;\n            return;\n        }\n\n        this.active = true;\n        var $container = $(container);\n        if ($container.find('img').length) {\n            this.loadNext();\n            return;\n        }\n        var $img = $('<img/>', {\n            sizes: $container.attr('data-sizes'),\n            srcset: $container.attr('data-srcset'),\n            alt: ''\n        });\n        this.addListener($img, 'load,error', 'loadNext');\n        $img.appendTo($container);\n        picturefill({\n            elements: [$img[0]]\n        });\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend({\n    $form: null,\n    inputs: null,\n\n    init: function(form, inputs) {\n        this.$form = $(form);\n\n        // Only check specific inputs?\n        if (typeof inputs !== 'undefined') {\n            this.inputs = [];\n            inputs = $.makeArray(inputs);\n\n            for (var i = 0; i < inputs.length; i++) {\n                var $inputs = $(inputs[i]);\n\n                for (var j = 0; j < $inputs.length; j++) {\n                    var $input = $inputs.eq(j);\n\n                    this.inputs.push({\n                        input: $input,\n                        val: Garnish.getInputPostVal($input)\n                    });\n                }\n            }\n        }\n\n        this.addListener(this.$form, 'submit', 'handleFormSubmit');\n    },\n\n    handleFormSubmit: function(ev) {\n        // Ignore if we're in the middle of getting the elevated session timeout\n        if (Craft.elevatedSessionManager.fetchingTimeout) {\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            return;\n        }\n\n        // Are we only interested in certain inputs?\n        if (this.inputs) {\n            var inputsChanged = false;\n            var $input;\n\n            for (var i = 0; i < this.inputs.length; i++) {\n                $input = this.inputs[i].input;\n                // Is this a password input?\n                if ($input.data('passwordInput')) {\n                    $input = $input.data('passwordInput').$currentInput;\n                }\n\n                // Has this input's value changed?\n                if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                    inputsChanged = true;\n                    break;\n                }\n            }\n\n            if (!inputsChanged) {\n                // No need to interrupt the submit\n                return;\n            }\n        }\n\n        // Prevent the form from submitting until the user has an elevated session\n        ev.preventDefault();\n        ev.stopImmediatePropagation();\n        Craft.elevatedSessionManager.requireElevatedSession($.proxy(this, 'submitForm'));\n    },\n\n    submitForm: function() {\n        // Don't let handleFormSubmit() interrupt this time\n        this.disable();\n        this.$form.trigger('submit');\n        this.enable();\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend({\n    fetchingTimeout: false,\n\n    passwordModal: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $submitBtn: null,\n    $errorPara: null,\n\n    callback: null,\n\n    /**\n     * Requires that the user has an elevated session.\n     *\n     * @param {function} callback The callback function that should be called once the user has an elevated session\n     */\n    requireElevatedSession: function(callback) {\n        this.callback = callback;\n\n        // Check the time remaining on the user's elevated session (if any)\n        this.fetchingTimeout = true;\n\n        Craft.postActionRequest('users/get-elevated-session-timeout', $.proxy(function(response, textStatus) {\n            this.fetchingTimeout = false;\n\n            if (textStatus === 'success') {\n                // Is there still enough time left or has it been disabled?\n                if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                    this.callback();\n                } else {\n                    // Show the password modal\n                    this.showPasswordModal();\n                }\n            }\n        }, this));\n    },\n\n    showPasswordModal: function() {\n        if (!this.passwordModal) {\n            var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<td/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$submitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Submit'),\n            }).appendTo($buttonContainer);\n            this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.passwordModal = new Garnish.Modal($passwordModal, {\n                closeOtherModals: false,\n                onFadeIn: $.proxy(function() {\n                    setTimeout($.proxy(this, 'focusPasswordInput'), 100);\n                }, this),\n                onFadeOut: $.proxy(function() {\n                    this.$passwordInput.val('');\n                }, this)\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $.proxy(function($newPasswordInput) {\n                    this.$passwordInput = $newPasswordInput;\n                }, this)\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($passwordModal, 'submit', 'submitPassword');\n        } else {\n            this.passwordModal.show();\n        }\n    },\n\n    focusPasswordInput: function() {\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$passwordInput.trigger('focus');\n        }\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$submitBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$submitBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    submitPassword: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (!this.validatePassword()) {\n            return;\n        }\n\n        this.$passwordSpinner.removeClass('hidden');\n        this.clearLoginError();\n\n        var data = {\n            currentPassword: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/start-elevated-session', data, $.proxy(function(response, textStatus) {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.passwordModal.hide();\n                    this.callback();\n                } else {\n                    this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                    Garnish.shake(this.passwordModal.$container);\n                    this.focusPasswordInput();\n                }\n            } else {\n                this.showPasswordError();\n            }\n        }, this));\n    },\n\n    showPasswordError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$errorPara.text(error);\n        this.passwordModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showPasswordError('');\n    }\n}, {\n    minSafeElevatedSessionTimeout: 5\n});\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend({\n    publishableSections: null,\n    $newEntryBtnGroup: null,\n    $newEntryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', $.proxy(this, 'updateButton'));\n        this.on('selectSite', $.proxy(this, 'updateButton'));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible sections the user has permission to create new entries in\n        this.publishableSections = [];\n\n        for (var i = 0; i < Craft.publishableSections.length; i++) {\n            var section = Craft.publishableSections[i];\n\n            if (this.getSourceByKey('section:' + section.uid)) {\n                this.publishableSections.push(section);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific section in the URL?\n        if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n            if (defaultSectionHandle === 'singles') {\n                return 'singles';\n            } else {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultSectionHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        var handle;\n\n        // Get the handle of the selected source\n        if (this.$source.data('key') === 'singles') {\n            handle = 'singles';\n        } else {\n            handle = this.$source.data('handle');\n        }\n\n        // Update the New Entry button\n        // ---------------------------------------------------------------------\n\n        var i, href, label;\n\n        if (this.publishableSections.length) {\n            // Remove the old button, if there is one\n            if (this.$newEntryBtnGroup) {\n                this.$newEntryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a section that they have permission to create entries in\n            var selectedSection;\n\n            if (handle) {\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    if (this.publishableSections[i].handle === handle) {\n                        selectedSection = this.publishableSections[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n            // Otherwise only show a menu button\n            if (selectedSection) {\n                href = this._getSectionTriggerHref(selectedSection);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + ' role=\"button\" tabindex=\"0\">' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                        this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.publishableSections.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newEntryBtnGroup);\n                }\n            } else {\n                this.$newEntryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New entry'),\n                }).appendTo(this.$newEntryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    var section = this.publishableSections[i];\n\n                    if (\n                        (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                        (this.settings.context !== 'index' && section !== selectedSection)\n                    ) {\n                        href = this._getSectionTriggerHref(section);\n                        label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', $.proxy(function(ev) {\n                        this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                    }, this));\n                }\n            }\n\n            this.addButton(this.$newEntryBtnGroup);\n        }\n\n        // Update the URL if we're on the Entries index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'entries';\n\n            if (handle) {\n                uri += '/' + handle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getSectionTriggerHref: function(section) {\n        if (this.settings.context === 'index') {\n            var uri = 'entries/' + section.handle + '/new';\n            let params = {};\n            if (this.siteId) {\n                for (var i = 0; i < Craft.sites.length; i++) {\n                    if (Craft.sites[i].id == this.siteId) {\n                        params.site = Craft.sites[i].handle;\n                    }\n                }\n            }\n            return 'href=\"' + Craft.getUrl(uri, params) + '\"';\n        } else {\n            return 'data-id=\"' + section.id + '\"';\n        }\n    },\n\n    _openCreateEntryModal: function(sectionId) {\n        if (this.$newEntryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the section\n        var section;\n\n        for (var i = 0; i < this.publishableSections.length; i++) {\n            if (this.publishableSections[i].id == sectionId) {\n                section = this.publishableSections[i];\n                break;\n            }\n        }\n\n        if (!section) {\n            return;\n        }\n\n        this.$newEntryBtn.addClass('inactive');\n        var newEntryBtnText = this.$newEntryBtn.text();\n        this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newEntryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                sectionId: sectionId,\n                typeId: section.entryTypes[0].id,\n                enabled: section.canPublish ? 1 : 0,\n            },\n            onBeginLoading: $.proxy(function() {\n                this.$newEntryBtn.addClass('loading');\n            }, this),\n            onEndLoading: $.proxy(function() {\n                this.$newEntryBtn.removeClass('loading');\n            }, this),\n            onHideHud: $.proxy(function() {\n                this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n            }, this),\n            onSaveElement: $.proxy(function(response) {\n                // Make sure the right section is selected\n                var sectionSourceKey = 'section:' + section.uid;\n\n                if (this.sourceKey !== sectionSourceKey) {\n                    this.selectSourceByKey(sectionSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            }, this)\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n","/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: $.proxy(this, 'onTabOptionSelect')\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const $labelSpan = $tab.find('.tabs .tab span');\n        const oldName = $labelSpan.text();\n        const newName = this.promptForTabName(oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    promptForTabName: function(oldName) {\n        return prompt(Craft.t('app', 'Give your tab a name.'), oldName);\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const name = this.promptForTabName();\n        if (!name) {\n            return;\n        }\n\n        const $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>${name}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onShow: (e) => {\n                // Hold off a sec until it's positioned...\n                Garnish.requestAnimationFrame(() => {\n                    // Focus on the first text input\n                    this.hud.$main.find('.text:first').trigger('focus');\n                });\n            },\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend({\n    $toggle: null,\n    targetPrefix: null,\n    targetSelector: null,\n    reverseTargetSelector: null,\n\n    _$target: null,\n    _$reverseTarget: null,\n    type: null,\n\n    init: function(toggle) {\n        this.$toggle = $(toggle);\n\n        // Is this already a field toggle?\n        if (this.$toggle.data('fieldtoggle')) {\n            Garnish.log('Double-instantiating a field toggle on an element');\n            this.$toggle.data('fieldtoggle').destroy();\n        }\n\n        this.$toggle.data('fieldtoggle', this);\n\n        this.type = this.getType();\n\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n        } else {\n            this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n            this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n        }\n\n        this.findTargets();\n\n        switch (this.type) {\n            case 'link':\n                this.addListener(this.$toggle, 'click', 'onToggleChange');\n                break;\n            case 'fieldset':\n                this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                break;\n            default:\n                this.addListener(this.$toggle, 'change', 'onToggleChange');\n                this.onToggleChange();\n        }\n    },\n\n    normalizeTargetSelector: function(selector) {\n        if (selector && !selector.match(/^[#\\.]/)) {\n            selector = '#' + selector;\n        }\n\n        return selector;\n    },\n\n    getType: function() {\n        let nodeName = this.$toggle.prop('nodeName');\n        if (\n            (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n            this.$toggle.attr('role') === 'checkbox' ||\n            this.$toggle.attr('role') === 'switch'\n        ) {\n            return 'checkbox';\n        }\n\n        switch (nodeName) {\n            case 'SELECT':\n                return 'select';\n            case 'A':\n                return 'link';\n            case 'FIELDSET':\n                return 'fieldset';\n        }\n\n        console.warn('Unexpected field toggle:', this.$toggle[0]);\n    },\n\n    findTargets: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            var toggleVal = this.getToggleVal();\n            this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n        } else {\n            if (this.targetSelector) {\n                this._$target = $(this.targetSelector);\n            }\n\n            if (this.reverseTargetSelector) {\n                this._$reverseTarget = $(this.reverseTargetSelector);\n            }\n        }\n    },\n\n    getToggleVal: function() {\n        if (this.type === 'checkbox') {\n            if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                return this.$toggle.prop('checked');\n            }\n            return this.$toggle.attr('aria-checked') === 'true';\n        }\n\n        let postVal;\n        if (this.type === 'fieldset') {\n            postVal = this.$toggle.find('input:checked:first').val();\n        } else {\n            postVal = Garnish.getInputPostVal(this.$toggle);\n        }\n\n        // Normalize the value\n        return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[^\\w]+/g, '-');\n    },\n\n    onToggleChange: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.hideTarget(this._$target);\n            this.findTargets();\n            this.showTarget(this._$target);\n        } else {\n            this.findTargets();\n\n            if (this.type === 'link') {\n                this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n            } else {\n                this.onToggleChange._show = !!this.getToggleVal();\n            }\n\n            if (this.onToggleChange._show) {\n                this.showTarget(this._$target);\n                this.hideTarget(this._$reverseTarget);\n            } else {\n                this.hideTarget(this._$target);\n                this.showTarget(this._$reverseTarget);\n            }\n\n            delete this.onToggleChange._show;\n        }\n    },\n\n    showTarget: function($target) {\n        if ($target && $target.length) {\n            this.showTarget._currentHeight = $target.height();\n\n            $target.removeClass('hidden');\n\n            if (this.type !== 'select' && this.type !== 'fieldset') {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('collapsed');\n                    this.$toggle.addClass('expanded');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.prop('nodeName') !== 'SPAN') {\n                            $t.height('auto');\n                            this.showTarget._targetHeight = $t.height();\n                            $t.css({\n                                height: this.showTarget._currentHeight,\n                                overflow: 'hidden'\n                            });\n\n                            $t.velocity('stop');\n\n                            $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                $t.css({\n                                    height: '',\n                                    overflow: ''\n                                });\n                            });\n                        }\n                    })($target.eq(i));\n                }\n\n                delete this.showTarget._targetHeight;\n            }\n\n            delete this.showTarget._currentHeight;\n\n            // Trigger a resize event in case there are any grids in the target that need to initialize\n            Garnish.$win.trigger('resize');\n        }\n    },\n\n    hideTarget: function($target) {\n        if ($target && $target.length) {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                $target.addClass('hidden');\n            } else {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('expanded');\n                    this.$toggle.addClass('collapsed');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.hasClass('hidden')) {\n                            return;\n                        }\n                        if ($t.prop('nodeName') === 'SPAN') {\n                            $t.addClass('hidden');\n                        } else {\n                            $t.css('overflow', 'hidden');\n                            $t.velocity('stop');\n                            $t.velocity({height: 0}, 'fast', function() {\n                                $t.addClass('hidden');\n                            });\n                        }\n                    })($target.eq(i));\n                }\n            }\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend({\n    $container: null,\n\n    $items: null,\n    items: null,\n    totalCols: null,\n    colGutterDrop: null,\n    colPctWidth: null,\n\n    possibleItemColspans: null,\n    possibleItemPositionsByColspan: null,\n\n    itemPositions: null,\n    itemColspansByPosition: null,\n\n    layouts: null,\n    layout: null,\n    itemHeights: null,\n    leftPadding: null,\n\n    _refreshingCols: false,\n    _refreshColsAfterRefresh: false,\n    _forceRefreshColsAfterRefresh: false,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n\n        // Is this already a grid?\n        if (this.$container.data('grid')) {\n            Garnish.log('Double-instantiating a grid on an element');\n            this.$container.data('grid').destroy();\n        }\n\n        this.$container.data('grid', this);\n\n        this.setSettings(settings, Craft.Grid.defaults);\n\n        // Set the refreshCols() proxy that container resizes will trigger\n        this.handleContainerHeightProxy = $.proxy(function() {\n            this.refreshCols(false, true);\n        }, this);\n\n        this.$items = this.$container.children(this.settings.itemSelector);\n        this.setItems();\n        this.refreshCols(true, false);\n\n        Garnish.$doc.ready($.proxy(function() {\n            this.refreshCols(false, false);\n        }, this));\n    },\n\n    addItems: function(items) {\n        this.$items = $().add(this.$items.add(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    removeItems: function(items) {\n        this.$items = $().add(this.$items.not(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    resetItemOrder: function() {\n        this.$items = $().add(this.$items);\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    setItems: function() {\n        this.setItems._ = {};\n\n        this.items = [];\n\n        for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n            this.items.push($(this.$items[this.setItems._.i]));\n        }\n\n        delete this.setItems._;\n    },\n\n    refreshCols: function(force) {\n        if (this._refreshingCols) {\n            this._refreshColsAfterRefresh = true;\n            if (force) {\n                this._forceRefreshColsAfterRefresh = true;\n            }\n            return;\n        }\n\n        this._refreshingCols = true;\n\n        if (!this.items.length) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.refreshCols._ = {};\n\n        // Check to see if the grid is actually visible\n        this.refreshCols._.oldHeight = this.$container[0].style.height;\n        this.$container[0].style.height = 1;\n        this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n        this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n        if (this.refreshCols._.scrollHeight === 0) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        if (this.settings.cols) {\n            this.refreshCols._.totalCols = this.settings.cols;\n        } else {\n            this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n            // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n            if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n            }\n\n            if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                this.refreshCols._.totalCols = this.settings.maxCols;\n            }\n        }\n\n        if (this.refreshCols._.totalCols === 0) {\n            this.refreshCols._.totalCols = 1;\n        }\n\n        // Same number of columns as before?\n        if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.totalCols = this.refreshCols._.totalCols;\n        this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n        // Temporarily stop listening to container resizes\n        this.removeListener(this.$container, 'resize');\n\n        if (this.settings.fillMode === 'grid') {\n            this.refreshCols._.itemIndex = 0;\n\n            while (this.refreshCols._.itemIndex < this.items.length) {\n                // Append the next X items and figure out which one is the tallest\n                this.refreshCols._.tallestItemHeight = -1;\n                this.refreshCols._.colIndex = 0;\n\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                    if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                        this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                    }\n\n                    this.refreshCols._.colIndex++;\n                }\n\n                if (this.settings.snapToGrid) {\n                    this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                    if (this.refreshCols._.remainder) {\n                        this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                    }\n                }\n\n                // Now set their heights to the tallest one\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                }\n\n                // set the this.refreshCols._.itemIndex pointer to the next one up\n                this.refreshCols._.itemIndex += this.totalCols;\n            }\n        } else {\n            this.removeListener(this.$items, 'resize');\n\n            // If there's only one column, sneak out early\n            if (this.totalCols === 1) {\n                this.$container.height('auto');\n                this.$items\n                    .show()\n                    .css({\n                        position: 'relative',\n                        width: 'auto',\n                        top: 0\n                    })\n                    .css(Craft.left, 0);\n            } else {\n                this.$items.css('position', 'absolute');\n                this.colPctWidth = (100 / this.totalCols);\n\n                // The setup\n\n                this.layouts = [];\n\n                this.itemPositions = [];\n                this.itemColspansByPosition = [];\n\n                // Figure out all of the possible colspans for each item,\n                // as well as all the possible positions for each item at each of its colspans\n\n                this.possibleItemColspans = [];\n                this.possibleItemPositionsByColspan = [];\n                this.itemHeightsByColspan = [];\n\n                for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                    this.possibleItemColspans[this.refreshCols._.item] = [];\n                    this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                    this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                    this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                    this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                    this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                    this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                    this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                    if (this.refreshCols._.minColspan > this.totalCols) {\n                        this.refreshCols._.minColspan = this.totalCols;\n                    }\n                    if (this.refreshCols._.maxColspan > this.totalCols) {\n                        this.refreshCols._.maxColspan = this.totalCols;\n                    }\n\n                    for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                        // Get the height for this colspan\n                        this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                        this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                        this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                        if (this.refreshCols._.positionLeft) {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = 0;\n                        } else if (this.refreshCols._.positionRight) {\n                            this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                            this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                        } else {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                        }\n\n                        for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                        }\n                    }\n                }\n\n                // Find all the possible layouts\n\n                this.refreshCols._.colHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                    this.refreshCols._.colHeights.push(0);\n                }\n\n                this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                // Now find the layout that looks the best.\n\n                // First find the layouts with the highest number of used columns\n                this.refreshCols._.layoutTotalCols = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                    for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                        if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                            this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                        }\n                    }\n                }\n\n                this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                // Filter out the ones that aren't using as many columns as they could be\n                for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                    if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                        this.layouts.splice(this.refreshCols._.i, 1);\n                    }\n                }\n\n                // Find the layout(s) with the least overall height\n                this.refreshCols._.layoutHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                }\n\n                this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                this.refreshCols._.shortestLayouts = [];\n                this.refreshCols._.emptySpaces = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                    if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                        this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                        // Now get its total empty space, including any trailing empty space\n                        this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                        }\n\n                        this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                    }\n                }\n\n                // And the layout with the least empty space is...\n                this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                // Set the item widths and left positions\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                    this.refreshCols._.css = {\n                        width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                    };\n                    this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                    this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                }\n\n                // If every item is at position 0, then let them lay out au naturel\n                if (this.isSimpleLayout()) {\n                    this.$container.height('auto');\n                    this.$items.css({\n                        position: 'relative',\n                        top: 0,\n                        'margin-bottom': this.settings.gutter + 'px'\n                    });\n                } else {\n                    this.$items.css('position', 'absolute');\n\n                    // Now position the items\n                    this.positionItems();\n\n                    // Update the positions as the items' heigthts change\n                    this.addListener(this.$items, 'resize', 'onItemResize');\n                }\n            }\n        }\n\n        this.completeRefreshCols();\n\n        // Resume container resize listening\n        this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n        this.onRefreshCols();\n    },\n\n    completeRefreshCols: function() {\n        // Delete the internal variable object\n        if (typeof this.refreshCols._ !== 'undefined') {\n            delete this.refreshCols._;\n        }\n\n        this._refreshingCols = false;\n\n        if (this._refreshColsAfterRefresh) {\n            var force = this._forceRefreshColsAfterRefresh;\n            this._refreshColsAfterRefresh = false;\n            this._forceRefreshColsAfterRefresh = false;\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.refreshCols(force);\n            }, this));\n        }\n    },\n\n    getItemWidth: function(colspan) {\n        return (this.colPctWidth * colspan);\n    },\n\n    getItemWidthCss: function(colspan) {\n        return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n    },\n\n    getItemWidthInPx: function(colspan) {\n        return this.getItemWidth(colspan) / 100 * this.$container.width() - this.colGutterDrop;\n    },\n\n    getItemLeftPosCss: function(position) {\n        return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n    },\n\n    getItemLeftPosInPx: function(position) {\n        return (this.getItemWidth(1) / 100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n    },\n\n    isSimpleLayout: function() {\n        this.isSimpleLayout._ = {};\n\n        for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n            if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                delete this.isSimpleLayout._;\n                return false;\n            }\n        }\n\n        delete this.isSimpleLayout._;\n        return true;\n    },\n\n    positionItems: function() {\n        this.positionItems._ = {};\n\n        this.positionItems._.colHeights = [];\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n            this.positionItems._.colHeights.push(0);\n        }\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n            this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n            this.positionItems._.affectedColHeights = [];\n\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n            }\n\n            this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n            if (this.positionItems._.top > 0) {\n                this.positionItems._.top += this.settings.gutter;\n            }\n\n            this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n            // Now add the new heights to those columns\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n            }\n        }\n\n        // Set the container height\n        this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n        delete this.positionItems._;\n    },\n\n    onItemResize: function(ev) {\n        this.onItemResize._ = {};\n\n        // Prevent this from bubbling up to the container, which has its own resize listener\n        ev.stopPropagation();\n\n        this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n        if (this.onItemResize._.item !== -1) {\n            // Update the height and reposition the items\n            this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n            if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                this.positionItems(false);\n            }\n        }\n\n        delete this.onItemResize._;\n    },\n\n    onRefreshCols: function() {\n        this.trigger('refreshCols');\n        this.settings.onRefreshCols();\n    }\n}, {\n    defaults: {\n        itemSelector: '.item',\n        cols: null,\n        maxCols: null,\n        minColWidth: 320,\n        gutter: 14,\n        fillMode: 'top',\n        colClass: 'col',\n        snapToGrid: null,\n\n        onRefreshCols: $.noop\n    }\n});\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend({\n    grid: null,\n    _: null,\n\n    init: function(grid) {\n        this.grid = grid;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        this._ = {};\n\n        // Loop through all possible colspans\n        for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n            this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n            // Loop through all the possible positions for this colspan,\n            // and find the one that is closest to the top\n\n            this._.tallestColHeightsByPosition = [];\n\n            for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                this._.colHeightsForPosition = [];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                }\n\n                this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n            }\n\n            // And the shortest position for this colspan is...\n            this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n            this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n            // Now log the colspan/position placement\n            this._.positions = prevPositions.slice(0);\n            this._.colspans = prevColspans.slice(0);\n            this._.colHeights = prevColHeights.slice(0);\n            this._.emptySpace = prevEmptySpace;\n\n            this._.positions.push(this._.position);\n            this._.colspans.push(this._.colspan);\n\n            // Add the new heights to those columns\n            this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n            this._.endingCol = this._.position + this._.colspan - 1;\n\n            for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n            }\n\n            // If this is the last item, create the layout\n            if (item === this.grid.items.length - 1) {\n                this.grid.layouts.push({\n                    positions: this._.positions,\n                    colspans: this._.colspans,\n                    colHeights: this._.colHeights,\n                    emptySpace: this._.emptySpace\n                });\n            } else {\n                // Dive deeper\n                this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n            }\n        }\n\n        delete this._;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Remove inner-word punctuation\n        handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        handle = handle.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        handle = Craft.asciiString(handle);\n\n        if (!this.settings.allowNonAlphaStart) {\n            // Handle must start with a letter\n            handle = handle.replace(/^[^a-z]+/, '');\n        }\n\n        // Get the \"words\"\n        var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n        handle = '';\n\n        if (Craft.handleCasing === 'snake') {\n            return words.join('_');\n        }\n\n        // Make it camelCase\n        for (let i = 0; i < words.length; i++) {\n            if (Craft.handleCasing !== 'pascal' && i === 0) {\n                handle += words[i];\n            } else {\n                handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n            }\n        }\n\n        return handle;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend({\n    $container: null,\n    progressBar: null,\n    uploader: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ImageUpload.defaults);\n        this.initImageUpload();\n    },\n\n    initImageUpload: function() {\n        this.$container = $(this.settings.containerSelector);\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl(this.settings.uploadAction),\n            formData: this.settings.postParameters,\n            fileInput: this.$container.find(this.settings.fileInputSelector),\n            paramName: this.settings.uploadParamName\n        };\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        options.events = {};\n        options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n        options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n        options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n        options.events.fileuploadfail = $.proxy(this, '_onUploadError');\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        this.initButtons();\n    },\n\n    initButtons: function() {\n        this.$container.find(this.settings.uploadButtonSelector).on('click', $.proxy(function(ev) {\n            this.$container.find(this.settings.fileInputSelector).trigger('click');\n        }, this));\n\n        this.$container.find(this.settings.deleteButtonSelector).on('click', $.proxy(function(ev) {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this.refreshImage(response);\n                    }\n                }, this));\n            }\n        }, this));\n    },\n\n    refreshImage: function(response) {\n        $(this.settings.containerSelector).replaceWith(response.html);\n        this.settings.onAfterRefreshImage(response);\n        this.initImageUpload();\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function(event) {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var html = $(data.result.html);\n            this.refreshImage(data.result);\n        }\n\n        // Last file\n        if (this.uploader.isLastUpload()) {\n            this.progressBar.hideProgressBar();\n            this.$container.removeClass('uploading');\n        }\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadError: function(event, data) {\n        if (data.jqXHR.responseJSON.error) {\n            alert(data.jqXHR.responseJSON.error);\n            this.$container.removeClass('uploading');\n            this.progressBar.hideProgressBar();\n            this.progressBar.resetProgressBar();\n        }\n    }\n}, {\n    defaults: {\n        postParameters: {},\n        uploadAction: \"\",\n        deleteAction: \"\",\n        fileInputSelector: \"\",\n\n        onAfterRefreshImage: $.noop,\n        containerSelector: null,\n\n        uploadButtonSelector: null,\n        deleteButtonSelector: null,\n\n        uploadParamName: 'files'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend({\n    $icon: null,\n    content: null,\n    hud: null,\n\n    init: function(icon) {\n        this.$icon = $(icon);\n\n        if (this.$icon.data('infoicon')) {\n            Garnish.log('Double-instantiating an info icon on an element');\n            this.content = this.$icon.data('infoicon').content;\n            this.$icon.data('infoicon').destroy();\n        } else {\n            this.content = this.$icon.html();\n            this.$icon\n                .html('')\n                .attr({\n                    tabindex: 0,\n                    'role': 'button',\n                    'aria-label': Craft.t('app', 'Information'),\n                });\n        }\n\n        this.$icon.data('infoicon', this);\n\n        if (this.$icon[0].previousSibling && this.$icon[0].previousSibling.nodeType === Node.TEXT_NODE) {\n            // Make sure it's in a .nowrap container\n            const $parent = this.$icon.parent();\n            if (!$parent.hasClass('nowrap')) {\n                // Find the last word in the text\n                const m = this.$icon[0].previousSibling.nodeValue.match(/[^\\s\\-]+\\s*$/);\n                if (m) {\n                    this.$icon[0].previousSibling.nodeValue = this.$icon[0].previousSibling.nodeValue.substr(0, m.index);\n                    $('<span/>', {\n                        class: 'nowrap',\n                        html: m[0].replace(/\\s+$/, '') + ' ',\n                    })\n                        .insertAfter(this.$icon[0].previousSibling)\n                        .append(this.$icon);\n                }\n            }\n        }\n\n        this.addListener(this.$icon, 'click', ev => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.showHud();\n        });\n\n        this.addListener(this.$icon, 'keydown', ev => {\n            if (!(this.hud && this.hud.showing) && [Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.showHud();\n            }\n        });\n    },\n\n    showHud: function(ev) {\n        if (!this.hud) {\n            this.hud = new Garnish.HUD(this.$icon, this.content, {\n                hudClass: 'hud info-hud',\n                closeOtherHUDs: false,\n                onShow: () => {\n                    Garnish.shortcutManager.registerShortcut(Garnish.SPACE_KEY, () => {\n                        this.hud.hide();\n                    });\n                },\n            });\n            Craft.initUiElements(this.hud.$body);\n        } else {\n            this.hud.show();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend({\n    settings: null,\n    $outerContainer: null,\n    $innerContainer: null,\n    $input: null,\n    small: false,\n    on: false,\n    indeterminate: false,\n    dragger: null,\n\n    dragStartMargin: null,\n\n    init: function(outerContainer, settings) {\n        this.$outerContainer = $(outerContainer);\n\n        // Is this already a lightswitch?\n        if (this.$outerContainer.data('lightswitch')) {\n            Garnish.log('Double-instantiating a lightswitch on an element');\n            this.$outerContainer.data('lightswitch').destroy();\n        }\n\n        this.$outerContainer.data('lightswitch', this);\n\n        this.small = this.$outerContainer.hasClass('small');\n\n        this.setSettings(settings, Craft.LightSwitch.defaults);\n\n        this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n        this.$input = this.$outerContainer.find('input:first');\n\n        // If the input is disabled, go no further\n        if (this.$input.prop('disabled')) {\n            return;\n        }\n\n        this.on = this.$outerContainer.hasClass('on');\n        this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n        this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n        this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n        this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n            axis: Garnish.X_AXIS,\n            ignoreHandleSelector: null,\n            onDragStart: $.proxy(this, '_onDragStart'),\n            onDrag: $.proxy(this, '_onDrag'),\n            onDragStop: $.proxy(this, '_onDragStop')\n        });\n\n        // Does the input have on/off labels?\n        let $wrapper = this.$outerContainer.parent('.lightswitch-inner-container');\n        if ($wrapper.length) {\n            this.addListener($wrapper.children('span[data-toggle=\"off\"]'), 'click', this.turnOff);\n            this.addListener($wrapper.children('span[data-toggle=\"on\"]'), 'click', this.turnOn);\n        }\n    },\n\n    turnOn: function(muteEvent) {\n        var changed = !this.on;\n\n        this.on = true;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n        this.$input.val(this.settings.value);\n        this.$outerContainer.addClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'true');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnOff: function(muteEvent) {\n        var changed = this.on || this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin();\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n        this.$input.val('');\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'false');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnIndeterminate: function(muteEvent) {\n        var changed = !this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = true;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n        this.$input.val(this.settings.indeterminateValue);\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.addClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'mixed');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    toggle: function() {\n        if (this.indeterminate || !this.on) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    onChange: function() {\n        this.trigger('change');\n        this.settings.onChange(this.on);\n        this.$outerContainer.trigger('change');\n    },\n\n    _onMouseDown: function() {\n        this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n    },\n\n    _onMouseUp: function() {\n        this.removeListener(Garnish.$doc, 'mouseup');\n\n        // Was this a click?\n        if (!this.dragger.dragging) {\n            this.toggle();\n        }\n    },\n\n    _onKeyDown: function(event) {\n        switch (event.keyCode) {\n            case Garnish.SPACE_KEY: {\n                this.toggle();\n                event.preventDefault();\n                break;\n            }\n            case Garnish.RIGHT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOn();\n                } else {\n                    this.turnOff();\n                }\n\n                event.preventDefault();\n                break;\n            }\n            case Garnish.LEFT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOff();\n                } else {\n                    this.turnOn();\n                }\n\n                event.preventDefault();\n                break;\n            }\n        }\n    },\n\n    _getMargin: function() {\n        return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n    },\n\n    _onDragStart: function() {\n        this.$outerContainer.addClass('dragging');\n        this.dragStartMargin = this._getMargin();\n    },\n\n    _onDrag: function() {\n        var margin;\n\n        if (Craft.orientation === 'ltr') {\n            margin = this.dragStartMargin + this.dragger.mouseDistX;\n        } else {\n            margin = this.dragStartMargin - this.dragger.mouseDistX;\n        }\n\n        if (margin < this._getOffMargin()) {\n            margin = this._getOffMargin();\n        } else if (margin > 0) {\n            margin = 0;\n        }\n\n        this.$innerContainer.css('margin-' + Craft.left, margin);\n    },\n\n    _onDragStop: function() {\n        var margin = this._getMargin();\n        console.log(margin);\n\n        if (margin > (this._getOffMargin() / 2)) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    _onSettle: function() {\n        this.$outerContainer.removeClass('dragging');\n    },\n\n    destroy: function() {\n        this.base();\n        this.dragger.destroy();\n    },\n\n    _getOffMargin: function() {\n        return (this.small ? -10 : -12);\n    }\n}, {\n    animationDuration: 100,\n    defaults: {\n        value: '1',\n        indeterminateValue: '-',\n        onChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend({\n    $extraFields: null,\n    $trigger: null,\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $iframe: null,\n    $fieldPlaceholder: null,\n\n    previewUrl: null,\n    token: null,\n    basePostData: null,\n    inPreviewMode: false,\n    fields: null,\n    lastPostData: null,\n    updateIframeInterval: null,\n    loading: false,\n    checkAgain: false,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _slideInOnIframeLoad: false,\n    _handleSuccessProxy: null,\n    _handleErrorProxy: null,\n    _forceUpdateIframeProxy: null,\n\n    _scrollX: null,\n    _scrollY: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.LivePreview.defaults);\n\n        // Should preview requests use a specific URL?\n        // This won't affect how the request gets routed (the action param will override it),\n        // but it will allow the templates to change behavior based on the request URI.\n        if (this.settings.previewUrl) {\n            this.previewUrl = this.settings.previewUrl;\n        } else {\n            this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n        }\n\n        // Load the preview over SSL if the current request is\n        if (document.location.protocol === 'https:') {\n            this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n        }\n\n        // Set the base post data\n        this.basePostData = $.extend({}, this.settings.previewParams);\n\n        this._handleSuccessProxy = $.proxy(this, 'handleSuccess');\n        this._handleErrorProxy = $.proxy(this, 'handleError');\n        this._forceUpdateIframeProxy = $.proxy(this, 'forceUpdateIframe');\n\n        // Find the DOM elements\n        this.$extraFields = $(this.settings.extraFields);\n        this.$trigger = $(this.settings.trigger);\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n        // Event Listeners\n        this.addListener(this.$trigger, 'activate', 'toggle');\n\n        Craft.cp.on('beforeSaveShortcut', $.proxy(function() {\n            if (this.inPreviewMode) {\n                this.moveFieldsBack();\n            }\n        }, this));\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n            inPx = Craft.LivePreview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    toggle: function() {\n        if (this.inPreviewMode) {\n            this.exit();\n        } else {\n            this.enter();\n        }\n    },\n\n    enter: function() {\n        if (this.inPreviewMode) {\n            return;\n        }\n\n        if (!this.token) {\n            this.createToken();\n            return;\n        }\n\n        this.trigger('beforeEnter');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            let $saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($editorHeader);\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: $.proxy(this, '_onDragStart'),\n                onDrag: $.proxy(this, '_onDrag'),\n                onDragStop: $.proxy(this, '_onDragStop')\n            });\n\n            this.addListener($closeBtn, 'click', 'exit');\n            this.addListener($saveBtn, 'click', 'save');\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Move all the fields into the editor rather than copying them\n        // so any JS that's referencing the elements won't break.\n        this.fields = [];\n        var $fields = $(this.settings.fields);\n\n        for (var i = 0; i < $fields.length; i++) {\n            var $field = $($fields[i]),\n                $clone = this._getClone($field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter($field);\n            $field.detach();\n            this.$fieldPlaceholder.replaceWith($clone);\n            $field.appendTo(this.$editor);\n\n            this.fields.push({\n                $field: $field,\n                $clone: $clone\n            });\n        }\n\n        if (this.updateIframe()) {\n            this._slideInOnIframeLoad = true;\n        } else {\n            this.slideIn();\n        }\n\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = true;\n        this.trigger('enter');\n    },\n\n    createToken: function() {\n        Craft.postActionRequest('live-preview/create-token', {\n            previewAction: this.settings.previewAction\n        }, $.proxy(function(response, textStatus) {\n            if (textStatus === 'success') {\n                this.token = response.token;\n                this.enter();\n            }\n        }, this));\n    },\n\n    save: function() {\n        Craft.cp.submitPrimaryForm();\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', $.proxy(function() {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        }, this));\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', $.proxy(function() {\n            this.updateIframeInterval = setInterval($.proxy(this, 'updateIframe'), 1000);\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.exit();\n                }\n            });\n        }, this));\n    },\n\n    exit: function() {\n        if (!this.inPreviewMode) {\n            return;\n        }\n\n        this.trigger('beforeExit');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        if (this.updateIframeInterval) {\n            clearInterval(this.updateIframeInterval);\n        }\n\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', $.proxy(function() {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        }, this));\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', $.proxy(function() {\n            this.$previewContainer.hide();\n        }, this));\n\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = false;\n        this.trigger('exit');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n    },\n\n    updateIframe: function(force) {\n        if (force) {\n            this.lastPostData = null;\n        }\n\n        if (!this.inPreviewMode) {\n            return false;\n        }\n\n        if (this.loading) {\n            this.checkAgain = true;\n            return false;\n        }\n\n        // Has the post data changed?\n        var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n        if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n            this.lastPostData = postData;\n            this.loading = true;\n\n            var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n            this._scrollX = $doc ? $doc.scrollLeft() : 0;\n            this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n            $.ajax({\n                url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                method: 'POST',\n                data: $.extend({}, postData, this.basePostData),\n                headers: {\n                    'X-Craft-Token': this.token\n                },\n                xhrFields: {\n                    withCredentials: true\n                },\n                crossDomain: true,\n                success: this._handleSuccessProxy,\n                error: this._handleErrorProxy\n            });\n\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    forceUpdateIframe: function() {\n        return this.updateIframe(true);\n    },\n\n    handleSuccess: function(data) {\n        var html = data +\n            '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n        // Create a new iframe\n        var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n        if (this.$iframe) {\n            $iframe.insertBefore(this.$iframe);\n        } else {\n            $iframe.appendTo(this.$iframeContainer);\n        }\n\n        this.addListener($iframe, 'load', function() {\n            if (this.$iframe) {\n                this.$iframe.remove();\n            }\n            this.$iframe = $iframe;\n\n            if (this._slideInOnIframeLoad) {\n                this.slideIn();\n                this._slideInOnIframeLoad = false;\n            }\n\n            this.removeListener($iframe, 'load');\n        });\n\n        Garnish.requestAnimationFrame($.proxy(function() {\n            $iframe[0].contentWindow.document.open();\n            $iframe[0].contentWindow.document.write(html);\n            $iframe[0].contentWindow.document.close();\n            this.onResponse();\n        }, this));\n    },\n\n    handleError: function() {\n        this.onResponse();\n    },\n\n    onResponse: function() {\n        this.loading = false;\n\n        if (this.checkAgain) {\n            this.checkAgain = false;\n            this.updateIframe();\n        }\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n\n    defaults: {\n        trigger: '.livepreviewbtn',\n        fields: null,\n        extraFields: null,\n        previewUrl: null,\n        previewAction: null,\n        previewParams: {}\n    }\n});\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend({\n    $passwordWrapper: null,\n    $passwordInput: null,\n    $textInput: null,\n    $currentInput: null,\n\n    $showPasswordToggle: null,\n    showingPassword: null,\n\n    init: function(passwordInput, settings) {\n        this.$passwordInput = $(passwordInput);\n        this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n        this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n        // Is this already a password input?\n        if (this.$passwordInput.data('passwordInput')) {\n            Garnish.log('Double-instantiating a password input on an element');\n            this.$passwordInput.data('passwordInput').destroy();\n        }\n\n        this.$passwordInput.data('passwordInput', this);\n\n        this.$showPasswordToggle = $('<button type=\"button\" class=\"invisible\" />');\n        this.$showPasswordToggle.addClass('password-toggle');\n        this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n        this.initInputFocusEvents(this.$passwordInput);\n        this.addListener(this.$showPasswordToggle, 'click', 'onClick');\n        this.hidePassword();\n    },\n\n    setCurrentInput: function($input) {\n        if (this.$currentInput) {\n            // Swap the inputs, while preventing the focus animation\n            $input.insertAfter(this.$currentInput);\n            this.$currentInput.detach();\n            $input.trigger('focus');\n\n            // Restore the input value\n            $input.val(this.$currentInput.val());\n        }\n\n        this.$currentInput = $input;\n\n        this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n    },\n\n    updateToggleLabel: function(label) {\n        this.$showPasswordToggle.text(label);\n    },\n\n    initInputFocusEvents: function($input) {\n        this.addListener($input, 'focus', function() {\n            this.$passwordWrapper.addClass('focus');\n        });\n        this.addListener($input, 'blur', function() {\n            this.$passwordWrapper.removeClass('focus');\n        });\n    },\n\n    showPassword: function() {\n        if (this.showingPassword) {\n            return;\n        }\n\n        if (!this.$textInput) {\n            this.$textInput = this.$passwordInput.clone(true);\n            this.$textInput.attr('type', 'text');\n            this.initInputFocusEvents(this.$textInput);\n        }\n\n        this.setCurrentInput(this.$textInput);\n        this.updateToggleLabel(Craft.t('app', 'Hide'));\n        this.showingPassword = true;\n    },\n\n    hidePassword: function() {\n        // showingPassword could be null, which is acceptable\n        if (this.showingPassword === false) {\n            return;\n        }\n\n        this.setCurrentInput(this.$passwordInput);\n        this.updateToggleLabel(Craft.t('app', 'Show'));\n        this.showingPassword = false;\n\n        // Alt key temporarily shows the password\n        this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n    },\n\n    togglePassword: function() {\n        if (this.showingPassword) {\n            this.hidePassword();\n        } else {\n            this.showPassword();\n        }\n\n        this.settings.onToggleInput(this.$currentInput);\n    },\n\n    onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n            this.showPassword();\n            this.$showPasswordToggle.addClass('invisible');\n            this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n        }\n    },\n\n    onKeyUp: function(ev) {\n        ev.preventDefault();\n\n        if (ev.keyCode === Garnish.ALT_KEY) {\n            this.hidePassword();\n            this.$showPasswordToggle.removeClass('invisible');\n        }\n    },\n\n    onInputChange: function() {\n        if (this.$currentInput.val()) {\n            this.$showPasswordToggle.removeClass('invisible');\n        } else {\n            this.$showPasswordToggle.addClass('invisible');\n        }\n    },\n\n    onClick: function(ev) {\n        if (this.$currentInput[0].setSelectionRange) {\n            var selectionStart = this.$currentInput[0].selectionStart,\n                selectionEnd = this.$currentInput[0].selectionEnd;\n\n            this.togglePassword();\n            this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n        } else {\n            this.togglePassword();\n        }\n    }\n}, {\n    defaults: {\n        onToggleInput: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend({\n    draftEditor: null,\n\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $spinner: null,\n    $statusIcon: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $previewHeader: null,\n    $targetBtn: null,\n    $targetMenu: null,\n    $deviceTypeContainer: null,\n    $orientationBtn: null,\n    $deviceMask: null,\n    $devicePreviewContainer: null,\n    $iframe: null,\n    iframeLoaded: false,\n    $tempInput: null,\n    $fieldPlaceholder: null,\n\n    isActive: false,\n    isVisible: false,\n    activeTarget: 0,\n\n    isDeviceUpdating: false,\n    deviceAnimationTimeout: null,\n    currentDeviceType: 'desktop',\n    deviceOrientation: null,\n    deviceWidth: '',\n    deviceHeight: '',\n    deviceMaskDimensions: {\n        phone: {\n            width: 375,\n            height: 753\n        },\n        tablet: {\n            width: 768,\n            height: 1110\n        }\n    },\n\n    draftId: null,\n    url: null,\n    fields: null,\n\n    iframeHeight: null,\n    scrollTop: null,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _updateIframeProxy: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(draftEditor) {\n        this.draftEditor = draftEditor;\n\n        this._updateIframeProxy = $.proxy(this, 'updateIframe');\n\n        this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.Preview.minEditorWidthInPx) {\n            inPx = Craft.Preview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    open: function() {\n        if (this.isActive) {\n            return;\n        }\n\n        this.isActive = true;\n        this.trigger('beforeOpen');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n            this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n            if (Craft.Pro) {\n                this.$previewHeader = $('<header/>', {'class': 'lp-preview-header'}).appendTo(this.$previewContainer);\n\n                // Preview targets\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    this.$targetBtn = $('<button/>', {\n                        type: 'button',\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                    }).appendTo(this.$previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    const $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    let $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: option => {\n                            this.switchTarget($(option).data('target'));\n                        },\n                    });\n\n                    $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                }\n\n                // Device type buttons\n                this.$deviceTypeContainer = $('<div/>', {\n                    class: 'btngroup lp-device-type',\n                    role: 'listbox',\n                    'aria-label': Craft.t('app', 'Device type'),\n                    tabindex: '0',\n                }).appendTo(this.$previewHeader);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--desktop active',\n                    title: Craft.t('app', 'Desktop'),\n                    'aria-label': Craft.t('app', 'Desktop'),\n                    'aria-selected': 'true',\n                    tabindex: '-1',\n                    data: {\n                        width: '',\n                        height: '',\n                        deviceType: 'desktop'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--tablet',\n                    title: Craft.t('app', 'Tablet'),\n                    'aria-label': Craft.t('app', 'Tablet'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 768,\n                        height: 1024,\n                        deviceType: 'tablet'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--phone',\n                    title: Craft.t('app', 'Mobile'),\n                    'aria-label': Craft.t('app', 'Mobile'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 375,\n                        height: 667,\n                        deviceType: 'phone'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n\n                $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n\n                // Orientation toggle\n                this.$orientationBtn = $('<button/>', {\n                    type: 'button',\n                    'class': 'btn disabled',\n                    'data-icon': 'refresh',\n                    disabled: '',\n                    'aria-hidden': '',\n                    'text': Craft.t('app', 'Rotate')\n                }).appendTo(this.$previewHeader);\n                this.addListener(this.$orientationBtn, 'click', 'switchOrientation');\n\n                // Get the last stored orientation\n                this.deviceOrientation = Craft.getLocalStorage('LivePreview.orientation');\n\n                // Device type button click handler\n                this.addListener($('.btn', this.$deviceTypeContainer), 'click', 'switchDeviceType');\n\n                // Device mask\n                this.$deviceMask = $('<div/>', {\n                    'class': 'lp-device-mask'\n                });\n            }\n\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n            if (this.$deviceMask) {\n                this.$iframeContainer.append(this.$deviceMask);\n            }\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this),\n            });\n\n            this.addListener($closeBtn, 'click', 'close');\n            this.addListener(this.$statusIcon, 'click', () => {\n                this.draftEditor.showStatusHud(this.$statusIcon);\n            });\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Find the fields, excluding nested fields\n        this.fields = [];\n        var $fields = $('#content .field').not($('#content .field .field'));\n\n        if ($fields.length) {\n            // Insert our temporary input before the first field so we know where to swap in the serialized form values\n            this.$tempInput.insertBefore($fields.get(0));\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            for (let i = 0; i < $fields.length; i++) {\n                let $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n        }\n\n        this.updateIframe();\n\n        this.draftEditor.on('update', this._updateIframeProxy);\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.trigger('open');\n    },\n\n    switchTarget: function(i) {\n        this.activeTarget = i;\n        this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n        this.$targetMenu.find('a.sel').removeClass('sel');\n        this.$targetMenu.find('a').eq(i).addClass('sel');\n        this.updateIframe(true);\n        this.trigger('switchTarget', {\n            previewTarget: this.draftEditor.settings.previewTargets[i],\n        });\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        if (!this.isActive || this.isVisible) {\n            return;\n        }\n\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.close();\n                }\n            });\n        });\n\n        this.isVisible = true;\n    },\n\n    close: function() {\n        if (!this.isActive || !this.isVisible) {\n            return;\n        }\n\n        this.trigger('beforeClose');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        // Remove our temporary input and move the preview fields back into place\n        this.$tempInput.detach();\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n            this.resetDevicePreview();\n        });\n\n        this.draftEditor.off('update', this._updateIframeProxy);\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.isActive = false;\n        this.isVisible = false;\n        this.trigger('close');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n        if (this._devicePreviewIsActive()) {\n            this.updateDevicePreview();\n        }\n    },\n\n    _useIframeResizer: function() {\n        return Craft.previewIframeResizerOptions !== false;\n    },\n\n    updateIframe: function(resetScroll) {\n        if (!this.isActive) {\n            return false;\n        }\n\n        // Ignore non-boolean resetScroll values\n        resetScroll = resetScroll === true;\n\n        var target = this.draftEditor.settings.previewTargets[this.activeTarget];\n        var refresh = !!(\n            this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n            !this.$iframe ||\n            resetScroll ||\n            typeof target.refresh === 'undefined' ||\n            target.refresh\n        );\n\n        this.trigger('beforeUpdateIframe', {\n            previewTarget: target,\n            resetScroll: resetScroll,\n            refresh: refresh,\n        });\n\n        // If this is an existing preview target, make sure it wants to be refreshed automatically\n        if (!refresh) {\n            this.slideIn();\n            return;\n        }\n\n        this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(url => {\n            // Maintain the current scroll position?\n            let sameHost;\n            if (resetScroll) {\n                this.scrollTop = null;\n            } else if (this.iframeLoaded && this.$iframe) {\n                if (this._useIframeResizer()) {\n                    this.iframeHeight = this.$iframe.height();\n                    this.scrollTop = this.$iframeContainer.scrollTop();\n                } else {\n                    sameHost = Craft.isSameHost(url);\n                    if (sameHost && this.$iframe[0].contentWindow) {\n                        this.scrollTop = $(this.$iframe[0].contentWindow.document).scrollTop();\n                    }\n                }\n            }\n\n            this.iframeLoaded = false;\n\n            var $iframe = $('<iframe/>', {\n                'class': 'lp-preview',\n                frameborder: 0,\n                src: url,\n            });\n\n            if (this.$iframe) {\n                this.$iframe.replaceWith($iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            // If we’re on tablet/phone then wrap the iframe in our own container\n            // so we can keep all the iFrameResizer() stuff working\n            if (this._devicePreviewIsActive()) {\n                if (!this.$devicePreviewContainer) {\n                    this.$devicePreviewContainer = $('<div/>', {\n                        'class': 'lp-device-preview-container'\n                    });\n                    $iframe.wrap('<div class=\"lp-device-preview-container\"></div>');\n                    this.$devicePreviewContainer = this.$iframeContainer.find('.lp-device-preview-container');\n                }\n            }\n\n            // Keep the iframe height consistent with its content\n            if (this._useIframeResizer()) {\n                if (!resetScroll && this.iframeHeight !== null) {\n                    $iframe.height(this.iframeHeight);\n                    this.$iframeContainer.scrollTop(this.scrollTop);\n                }\n\n                iFrameResize($.extend({\n                    checkOrigin: false,\n                    // Allow iframe scrolling until we've successfully initialized the resizer\n                    scrolling: true,\n                    onInit: iframe => {\n                        this.iframeLoaded = true;\n                        this.iframeHeight = null;\n                        this.scrollTop = null;\n                        iframe.scrolling = 'no';\n                    },\n                }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n            } else {\n                $iframe.on('load', () => {\n                    this.iframeLoaded = true;\n                    if (!resetScroll && sameHost && this.scrollTop !== null) {\n                        $($iframe[0].contentWindow.document).scrollTop(this.scrollTop);\n                    }\n                });\n            }\n\n            this.url = url;\n            this.$iframe = $iframe;\n\n            if (this._devicePreviewIsActive()) {\n                this.updateDevicePreview();\n            }\n\n            this.trigger('afterUpdateIframe', {\n                previewTarget: this.draftEditor.settings.previewTargets[this.activeTarget],\n                $iframe: this.$iframe,\n            });\n\n            this.slideIn();\n        });\n    },\n\n    _devicePreviewIsActive: function() {\n        return this.currentDeviceType !== 'desktop';\n    },\n\n    switchDeviceType: function(ev) {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n\n        const $btn = $(ev.target);\n        const newDeviceType = $btn.data('deviceType');\n\n        // Bail if we’re just smashing the same button\n        if (newDeviceType === this.currentDeviceType) {\n            return false;\n        }\n\n        // Store new device type data\n        this.currentDeviceType = newDeviceType;\n        this.deviceWidth = $btn.data('width');\n        this.deviceHeight = $btn.data('height');\n\n        // Set the active state on the button\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n\n        $btn\n            .addClass('active')\n            .attr('aria-selected', 'true');\n\n        // Update or reset\n        if (this.currentDeviceType === 'desktop') {\n            this.resetDevicePreview();\n        } else {\n            this.$iframeContainer.addClass('lp-iframe-container--updating');\n            this.updateIframe();\n            this.updateDevicePreview();\n        }\n    },\n\n    switchOrientation: function()\n    {\n        if (this.isDeviceUpdating || !this._devicePreviewIsActive()) {\n            return false;\n        }\n\n        // Switch to whichever orientation is currently not stored\n        if (!this.deviceOrientation || this.deviceOrientation === 'portrait') {\n            this.deviceOrientation = 'landscape';\n        } else {\n            this.deviceOrientation = 'portrait';\n        }\n\n        // Store the new one\n        Craft.setLocalStorage('LivePreview.orientation', this.deviceOrientation);\n\n        // Allow the animation to take place\n        this.$iframeContainer.addClass('lp-iframe-container--animating');\n\n        // Update the device preview\n        this.updateDevicePreview();\n    },\n\n    updateDevicePreview: function()\n    {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.isDeviceUpdating = true;\n\n        // Enable the orientation button\n        this.$orientationBtn\n            .removeClass('disabled')\n            .removeAttr('disabled')\n            .removeAttr('aria-hidden');\n\n        // Trigger the resized css mods\n        this.$iframeContainer.addClass('lp-iframe-container--has-device-preview');\n\n        // Add the tablet class if needed\n        if (this.currentDeviceType === 'tablet') {\n            this.$iframeContainer.addClass('lp-iframe-container--tablet');\n        } else {\n            this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n        }\n\n        // Figure out the best zoom\n        let hZoom = 1;\n        let wZoom = 1;\n        let zoom = 1;\n        let previewHeight = (this.$previewContainer.height() - 50) - 48; // 50px for the header bar and 24px clearance\n        let previewWidth = this.$previewContainer.width() - 48;\n        let maskHeight = this.deviceMaskDimensions[this.currentDeviceType].height;\n        let maskWidth = this.deviceMaskDimensions[this.currentDeviceType].width;\n\n        if (this.deviceOrientation === 'landscape') {\n            if (previewWidth < maskHeight) {\n                hZoom = previewWidth / maskHeight;\n            }\n            if (previewHeight < maskWidth) {\n                wZoom = previewHeight / maskWidth;\n            }\n        } else {\n            if (previewHeight < maskHeight) {\n                hZoom = previewHeight / maskHeight;\n            }\n            if (previewWidth < maskWidth) {\n                wZoom = previewWidth / maskWidth;\n            }\n        }\n\n        zoom = hZoom;\n        if (wZoom < hZoom) {\n            zoom = wZoom;\n        }\n\n        // Figure out the css values\n        const translate = -((100/zoom)/2);\n        const rotationDeg = this.deviceOrientation === 'landscape' ? '-90deg' : '0deg';\n\n        // Apply first to the device mask\n        this.$deviceMask.css({\n            width: this.deviceMaskDimensions[this.currentDeviceType].width + 'px',\n            height: this.deviceMaskDimensions[this.currentDeviceType].height + 'px',\n            transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%) rotate('+rotationDeg+')'\n        });\n\n        // After the animation duration we can update the iframe sizes and show it\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.deviceAnimationTimeout = setTimeout($.proxy(function() {\n\n            // Then make the size change to the preview container\n            if (this.deviceOrientation === 'landscape') {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceHeight + 'px',\n                    height: this.deviceWidth + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: 0,\n                    marginLeft: '-' + (12*zoom) + 'px'\n                });\n            } else {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceWidth + 'px',\n                    height: this.deviceHeight + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: '-' + (12*zoom) + 'px',\n                    marginLeft: 0\n                });\n            }\n\n            // Remove the animating class and show the iframe\n            this.$iframeContainer.removeClass('lp-iframe-container--animating');\n            this.$iframeContainer.removeClass('lp-iframe-container--updating');\n            this.isDeviceUpdating = false;\n\n        }, this), 300);\n    },\n\n    resetDevicePreview: function()\n    {\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.currentDeviceType = 'desktop';\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n        this.$deviceTypeContainer.find('.lp-device-type-btn--desktop')\n            .addClass('active')\n            .attr('aria-selected', 'true');\n        this.$orientationBtn\n            .addClass('disabled')\n            .attr('disabled', '')\n            .attr('aria-hidden', '');\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n        this.$iframeContainer.removeClass('lp-iframe-container--has-device-preview');\n        this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n\n        // Flat out remove the iframe and let it get regenerated\n        if (this.$devicePreviewContainer) {\n            // If using iFrameResizer then remove the listeners first so we don’t get zombie instances\n            if (this._useIframeResizer()) {\n                this.$iframe[0].iFrameResizer.removeListeners();\n            }\n            this.$devicePreviewContainer.detach();\n            this.$devicePreviewContainer = null;\n            this.$iframe = null;\n            this.updateIframe();\n        }\n\n        this.isDeviceUpdating = false;\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        // Disable anything with a name attribute\n        $clone.find('[name]').prop('disabled', true);\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend({\n    assetId: null,\n    $spinner: null,\n    elementSelect: null,\n    type: null,\n    loaded: null,\n    requestId: 0,\n\n    /**\n     * Initialize the preview file modal.\n     * @returns {*|void}\n     */\n    init: function(assetId, elementSelect, settings) {\n        settings = $.extend(this.defaultSettings, settings);\n\n        settings.onHide = this._onHide.bind(this);\n\n        if (Craft.PreviewFileModal.openInstance) {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            if (instance.assetId !== assetId) {\n                instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                instance.elementSelect = elementSelect;\n            }\n\n            return this.destroy();\n        }\n\n        Craft.PreviewFileModal.openInstance = this;\n        this.elementSelect = elementSelect;\n\n        this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n        this.base(this.$container, $.extend({\n            resizable: true\n        }, settings));\n\n        // Cut the flicker, just show the nice person the preview.\n        if (this.$container) {\n            this.$container.velocity('stop');\n            this.$container.show().css('opacity', 1);\n\n            this.$shade.velocity('stop');\n            this.$shade.show().css('opacity', 1);\n        }\n\n        this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n    },\n\n    /**\n     * When hiding, remove all traces and focus last focused element.\n     * @private\n     */\n    _onHide: function() {\n        Craft.PreviewFileModal.openInstance = null;\n        if (this.elementSelect) {\n            this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n        }\n\n        this.$shade.remove();\n\n        return this.destroy();\n    },\n\n    /**\n     * Disappear immediately forever.\n     * @returns {boolean}\n     */\n    selfDestruct: function() {\n        var instance = Craft.PreviewFileModal.openInstance;\n\n        instance.hide();\n        instance.$shade.remove();\n        instance.destroy();\n\n        Craft.PreviewFileModal.openInstance = null;\n\n        return true;\n    },\n\n    /**\n     * Load an asset, using starting width and height, if applicable\n     * @param assetId\n     * @param startingWidth\n     * @param startingHeight\n     */\n    loadAsset: function(assetId, startingWidth, startingHeight) {\n        this.assetId = assetId;\n\n        this.$container.empty();\n        this.loaded = false;\n\n        this.desiredHeight = null;\n        this.desiredWidth = null;\n\n        var containerHeight = Garnish.$win.height() * 0.66;\n        var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n        containerHeight = containerWidth / 4 * 3;\n\n        if (startingWidth && startingHeight) {\n            var ratio = startingWidth / startingHeight;\n            containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n            containerWidth = containerHeight * ratio;\n\n            // This might actually have put width over the viewport limits, so doublecheck\n            if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = containerWidth / ratio;\n            }\n        }\n\n        this._resizeContainer(containerWidth, containerHeight);\n\n        this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n        var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n            left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n        this.$spinner.css({left: left, top: top, position: 'absolute'});\n        this.requestId++;\n\n        Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, function(response, textStatus) {\n            this.$container.removeClass('loading');\n            this.$spinner.remove();\n            this.loaded = true;\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (response.requestId != this.requestId) {\n                        return;\n                    }\n\n                    if (!response.previewHtml) {\n                        this.$container.addClass('zilch');\n                        this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                        return;\n                    }\n\n                    this.$container.removeClass('zilch');\n                    this.$container.append(response.previewHtml);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n                } else {\n                    alert(response.error);\n\n                    this.hide();\n                }\n            }\n        }.bind(this));\n    },\n\n    /**\n     * Resize the container to specified dimensions\n     * @param containerWidth\n     * @param containerHeight\n     * @private\n     */\n    _resizeContainer: function(containerWidth, containerHeight) {\n        this.$container.css({\n            'width': containerWidth,\n            'min-width': containerWidth,\n            'max-width': containerWidth,\n            'height': containerHeight,\n            'min-height': containerHeight,\n            'max-height': containerHeight,\n            'top': (Garnish.$win.height() - containerHeight) / 2,\n            'left': (Garnish.$win.width() - containerWidth) / 2\n        });\n    }\n}, {\n    defaultSettings: {\n        startingWidth: null,\n        startingHeight: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend({\n    $progressBar: null,\n    $innerProgressBar: null,\n    $progressBarStatus: null,\n\n    _itemCount: 0,\n    _processedItemCount: 0,\n    _displaySteps: false,\n\n    init: function($element, displaySteps) {\n        if (displaySteps) {\n            this._displaySteps = true;\n        }\n\n        this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n        this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n        this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n        this.resetProgressBar();\n    },\n\n    /**\n     * Reset the progress bar\n     */\n    resetProgressBar: function() {\n        // Since setting the progress percentage implies that there is progress to be shown\n        // It removes the pending class - we must add it back.\n        this.setProgressPercentage(100);\n        this.$progressBar.addClass('pending');\n\n        // Reset all the counters\n        this.setItemCount(1);\n        this.setProcessedItemCount(0);\n        this.$progressBarStatus.html('');\n\n        if (this._displaySteps) {\n            this.$progressBar.addClass('has-status');\n        }\n    },\n\n    /**\n     * Fade to invisible, hide it using a class and reset opacity to visible\n     */\n    hideProgressBar: function() {\n        this.$progressBar.fadeTo('fast', 0.01, $.proxy(function() {\n            this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n        }, this));\n    },\n\n    showProgressBar: function() {\n        this.$progressBar.removeClass('hidden');\n        this.$progressBarStatus.removeClass('hidden');\n    },\n\n    setItemCount: function(count) {\n        this._itemCount = count;\n    },\n\n    incrementItemCount: function(count) {\n        this._itemCount += count;\n    },\n\n    setProcessedItemCount: function(count) {\n        this._processedItemCount = count;\n    },\n\n    incrementProcessedItemCount: function(count) {\n        this._processedItemCount += count;\n    },\n\n    updateProgressBar: function() {\n        // Only fools would allow accidental division by zero.\n        this._itemCount = Math.max(this._itemCount, 1);\n\n        var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n        this.setProgressPercentage(width);\n\n        if (this._displaySteps) {\n            this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n        }\n    },\n\n    setProgressPercentage: function(percentage, animate) {\n        if (percentage === 0) {\n            this.$progressBar.addClass('pending');\n        } else {\n            this.$progressBar.removeClass('pending');\n\n            if (animate) {\n                this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n            } else {\n                this.$innerProgressBar.velocity('stop').width(percentage + '%');\n            }\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, $.proxy(this, '_handleBatchPromptSelection'), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice: choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            } else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        } else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$promptButtons);\n        let $submitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'OK'),\n        }).appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelBtn, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', $.proxy(function() {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        }, this));\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n","(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value: value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n","/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', $.proxy(this, '_handleResize'));\n        this.addListener(this.$container, 'tapstart', $.proxy(this, '_handleTapStart'));\n        this.addListener(Garnish.$bod, 'tapmove', $.proxy(this, '_handleTapMove'));\n        this.addListener(Garnish.$bod, 'tapend', $.proxy(this, '_handleTapEnd'));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout($.proxy(function() {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, this), 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        } else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (((this.$graduations.width() / 2) + (position * -1)) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n        // Remove inner-word punctuation\n        sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        if (!Craft.allowUppercaseInSlug) {\n            sourceVal = sourceVal.toLowerCase();\n        }\n\n        if (Craft.limitAutoSlugsToAscii) {\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n        }\n\n        // Get the \"words\". Split on anything that is not alphanumeric.\n        // Reference: http://www.regular-expressions.info/unicode.html\n        var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n        if (words.length) {\n            return words.join(Craft.slugWordSeparator);\n        } else {\n            return '';\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend({\n    id: null,\n\n    $container: null,\n    state: null,\n    structureDrag: null,\n\n    /**\n     * Init\n     */\n    init: function(id, container, settings) {\n        this.id = id;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Structure.defaults);\n\n        // Is this already a structure?\n        if (this.$container.data('structure')) {\n            Garnish.log('Double-instantiating a structure on an element');\n            this.$container.data('structure').destroy();\n        }\n\n        this.$container.data('structure', this);\n\n        this.state = {};\n\n        if (this.settings.storageKey) {\n            $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n        }\n\n        if (typeof this.state.collapsedElementIds === 'undefined') {\n            this.state.collapsedElementIds = [];\n        }\n\n        var $parents = this.$container.find('ul').prev('.row');\n\n        for (var i = 0; i < $parents.length; i++) {\n            var $row = $($parents[i]),\n                $li = $row.parent(),\n                $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n            if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                $li.addClass('collapsed');\n            }\n\n            this.initToggle($toggle);\n        }\n\n        if (this.settings.sortable) {\n            this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n        }\n\n        if (this.settings.newChildUrl) {\n            this.initNewChildMenus(this.$container.find('.add'));\n        }\n    },\n\n    initToggle: function($toggle) {\n        $toggle.on('click', $.proxy(function(ev) {\n            var $li = $(ev.currentTarget).closest('li'),\n                elementId = $li.children('.row').find('.element:first').data('id'),\n                viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n            if ($li.hasClass('collapsed')) {\n                $li.removeClass('collapsed');\n\n                if (viewStateKey !== -1) {\n                    this.state.collapsedElementIds.splice(viewStateKey, 1);\n                }\n            } else {\n                $li.addClass('collapsed');\n\n                if (viewStateKey === -1) {\n                    this.state.collapsedElementIds.push(elementId);\n                }\n            }\n\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.state);\n            }\n        }, this));\n    },\n\n    initNewChildMenus: function($addBtns) {\n        this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n    },\n\n    onNewChildMenuClick: function(ev) {\n        var $btn = $(ev.currentTarget);\n\n        if (!$btn.data('menubtn')) {\n            var elementId = $btn.parent().children('.element').data('id'),\n                newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n            $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n            var menuBtn = new Garnish.MenuBtn($btn);\n            menuBtn.showMenu();\n        }\n    },\n\n    getIndent: function(level) {\n        return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n    },\n\n    addElement: function($element) {\n        var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n            $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n        $row.append($element);\n\n        if (this.settings.sortable) {\n            $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n            this.structureDrag.addItems($li);\n        }\n\n        if (this.settings.newChildUrl) {\n            var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n            this.initNewChildMenus($addBtn);\n        }\n\n        $row.css('margin-bottom', -30);\n        $row.velocity({'margin-bottom': 0}, 'fast');\n    },\n\n    removeElement: function($element) {\n        var $li = $element.parent().parent();\n\n        if (this.settings.sortable) {\n            this.structureDrag.removeItems($li);\n        }\n\n        var $parentUl;\n\n        if (!$li.siblings().length) {\n            $parentUl = $li.parent();\n        }\n\n        $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', $.proxy(function() {\n            $li.remove();\n\n            if (typeof $parentUl !== 'undefined') {\n                this._removeUl($parentUl);\n            }\n        }, this));\n    },\n\n    _removeUl: function($ul) {\n        $ul.siblings('.row').children('.toggle').remove();\n        $ul.remove();\n    }\n}, {\n    baseIndent: 8,\n    nestedIndent: 35,\n\n    defaults: {\n        storageKey: null,\n        sortable: false,\n        newChildUrl: null,\n        maxLevels: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend({\n    structure: null,\n    maxLevels: null,\n    draggeeLevel: null,\n\n    $helperLi: null,\n    $targets: null,\n    draggeeHeight: null,\n\n    init: function(structure, maxLevels) {\n        this.structure = structure;\n        this.maxLevels = maxLevels;\n\n        this.$insertion = $('<li class=\"draginsertion\"/>');\n\n        var $items = this.structure.$container.find('li');\n\n        this.base($items, {\n            handle: '.element:first, .move:first',\n            helper: $.proxy(this, 'getHelper')\n        });\n    },\n\n    getHelper: function($helper) {\n        this.$helperLi = $helper;\n        var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n        $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n        $helper.find('.move').removeAttr('title');\n        return $ul;\n    },\n\n    onDragStart: function() {\n        this.$targets = $();\n\n        // Recursively find each of the targets, in the order they appear to be in\n        this.findTargets(this.structure.$container);\n\n        // How deep does the rabbit hole go?\n        this.draggeeLevel = 0;\n        var $level = this.$draggee;\n        do {\n            this.draggeeLevel++;\n            $level = $level.find('> ul > li');\n        } while ($level.length);\n\n        // Collapse the draggee\n        this.draggeeHeight = this.$draggee.height();\n        this.$draggee.velocity({\n            height: 0\n        }, 'fast', $.proxy(function() {\n            this.$draggee.addClass('hidden');\n        }, this));\n        this.base();\n\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.cancelDrag();\n            }\n        });\n    },\n\n    findTargets: function($ul) {\n        var $lis = $ul.children().not(this.$draggee);\n\n        for (var i = 0; i < $lis.length; i++) {\n            var $li = $($lis[i]);\n            this.$targets = this.$targets.add($li.children('.row'));\n\n            if (!$li.hasClass('collapsed')) {\n                this.findTargets($li.children('ul'));\n            }\n        }\n    },\n\n    onDrag: function() {\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n            this.$insertion.remove();\n        }\n\n        // First let's find the closest target\n        this._.$closestTarget = null;\n        this._.closestTargetPos = null;\n        this._.closestTargetYDiff = null;\n        this._.closestTargetOffset = null;\n        this._.closestTargetHeight = null;\n\n        for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n            this._.$target = $(this.$targets[this._.i]);\n            this._.targetOffset = this._.$target.offset();\n            this._.targetHeight = this._.$target.outerHeight();\n            this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n            this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n            if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                this._.$closestTarget = this._.$target;\n                this._.closestTargetPos = this._.i;\n                this._.closestTargetYDiff = this._.targetYDiff;\n                this._.closestTargetOffset = this._.targetOffset;\n                this._.closestTargetHeight = this._.targetHeight;\n            } else {\n                // Getting colder\n                break;\n            }\n        }\n\n        if (!this._.$closestTarget) {\n            return;\n        }\n\n        // Are we hovering above the first row?\n        if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n            this.$insertion.prependTo(this.structure.$container);\n        } else {\n            this._.$closestTargetLi = this._.$closestTarget.parent();\n            this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n            // Is there a next row?\n            if (this._.closestTargetPos < this.$targets.length - 1) {\n                this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n            } else {\n                this._.$nextTargetLi = null;\n                this._.nextTargetLevel = null;\n            }\n\n            // Are we hovering between this row and the next one?\n            this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n            /**\n             * Scenario 1: Both rows have the same level.\n             *\n             *     * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                if (this._.hoveringBetweenRows) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                        // Position the insertion after the closest target\n                        this.$insertion.insertAfter(this._.$closestTargetLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n\n            /**\n             * Scenario 2: Next row is a child of this one.\n             *\n             *     * Row 1\n             *     ----------------------\n             *         * Row 2\n             */\n\n            else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                    if (this._.hoveringBetweenRows) {\n                        // Position the insertion as the first child of the closest target\n                        this.$insertion.insertBefore(this._.$nextTargetLi);\n                    } else {\n                        this._.$closestTarget.addClass('draghover');\n                        this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                    }\n                }\n            }\n\n            /**\n             * Scenario 3: Next row is a child of a parent node, or there is no next row.\n             *\n             *         * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            else {\n                if (this._.hoveringBetweenRows) {\n                    // Determine which <li> to position the insertion after\n                    this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                    if (Craft.orientation === 'rtl') {\n                        this._.draggeeX += this.$helperLi.width();\n                    }\n\n                    this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                    this._.$closestParentLi = null;\n                    this._.closestParentLiXDiff = null;\n                    this._.closestParentLevel = null;\n\n                    for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                        this._.$parentLi = $(this._.$parentLis[this._.i]);\n                        this._.parentLiX = this._.$parentLi.offset().left;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.parentLiX += this._.$parentLi.width();\n                        }\n\n                        this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                        this._.parentLevel = this._.$parentLi.data('level');\n\n                        if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                            !this._.$closestParentLi || (\n                                this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                            )\n                        )) {\n                            this._.$closestParentLi = this._.$parentLi;\n                            this._.closestParentLiXDiff = this._.parentLiXDiff;\n                            this._.closestParentLevel = this._.parentLevel;\n                        }\n                    }\n\n                    if (this._.$closestParentLi) {\n                        this.$insertion.insertAfter(this._.$closestParentLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n        }\n    },\n\n    cancelDrag: function() {\n        this.$insertion.remove();\n\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n        }\n\n        this.onMouseUp();\n    },\n\n    onDragStop: function() {\n        // Are we repositioning the draggee?\n        if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n            var $draggeeParent,\n                moved;\n\n            // Are we about to leave the draggee's original parent childless?\n            if (!this.$draggee.siblings().length) {\n                $draggeeParent = this.$draggee.parent();\n            }\n\n            if (this.$insertion.parent().length) {\n                // Make sure the insertion isn't right next to the draggee\n                var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                    this.$insertion.replaceWith(this.$draggee);\n                    moved = true;\n                } else {\n                    this.$insertion.remove();\n                    moved = false;\n                }\n            } else {\n                var $ul = this._.$closestTargetLi.children('ul');\n\n                // Make sure this is a different parent than the draggee's\n                if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                    if (!$ul.length) {\n                        var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                        this.structure.initToggle($toggle);\n\n                        $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                    } else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                        this._.$closestTarget.children('.toggle').trigger('click');\n                    }\n\n                    this.$draggee.appendTo($ul);\n                    moved = true;\n                } else {\n                    moved = false;\n                }\n            }\n\n            // Remove the class either way\n            this._.$closestTarget.removeClass('draghover');\n\n            if (moved) {\n                // Now deal with the now-childless parent\n                if ($draggeeParent) {\n                    this.structure._removeUl($draggeeParent);\n                }\n\n                // Has the level changed?\n                var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                var animateCss;\n\n                if (newLevel != this.$draggee.data('level')) {\n                    // Correct the helper's padding if moving to/from level 1\n                    if (this.$draggee.data('level') == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = 38;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    } else if (newLevel == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    }\n\n                    this.setLevel(this.$draggee, newLevel);\n                }\n\n                // Make it real\n                var $element = this.$draggee.children('.row').children('.element');\n\n                var data = {\n                    structureId: this.structure.id,\n                    elementId: $element.data('id'),\n                    siteId: $element.data('site-id'),\n                    prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                    parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                };\n\n                Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                    }\n                });\n            }\n        }\n\n        // Animate things back into place\n        this.$draggee.velocity('stop').removeClass('hidden').velocity({\n            height: this.draggeeHeight\n        }, 'fast', $.proxy(function() {\n            this.$draggee.css('height', 'auto');\n        }, this));\n\n        this.returnHelpersToDraggees();\n\n        this.base();\n    },\n\n    setLevel: function($li, level) {\n        $li.data('level', level);\n\n        var indent = this.structure.getIndent(level);\n\n        var css = {};\n        css['margin-' + Craft.left] = '-' + indent + 'px';\n        css['padding-' + Craft.left] = indent + 'px';\n        this.$draggee.children('.row').css(css);\n\n        var $childLis = $li.children('ul').children();\n\n        for (var i = 0; i < $childLis.length; i++) {\n            this.setLevel($($childLis[i]), level + 1);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n    tableView: null,\n    structureId: null,\n    maxLevels: null,\n\n    _basePadding: null,\n    _helperMargin: null,\n\n    _$firstRowCells: null,\n    _$titleHelperCell: null,\n\n    _titleHelperCellOuterWidth: null,\n\n    _ancestors: null,\n    _updateAncestorsFrame: null,\n    _updateAncestorsProxy: null,\n\n    _draggeeLevel: null,\n    _draggeeLevelDelta: null,\n    draggingLastElements: null,\n    _loadingDraggeeLevelDelta: false,\n\n    _targetLevel: null,\n    _targetLevelBounds: null,\n\n    _positionChanged: null,\n\n    /**\n     * Constructor\n     */\n    init: function(tableView, $elements, settings) {\n        this.tableView = tableView;\n        this.structureId = this.tableView.$table.data('structure-id');\n        this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n        this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n        this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n        settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n            handle: '.move',\n            collapseDraggees: true,\n            singleHelper: true,\n            helperSpacingY: 2,\n            magnetStrength: 4,\n            helper: $.proxy(this, 'getHelper'),\n            helperLagBase: 1.5,\n            axis: Garnish.Y_AXIS\n        });\n\n        this.base($elements, settings);\n    },\n\n    /**\n     * Returns the draggee rows (including any descendent rows).\n     */\n    findDraggee: function() {\n        this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n        this._draggeeLevelDelta = 0;\n\n        var $draggee = $(this.$targetItem),\n            $nextRow = this.$targetItem.next();\n\n        while ($nextRow.length) {\n            // See if this row is a descendant of the draggee\n            var nextRowLevel = $nextRow.data('level');\n\n            if (nextRowLevel <= this._draggeeLevel) {\n                break;\n            }\n\n            // Is this the deepest descendant we've seen so far?\n            var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n            if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                this._draggeeLevelDelta = nextRowLevelDelta;\n            }\n\n            // Add it and prep the next row\n            $draggee = $draggee.add($nextRow);\n            $nextRow = $nextRow.next();\n        }\n\n        // Are we dragging the last elements on the page?\n        this.draggingLastElements = !$nextRow.length;\n\n        // Do we have a maxLevels to enforce,\n        // and does it look like this draggee has descendants we don't know about yet?\n        if (\n            this.maxLevels &&\n            this.draggingLastElements &&\n            this.tableView.getMorePending()\n        ) {\n            // Only way to know the true descendant level delta is to ask PHP\n            this._loadingDraggeeLevelDelta = true;\n\n            var data = this._getAjaxBaseData(this.$targetItem);\n\n            Craft.postActionRequest('structures/get-element-level-delta', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this._loadingDraggeeLevelDelta = false;\n\n                    if (this.dragging) {\n                        this._draggeeLevelDelta = response.delta;\n                        this.drag(false);\n                    }\n                }\n            }, this));\n        }\n\n        return $draggee;\n    },\n\n    /**\n     * Returns the drag helper.\n     */\n    getHelper: function($helperRow) {\n        var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n            $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n            $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the column widths\n        this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n        var $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            var $helperCell = $($helperCells[i]);\n\n            // Skip the checkbox cell\n            if ($helperCell.hasClass('checkbox-cell')) {\n                $helperCell.remove();\n                continue;\n            }\n\n            // Hard-set the cell widths\n            var $firstRowCell = $(this._$firstRowCells[i]);\n            var width = $firstRowCell[0].getBoundingClientRect().width;\n\n            $firstRowCell.css('width', width + 'px');\n            $helperCell.css('width', width + 'px');\n\n            // Is this the title cell?\n            if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                this._$titleHelperCell = $helperCell;\n\n                var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                this._titleHelperCellOuterWidth = width;\n\n                $helperCell.css('padding-' + Craft.left, this._basePadding);\n            }\n        }\n\n        return $outerContainer;\n    },\n\n    /**\n     * Returns whether the draggee can be inserted before a given item.\n     */\n    canInsertBefore: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item.prev(), $item) !== false);\n    },\n\n    /**\n     * Returns whether the draggee can be inserted after a given item.\n     */\n    canInsertAfter: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item, $item.next()) !== false);\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        // Get the initial set of ancestors, before the item gets moved\n        this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n        // Set the initial target level bounds\n        this._setTargetLevelBounds();\n\n        // Check to see if we should load more elements now\n        this.tableView.maybeLoadMore();\n\n        this.base();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.base();\n        this._updateIndent();\n    },\n\n    /**\n     * On Insertion Point Change\n     */\n    onInsertionPointChange: function() {\n        this._setTargetLevelBounds();\n        this._updateAncestorsBeforeRepaint();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this._positionChanged = false;\n        this.base();\n\n        // Update the draggee's padding if the position just changed\n        // ---------------------------------------------------------------------\n\n        if (this._targetLevel != this._draggeeLevel) {\n            var levelDiff = this._targetLevel - this._draggeeLevel;\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                var $draggee = $(this.$draggee[i]),\n                    oldLevel = $draggee.data('level'),\n                    newLevel = oldLevel + levelDiff,\n                    padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                $draggee.data('level', newLevel);\n                $draggee.find('.element').data('level', newLevel);\n                $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n            }\n\n            this._positionChanged = true;\n        }\n\n        // Keep in mind this could have also been set by onSortChange()\n        if (this._positionChanged) {\n            // Tell the server about the new position\n            // -----------------------------------------------------------------\n\n            var data = this._getAjaxBaseData(this.$draggee);\n\n            // Find the previous sibling/parent, if there is one\n            var $prevRow = this.$draggee.first().prev();\n\n            while ($prevRow.length) {\n                var prevRowLevel = $prevRow.data('level');\n\n                if (prevRowLevel == this._targetLevel) {\n                    data.prevId = $prevRow.data('id');\n                    break;\n                }\n\n                if (prevRowLevel < this._targetLevel) {\n                    data.parentId = $prevRow.data('id');\n\n                    // Is this row collapsed?\n                    var $toggle = $prevRow.find('> th > .toggle');\n\n                    if (!$toggle.hasClass('expanded')) {\n                        // Make it look expanded\n                        $toggle.addClass('expanded');\n\n                        // Add a temporary row\n                        var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                        // Remove the target item\n                        if (this.tableView.elementSelect) {\n                            this.tableView.elementSelect.removeItems(this.$targetItem);\n                        }\n\n                        this.removeItems(this.$targetItem);\n                        this.$targetItem.remove();\n                        this.tableView._totalVisible--;\n                    }\n\n                    break;\n                }\n\n                $prevRow = $prevRow.prev();\n            }\n\n            Craft.postActionRequest('structures/move-element', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    if (!response.success) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        this.tableView.elementIndex.updateElements();\n                        return;\n                    }\n                    Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                    this.onPositionChange();\n\n                    // Were we waiting on this to complete so we can expand the new parent?\n                    if ($spinnerRow && $spinnerRow.parent().length) {\n                        $spinnerRow.remove();\n                        this.tableView._expandElement($toggle, true);\n                    }\n\n                    // See if we should run any pending tasks\n                    Craft.cp.runQueue();\n                }\n            }, this));\n        }\n    },\n\n    onSortChange: function() {\n        if (this.tableView.elementSelect) {\n            this.tableView.elementSelect.resetItemOrder();\n        }\n\n        this._positionChanged = true;\n        this.base();\n    },\n\n    onPositionChange: function() {\n        Garnish.requestAnimationFrame($.proxy(function() {\n            this.trigger('positionChange');\n            this.settings.onPositionChange();\n        }, this));\n    },\n\n    onReturnHelpersToDraggees: function() {\n        this._$firstRowCells.css('width', '');\n\n        // If we were dragging the last elements on the page and ended up loading any additional elements in,\n        // there could be a gap between the last draggee item and whatever now comes after it.\n        // So remove the post-draggee elements and possibly load up the next batch.\n        if (this.draggingLastElements && this.tableView.getMorePending()) {\n            // Update the element index's record of how many items are actually visible\n            this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n            var $postDraggeeItems = this.$draggee.last().nextAll();\n\n            if ($postDraggeeItems.length) {\n                this.removeItems($postDraggeeItems);\n                $postDraggeeItems.remove();\n                this.tableView.maybeLoadMore();\n            }\n        }\n\n        this.base();\n    },\n\n    /**\n     * Returns the min and max levels that the draggee could occupy between\n     * two given rows, or false if it’s not going to work out.\n     */\n    _getLevelBounds: function($prevRow, $nextRow) {\n        // Can't go any lower than the next row, if there is one\n        if ($nextRow && $nextRow.length) {\n            this._getLevelBounds._minLevel = $nextRow.data('level');\n        } else {\n            this._getLevelBounds._minLevel = 1;\n        }\n\n        // Can't go any higher than the previous row + 1\n        if ($prevRow && $prevRow.length) {\n            this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n        } else {\n            this._getLevelBounds._maxLevel = 1;\n        }\n\n        // Does this structure have a max level?\n        if (this.maxLevels) {\n            // Make sure it's going to fit at all here\n            if (\n                this._getLevelBounds._minLevel != 1 &&\n                this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n            ) {\n                return false;\n            }\n\n            // Limit the max level if we have to\n            if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                    this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                }\n            }\n        }\n\n        return {\n            min: this._getLevelBounds._minLevel,\n            max: this._getLevelBounds._maxLevel\n        };\n    },\n\n    /**\n     * Determines the min and max possible levels at the current draggee's position.\n     */\n    _setTargetLevelBounds: function() {\n        this._targetLevelBounds = this._getLevelBounds(\n            this.$draggee.first().prev(),\n            this.$draggee.last().next()\n        );\n    },\n\n    /**\n     * Determines the target level based on the current mouse position.\n     */\n    _updateIndent: function(forcePositionChange) {\n        // Figure out the target level\n        // ---------------------------------------------------------------------\n\n        // How far has the cursor moved?\n        this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n        // Flip that if this is RTL\n        if (Craft.orientation === 'rtl') {\n            this._updateIndent._mouseDist *= -1;\n        }\n\n        // What is that in indentation levels?\n        this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // Combine with the original level to get the new target level\n        this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n        // Contain it within our min/max levels\n        if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n            this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n            this._updateIndent._targetLevel = this._targetLevelBounds.min;\n        } else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n            this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n            this._updateIndent._targetLevel = this._targetLevelBounds.max;\n        }\n\n        // Has the target level changed?\n        if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n            // Target level is changing, so update the ancestors\n            this._updateAncestorsBeforeRepaint();\n        }\n\n        // Update the UI\n        // ---------------------------------------------------------------------\n\n        // How far away is the cursor from the exact target level distance?\n        this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // What's the magnet impact of that?\n        this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n        // Put it on a leash\n        if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n            this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n        }\n\n        // Apply the new margin/width\n        this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n        this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n        this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n    },\n\n    /**\n     * Returns the indent size for a given level\n     */\n    _getLevelIndent: function(level) {\n        return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n    },\n\n    /**\n     * Returns the base data that should be sent with StructureController Ajax requests.\n     */\n    _getAjaxBaseData: function($row) {\n        return {\n            structureId: this.structureId,\n            elementId: $row.data('id'),\n            siteId: $row.find('.element:first').data('site-id')\n        };\n    },\n\n    /**\n     * Returns a row's ancestor rows\n     */\n    _getAncestors: function($row, targetLevel) {\n        this._getAncestors._ancestors = [];\n\n        if (targetLevel != 0) {\n            this._getAncestors._level = targetLevel;\n            this._getAncestors._$prevRow = $row.prev();\n\n            while (this._getAncestors._$prevRow.length) {\n                if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                    this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                    this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                    // Did we just reach the top?\n                    if (this._getAncestors._level == 0) {\n                        break;\n                    }\n                }\n\n                this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n            }\n        }\n\n        return this._getAncestors._ancestors;\n    },\n\n    /**\n     * Prepares to have the ancestors updated before the screen is repainted.\n     */\n    _updateAncestorsBeforeRepaint: function() {\n        if (this._updateAncestorsFrame) {\n            Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n        }\n\n        if (!this._updateAncestorsProxy) {\n            this._updateAncestorsProxy = $.proxy(this, '_updateAncestors');\n        }\n\n        this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestorsProxy);\n    },\n\n    _updateAncestors: function() {\n        this._updateAncestorsFrame = null;\n\n        // Update the old ancestors\n        // -----------------------------------------------------------------\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n            // One less descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n            // Is it now childless?\n            if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                // Remove its toggle\n                this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n            }\n        }\n\n        // Update the new ancestors\n        // -----------------------------------------------------------------\n\n        this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n            // One more descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n            // Is this its first child?\n            if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                // Create its toggle\n                $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                    .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n            }\n        }\n\n        this._ancestors = this._updateAncestors._newAncestors;\n\n        delete this._updateAncestors._i;\n        delete this._updateAncestors._$ancestor;\n        delete this._updateAncestors._newAncestors;\n    }\n}, {\n    HELPER_MARGIN: 0,\n    LEVEL_INDENT: 44,\n    MAX_GIVE: 22,\n\n    defaults: {\n        onPositionChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend({\n    $table: null,\n    $selectedSortHeader: null,\n\n    structureTableSort: null,\n\n    _totalVisiblePostStructureTableDraggee: null,\n    _morePendingPostStructureTableDraggee: false,\n\n    getElementContainer: function() {\n        // Save a reference to the table\n        this.$table = this.$container.find('table:first');\n        return this.$table.children('tbody:first');\n    },\n\n    afterInit: function() {\n        // Set the sort header\n        this.initTableHeaders();\n\n        // Create the Structure Table Sorter\n        if (\n            this.elementIndex.settings.context === 'index' &&\n            this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n            Garnish.hasAttr(this.$table, 'data-structure-id')\n        ) {\n            this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements(), {\n                onSortChange: $.proxy(this, '_onStructureTableSortChange')\n            });\n        } else {\n            this.structureTableSort = null;\n        }\n\n        // Handle expand/collapse toggles for Structures\n        if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n            this.addListener(this.$elementContainer, 'click', function(ev) {\n                var $target = $(ev.target);\n\n                if ($target.hasClass('toggle')) {\n                    if (this._collapseElement($target) === false) {\n                        this._expandElement($target);\n                    }\n                }\n            });\n        }\n    },\n\n    initTableHeaders: function() {\n        var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n            $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n        for (var i = 0; i < $tableHeaders.length; i++) {\n            var $header = $tableHeaders.eq(i),\n                attr = $header.attr('data-attribute');\n\n            // Is this the selected sort attribute?\n            if (attr === selectedSortAttr) {\n                this.$selectedSortHeader = $header;\n                var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                $header\n                    .addClass('ordered ' + selectedSortDir)\n                    .on('click', $.proxy(this, '_handleSelectedSortHeaderClick'));\n            } else {\n                // Is this attribute sortable?\n                var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                if ($sortAttribute.length) {\n                    $header\n                        .addClass('orderable')\n                        .on('click', $.proxy(this, '_handleUnselectedSortHeaderClick'));\n                }\n            }\n        }\n    },\n\n    isVerticalList: function() {\n        return true;\n    },\n\n    getTotalVisible: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._totalVisiblePostStructureTableDraggee;\n        } else {\n            return this._totalVisible;\n        }\n    },\n\n    setTotalVisible: function(totalVisible) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._totalVisiblePostStructureTableDraggee = totalVisible;\n        } else {\n            this._totalVisible = totalVisible;\n        }\n    },\n\n    getMorePending: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._morePendingPostStructureTableDraggee;\n        } else {\n            return this._morePending;\n        }\n    },\n\n    setMorePending: function(morePending) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._morePendingPostStructureTableDraggee = morePending;\n        } else {\n            this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n        }\n    },\n\n    getLoadMoreParams: function() {\n        var params = this.base();\n\n        // If we are dragging the last elements on the page,\n        // tell the controller to only load elements positioned after the draggee.\n        if (this._isStructureTableDraggingLastElements()) {\n            params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n        }\n\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        this.base($newElements);\n\n        if (this.structureTableSort) {\n            this.structureTableSort.addItems($newElements);\n        }\n\n        Craft.cp.updateResponsiveTables();\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            params: {\n                includeTableAttributesForSource: this.elementIndex.sourceKey\n            },\n            onSaveElement: $.proxy(function(response) {\n                if (response.tableAttributes) {\n                    this._updateTableAttributes($element, response.tableAttributes);\n                }\n            }, this),\n            elementIndex: this.elementIndex\n        });\n    },\n\n    _collapseElement: function($toggle, force) {\n        if (!force && !$toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.removeClass('expanded');\n\n        // Find and remove the descendant rows\n        var $row = $toggle.parent().parent(),\n            id = $row.data('id'),\n            level = $row.data('level'),\n            $nextRow = $row.next();\n\n        while ($nextRow.length) {\n            if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                if ($nextRow.data('level') <= level) {\n                    break;\n                }\n\n                if (this.elementSelect) {\n                    this.elementSelect.removeItems($nextRow);\n                }\n\n                if (this.structureTableSort) {\n                    this.structureTableSort.removeItems($nextRow);\n                }\n\n                this._totalVisible--;\n            }\n\n            var $nextNextRow = $nextRow.next();\n            $nextRow.remove();\n            $nextRow = $nextNextRow;\n        }\n\n        // Remember that this row should be collapsed\n        if (!this.elementIndex.instanceState.collapsedElementIds) {\n            this.elementIndex.instanceState.collapsedElementIds = [];\n        }\n\n        this.elementIndex.instanceState.collapsedElementIds.push(id);\n        this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n        // Bottom of the index might be viewable now\n        this.maybeLoadMore();\n    },\n\n    _expandElement: function($toggle, force) {\n        if (!force && $toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.addClass('expanded');\n\n        // Remove this element from our list of collapsed elements\n        if (this.elementIndex.instanceState.collapsedElementIds) {\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n            if (index !== -1) {\n                this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                // Add a temporary row\n                var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                // Load the nested elements\n                var params = $.extend(true, {}, this.settings.params);\n                params.criteria.descendantOf = id;\n\n                Craft.postActionRequest('element-indexes/get-more-elements', params, $.proxy(function(response, textStatus) {\n                    // Do we even care about this anymore?\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n\n                    if (textStatus === 'success') {\n                        var $newElements = $(response.html);\n\n                        // Are there more descendants we didn't get in this batch?\n                        var totalVisible = (this._totalVisible + $newElements.length),\n                            morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                        if (morePending) {\n                            // Remove all the elements after it\n                            var $nextRows = $spinnerRow.nextAll();\n\n                            if (this.elementSelect) {\n                                this.elementSelect.removeItems($nextRows);\n                            }\n\n                            if (this.structureTableSort) {\n                                this.structureTableSort.removeItems($nextRows);\n                            }\n\n                            $nextRows.remove();\n                            totalVisible -= $nextRows.length;\n                        } else {\n                            // Maintain the current 'more' status\n                            morePending = this._morePending;\n                        }\n\n                        $spinnerRow.replaceWith($newElements);\n                        this.thumbLoader.load($newElements);\n\n                        if (this.elementIndex.actions || this.settings.selectable) {\n                            this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                            this.elementIndex.updateActionTriggers();\n                        }\n\n                        if (this.structureTableSort) {\n                            this.structureTableSort.addItems($newElements);\n                        }\n\n                        Craft.appendHeadHtml(response.headHtml);\n                        Craft.appendFootHtml(response.footHtml);\n                        Craft.cp.updateResponsiveTables();\n\n                        this.setTotalVisible(totalVisible);\n                        this.setMorePending(morePending);\n\n                        // Is there room to load more right now?\n                        this.maybeLoadMore();\n                    }\n                }, this));\n            }\n        }\n    },\n\n    _createSpinnerRowAfter: function($row) {\n        return $(\n            '<tr data-spinnerrow>' +\n            '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n            '<div class=\"spinner\"/>' +\n            '</td>' +\n            '</tr>'\n        ).insertAfter($row);\n    },\n\n    _isStructureTableDraggingLastElements: function() {\n        return (\n            this.structureTableSort &&\n            this.structureTableSort.dragging &&\n            this.structureTableSort.draggingLastElements\n        );\n    },\n\n    _handleSelectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        // Reverse the sort direction\n        var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n            newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n        this.elementIndex.setSortDirection(newSortDir);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleUnselectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        var attr = $header.attr('data-attribute');\n\n        this.elementIndex.setSortAttribute(attr);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleSortHeaderClick: function(ev, $header) {\n        if (this.$selectedSortHeader) {\n            this.$selectedSortHeader.removeClass('ordered asc desc');\n        }\n\n        $header.removeClass('orderable').addClass('ordered loading');\n        this.elementIndex.storeSortAttributeAndDirection();\n        this.elementIndex.updateElements();\n\n        // No need for two spinners\n        this.elementIndex.setIndexAvailable();\n    },\n\n    _updateTableAttributes: function($element, tableAttributes) {\n        var $tr = $element.closest('tr');\n\n        for (var attr in tableAttributes) {\n            if (!tableAttributes.hasOwnProperty(attr)) {\n                continue;\n            }\n\n            $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend({\n    searchTimeout: null,\n    searchMenu: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addTagInput: null,\n    $spinner: null,\n\n    _ignoreBlur: false,\n\n    init: function(settings) {\n        // Normalize the settings\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n        this.$addTagInput = this.$container.children('.add').children('.text');\n        this.$spinner = this.$addTagInput.next();\n\n        this.addListener(this.$addTagInput, 'input', $.proxy(function() {\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout($.proxy(this, 'searchForTags'), 500);\n        }, this));\n\n        this.addListener(this.$addTagInput, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n            }\n\n            let $option;\n\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options.filter('.hover'));\n                    }\n                    return;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $nextOption = $hoverOption.parent().nextAll().find('a:not(.disabled)').first();\n                            if ($nextOption.length) {\n                                this.focusOption($nextOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(0));\n                        }\n                    }\n                    return;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $prevOption = $hoverOption.parent().prevAll().find('a:not(.disabled)').last();\n                            if ($prevOption.length) {\n                                this.focusOption($prevOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(this.searchMenu.$options.length - 1));\n                        }\n                    }\n                    return;\n                }\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'focus', function() {\n            if (this.searchMenu) {\n                this.searchMenu.show();\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'blur', function() {\n            if (this._ignoreBlur) {\n                this._ignoreBlur = false;\n                return;\n            }\n\n            setTimeout($.proxy(function() {\n                if (this.searchMenu) {\n                    this.searchMenu.hide();\n                }\n            }, this), 1);\n        });\n    },\n\n    focusOption: function($option) {\n        this.searchMenu.$options.removeClass('hover');\n        $option.addClass('hover');\n        this.searchMenu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n    },\n\n    // No \"add\" button\n    getAddElementsBtn: $.noop,\n\n    getElementSortAxis: function() {\n        return null;\n    },\n\n    searchForTags: function() {\n        if (this.searchMenu) {\n            this.killSearchMenu();\n        }\n\n        var val = this.$addTagInput.val();\n\n        if (val) {\n            this.$spinner.removeClass('hidden');\n\n            var excludeIds = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                var id = $(this.$elements[i]).data('id');\n\n                if (id) {\n                    excludeIds.push(id);\n                }\n            }\n\n            if (this.settings.sourceElementId) {\n                excludeIds.push(this.settings.sourceElementId);\n            }\n\n            var data = {\n                search: this.$addTagInput.val(),\n                tagGroupId: this.settings.tagGroupId,\n                excludeIds: excludeIds\n            };\n\n            Craft.postActionRequest('tags/search-for-tags', data, $.proxy(function(response, textStatus) {\n                // Just in case\n                if (this.searchMenu) {\n                    this.killSearchMenu();\n                }\n\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                        $ul = $('<ul/>').appendTo($menu);\n\n                    var $li;\n\n                    for (var i = 0; i < response.tags.length; i++) {\n                        $li = $('<li/>')\n                            .appendTo($ul);\n\n                        $('<a data-icon=\"tag\"/>')\n                            .appendTo($li)\n                            .text(response.tags[i].title)\n                            .data('id', response.tags[i].id)\n                            .addClass(response.tags[i].exclude ? 'disabled' : '');\n                    }\n\n                    if (!response.exactMatch) {\n                        $li = $('<li/>').appendTo($ul);\n                        $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                    }\n\n                    $ul.find('a:not(.disabled):first').addClass('hover');\n\n                    this.searchMenu = new Garnish.Menu($menu, {\n                        attachToElement: this.$addTagInput,\n                        onOptionSelect: $.proxy(this, 'selectTag')\n                    });\n\n                    this.addListener($menu, 'mousedown', $.proxy(function() {\n                        this._ignoreBlur = true;\n                    }, this));\n\n                    this.searchMenu.show();\n                }\n            }, this));\n        } else {\n            this.$spinner.addClass('hidden');\n        }\n    },\n\n    selectTag: function(option) {\n        var $option = $(option);\n\n        if ($option.hasClass('disabled')) {\n            return;\n        }\n\n        var id = $option.data('id');\n        var title = $option.text();\n\n        var $element = $('<div/>', {\n            'class': 'element small removable',\n            'data-id': id,\n            'data-site-id': this.settings.targetSiteId,\n            'data-label': title,\n            'data-editable': '1'\n        }).appendTo(this.$elementsContainer);\n\n        var $input = $('<input/>', {\n            'type': 'hidden',\n            'name': this.settings.name + '[]',\n            'value': id\n        }).appendTo($element);\n\n        $('<a/>', {\n            'class': 'delete icon',\n            'title': Craft.t('app', 'Remove')\n        }).appendTo($element);\n\n        var $titleContainer = $('<div/>', {\n            'class': 'label'\n        }).appendTo($element);\n\n        $('<span/>', {\n            'class': 'title',\n            text: title\n        }).appendTo($titleContainer);\n\n        var margin = -($element.outerWidth() + 10);\n        this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addTagInput.velocity(animateCss, 'fast');\n\n        this.$elements = this.$elements.add($element);\n\n        this.addElements($element);\n\n        this.killSearchMenu();\n        this.$addTagInput.val('');\n        this.$addTagInput.trigger('focus');\n\n        if (!id) {\n            // We need to create the tag first\n            $element.addClass('loading disabled');\n\n            var data = {\n                groupId: this.settings.tagGroupId,\n                title: title\n            };\n\n            Craft.postActionRequest('tags/create-tag', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success' && response.success) {\n                    $element.attr('data-id', response.id);\n                    $input.val(response.id);\n\n                    $element.removeClass('loading disabled');\n                } else {\n                    this.removeElement($element);\n\n                    if (textStatus === 'success') {\n                        // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                }\n            }, this));\n        }\n    },\n\n    killSearchMenu: function() {\n        this.searchMenu.hide();\n        this.searchMenu.destroy();\n        this.searchMenu = null;\n    }\n}, {\n    defaults: {\n        tagGroupId: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend({\n    getElementContainer: function() {\n        return this.$container.children('ul');\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            config = $.extend({\n                autocomplete: false,\n            }, config);\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    inputmode: config.inputmode,\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: typeof config.autocomplete === 'boolean' ? (config.autocomplete ? 'on' : 'off') : config.autocomplete,\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            } else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            if (!config.id) {\n                config.id = 'text' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || 'copytext' + Math.floor(Math.random() * 1000000000);\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n                'aria-label': Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n                $input[0].setSelectionRange(0, 0);\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            if (!config.id) {\n                config.id = 'copytext' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            if (!config.id) {\n                config.id = 'textarea' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html': option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'select' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                html: config.label,\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            } else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            if (!config.id) {\n                config.id = 'checkbox' + Math.floor(Math.random() * 1000000000);\n            }\n\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: `${config.id}-field`,\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: allChecked || (config.values || []).includes(option.value),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            config.fieldset = true;\n            if (!config.id) {\n                config.id = 'checkboxselect' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<button/>', {\n                'type': 'button',\n                'class': 'lightswitch',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'checkbox',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            if (!config.id) {\n                config.id = 'lightswitch' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            var id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            var containerId = config.containerId || id + '-container';\n            var name = config.name || null;\n            var value = config.value || null;\n            var small = config.small || false;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                id: containerId,\n                'class': 'flex color-container'\n            });\n\n            var $colorPreviewContainer = $('<div/>', {\n                'class': 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            var $colorPreview = $('<div/>', {\n                'class': 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            var $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: value,\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            if (!config.id) {\n                config.id = 'color' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000)) + '-date';\n            var name = config.name || null;\n            var inputName = name ? name + '[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            if (!config.id) {\n                config.id = 'date' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate: null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                let startDate = $startDate.datepicker('getDate');\n                let endDate = $endDate.datepicker('getDate');\n                let startTime = startDate ? startDate.getTime() : null;\n                let endTime = endDate ? endDate.getTime() : null;\n\n                let $options = $ul.find('a');\n                let $option;\n                let foundOption = false;\n\n                for (let i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            let btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                class: btnClasses,\n                'data-icon': 'date',\n                text: Craft.t('app', 'All'),\n            });\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000)) + '-time';\n            var name = config.name || null;\n            var inputName = name ? name + '[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours() * 3600 + value.getMinutes() * 60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            if (!config.id) {\n                config.id = 'time' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $(config.fieldset ? '<fieldset/>' : '<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                var $label = $(config.fieldset ? '<legend/>' : '<label/>', {\n                    'id': config.labelId || (config.id ? `${config.id}-${config.fieldset ? 'legend' : 'label'}` : null),\n                    'class': (config.required ? 'required' : null),\n                    'for': !config.fieldset && config.id,\n                    text: label\n                }).appendTo($heading);\n            }\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend({\n    uploader: null,\n    allowedKinds: null,\n    $element: null,\n    settings: null,\n    _rejectedFiles: {},\n    _extensionList: null,\n    _totalFileCounter: 0,\n    _validFileCounter: 0,\n\n    init: function($element, settings) {\n        this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n        this.$element = $element;\n        this.allowedKinds = null;\n        this._extensionList = null;\n        this._totalFileCounter = 0;\n        this._validFileCounter = 0;\n\n        settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n        var events = settings.events;\n        delete settings.events;\n\n        if (settings.allowedKinds && settings.allowedKinds.length) {\n            if (typeof settings.allowedKinds === 'string') {\n                settings.allowedKinds = [settings.allowedKinds];\n            }\n\n            this.allowedKinds = settings.allowedKinds;\n            delete settings.allowedKinds;\n        }\n\n        settings.autoUpload = false;\n\n        this.uploader = this.$element.fileupload(settings);\n        for (var event in events) {\n            if (!events.hasOwnProperty(event)) {\n                continue;\n            }\n\n            this.uploader.on(event, events[event]);\n        }\n\n        this.settings = settings;\n\n        this.uploader.on('fileuploadadd', $.proxy(this, 'onFileAdd'));\n    },\n\n    /**\n     * Set uploader parameters.\n     */\n    setParams: function(paramObject) {\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        this.uploader.fileupload('option', {formData: paramObject});\n    },\n\n    /**\n     * Get the number of uploads in progress.\n     */\n    getInProgress: function() {\n        return this.uploader.fileupload('active');\n    },\n\n    /**\n     * Return true, if this is the last upload.\n     */\n    isLastUpload: function() {\n        // Processing the last file or not processing at all.\n        return this.getInProgress() < 2;\n    },\n\n    /**\n     * Called on file add.\n     */\n    onFileAdd: function(e, data) {\n        e.stopPropagation();\n\n        var validateExtension = false;\n\n        if (this.allowedKinds) {\n            if (!this._extensionList) {\n                this._createExtensionList();\n            }\n\n            validateExtension = true;\n        }\n\n        // Make sure that file API is there before relying on it\n        data.process().done($.proxy(function() {\n            var file = data.files[0];\n            var pass = true;\n            if (validateExtension) {\n                var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                var fileExtension = matches[1];\n                if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                    pass = false;\n                    this._rejectedFiles.type.push('“' + file.name + '”');\n                }\n            }\n\n            if (file.size > this.settings.maxFileSize) {\n                this._rejectedFiles.size.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            // If the validation has passed for this file up to now, check if we're not hitting any limits\n            if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                this._rejectedFiles.limit.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            if (pass) {\n                this._validFileCounter++;\n                data.submit();\n            }\n\n            if (++this._totalFileCounter === data.originalFiles.length) {\n                this._totalFileCounter = 0;\n                this._validFileCounter = 0;\n                this.processErrorMessages();\n            }\n        }, this));\n\n        return true;\n    },\n\n    /**\n     * Process error messages.\n     */\n    processErrorMessages: function() {\n        var str;\n\n        if (this._rejectedFiles.type.length) {\n            if (this._rejectedFiles.type.length === 1) {\n                str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            } else {\n                str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n            this._rejectedFiles.type = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.size.length) {\n            if (this._rejectedFiles.size.length === 1) {\n                str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n            this._rejectedFiles.size = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.limit.length) {\n            if (this._rejectedFiles.limit.length === 1) {\n                str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n            this._rejectedFiles.limit = [];\n            alert(str);\n        }\n    },\n\n    humanFileSize: function(bytes) {\n        var threshold = 1024;\n\n        if (bytes < threshold) {\n            return bytes + ' B';\n        }\n\n        var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n        var u = -1;\n\n        do {\n            bytes = bytes / threshold;\n            ++u;\n        }\n        while (bytes >= threshold);\n\n        return bytes.toFixed(1) + ' ' + units[u];\n    },\n\n    _createExtensionList: function() {\n        this._extensionList = [];\n\n        for (var i = 0; i < this.allowedKinds.length; i++) {\n            var allowedKind = this.allowedKinds[i];\n\n            if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                    var ext = Craft.fileKinds[allowedKind].extensions[j];\n                    this._extensionList.push(ext);\n                }\n            }\n        }\n    },\n\n    destroy: function() {\n        this.$element.fileupload('destroy');\n        this.base();\n    }\n}, {\n    defaults: {\n        dropZone: null,\n        pasteZone: null,\n        fileInput: null,\n        sequentialUploads: true,\n        maxFileSize: Craft.maxUploadSize,\n        allowedKinds: null,\n        events: {},\n        canAddMoreFiles: null,\n        headers: {'Accept': 'application/json;q=0.9,*/*;q=0.8'},\n        paramName: 'assets-upload'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Make it lowercase\n        sourceVal = sourceVal.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        sourceVal = Craft.asciiString(sourceVal);\n\n        // Handle must start with a letter and end with a letter/number\n        sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n        sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n        // Get the \"words\"\n        var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n        var uriFormat = words.join(Craft.slugWordSeparator);\n\n        if (uriFormat && this.settings.suffix) {\n            uriFormat += this.settings.suffix;\n        }\n\n        return uriFormat;\n    }\n});\n"]}