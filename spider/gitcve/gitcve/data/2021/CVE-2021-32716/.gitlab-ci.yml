variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: "/certs"
    MYSQL_ROOT_PASSWORD: app
    WEB_DOCUMENT_ROOT: $CI_PROJECT_DIR/development/public
    GIT_STRATEGY: clone
    LOG_STDOUT: $CI_PROJECT_DIR/stdout.log
    MYSQL_CMD: mysqld

stages:
    - unit
    - E2E
    - Build
    - Generate docs
    - Security
    - Deploy

include:
    -   local: .gitlab/ci/split.yml

workflow:
    rules:
        # do not run on push
        -   if: '$CI_PIPELINE_SOURCE == "push"'
            when: never
        -   when: always

default:
    image: shopware/development:7.4-composer-2
    before_script:
        - apt-install jq
        - export CI_DEV_BRANCH=$(echo $CI_COMMIT_REF_NAME | cut -d'+' -f2-)
        - zip -rq platform.zip .
        - git clone http://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.shopware.com/shopware/6/product/development.git
        - unzip -q platform.zip -d development/platform/
        - cd development
        - git -C platform checkout --quiet trunk
        - git -C platform checkout --quiet $CI_COMMIT_SHA
        - >
            if [ "$(git ls-remote origin $CI_DEV_BRANCH | wc -l)" == 1 ]; then
              echo "Development Branch: $CI_DEV_BRANCH (explicit)";
              git checkout $CI_DEV_BRANCH;
            elif [ "$(git ls-remote origin $CI_COMMIT_REF_NAME | wc -l)" == 1 ]; then
              echo "Development Branch: $CI_COMMIT_REF_NAME (implicit by same branch name)";
              git checkout $CI_COMMIT_REF_NAME;
            else
              export CI_TARGET_BRANCH_NAME=$(curl -LsS -H "PRIVATE-TOKEN: $CI_GITLAB_API_TOKEN" "https://gitlab.shopware.com/api/v4/projects/$CI_PROJECT_ID/merge_requests?source_branch=$CI_COMMIT_REF_NAME" | jq --raw-output ".[0].target_branch");
              if [ "$(git ls-remote origin $CI_TARGET_BRANCH_NAME | wc -l)" == 1 ]; then
                echo "Development Branch: $CI_TARGET_BRANCH_NAME (implicit by merge request target branch)";
                git checkout $CI_TARGET_BRANCH_NAME;
              else
                echo "Development Branch: trunk (fallback)";
              fi
            fi
        - cp -v dev-ops/gitlab/.psh.yaml.override .
        - /entrypoint supervisord > /dev/null 2>&1 &
    interruptible: true

# stage: unit

PHP Full:
    image: $DEV_IMAGE
    stage: unit
    services:
        -   name: $MYSQL_IMAGE
            alias: mysql
            entrypoint: [ "sh", "-c", "docker-entrypoint.sh $MYSQL_CMD" ]
        -   name: elasticsearch:7.3.0
            alias: elasticsearch
            command: [ "bin/elasticsearch", "-Expack.security.enabled=false", "-Ediscovery.type=single-node" ]
        -   name: swaggerapi/swagger-validator-v2:v2.0.5
            alias: swagger
    variables:
        TEST_SUITES: "administration storefront checkout content framework profiling migration system elasticsearch docs"
    timeout: 1h 00m
    script:
        - ./psh.phar init
        - if [[ ! -h vendor/shopware/platform ]]; then echo 'vendor/shopware/platform should be a symlink'; exit 1; fi
        - mkdir -p build/artifacts/
        # run all code in test env
        - ./psh.phar cache --APP_ENV=test
        - chown -R application:application .
        - curl http://docker.vm:8000/admin
        # the coverage generation writes too much to the disks which causes timeouts if the bandwidth is throttled
        #- if [[ $FEATURE_ALL == 'major' && $DEV_IMAGE =~ 'shopware/development:7.4' ]]; then COVERAGE=true; else COVERAGE=""; fi
        - echo "Coverage $COVERAGE, feature $FEATURE_ALL"
        - ./psh.phar unit --APP_ENV=test --PHP_TEST_COVERAGE="$COVERAGE"
    coverage: '/^\s*Lines:\s*(\d+(?:\.\d+)?%)/'
    artifacts:
        when: always
        paths:
            - development/build/artifacts/phpunit.junit.xml
            - development/var/log/*
            - $CI_PROJECT_DIR/stdout.log
        reports:
            junit: development/build/artifacts/phpunit.junit.xml
    rules:
      - if: '$CI_MERGE_REQUEST_LABELS =~ /.*unit::skip.*/'
        when: never
      - if: '$CI_PIPELINE_SOURCE == "schedule"'
      - if: '$CI_PIPELINE_SOURCE == "pipeline"'
      - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
        changes:
          - "Migration*.php"
          - "**/Migration*.php"
          - "src/Core/Framework/Resources/config/packages/shopware.yaml"
      - if: '$SKIP_ON_MR != "true" && ($CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH =~ /^(trunk|6\..+)$/)'
      - if: '$CI_MERGE_REQUEST_LABELS =~ /.*unit::all.*/'
      - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
        when: manual
        allow_failure: true
    parallel:
        matrix:
            # required until we fix NEXT-15370
            -   MYSQL_IMAGE: mariadb:10.4.18
                DEV_IMAGE: shopware/development:8.0-composer-2
                FEATURE_ALL: ["false", "minor", "major"]
            -   MYSQL_IMAGE:
                    - mysql:5.7
                    - mariadb:10.3.28
                DEV_IMAGE: shopware/development:8.0-composer-2
                FEATURE_ALL: ["false", "minor", "major"]
                SKIP_ON_MR: 'true'
            -   MYSQL_IMAGE:
                    - mysql:8.0.19
                DEV_IMAGE: ["shopware/development:7.4-composer-2", "shopware/development:8.0-composer-2"]
                FEATURE_ALL: ["false", "minor", "major"]
                MYSQL_CMD: 'mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --default-authentication-plugin=mysql_native_password --sql-require-primary-key=ON'
                SKIP_ON_MR: 'true'

# TODOS:
# - replace with minimal image - development is 2GB big! An alpine based one should be around 100MB
PHP Unit coverage:
    image: $DEV_IMAGE
    stage: unit
    services:
        -   name: $MYSQL_IMAGE
            alias: database
            entrypoint: [ "sh", "-c", "docker-entrypoint.sh $MYSQL_CMD" ]
    variables:
        APP_ENV: "test"
        PARATEST_PROCESSES: 4
        MAILER_URL: "null://localhost"
    before_script: []
    script:
        - composer install --optimize-autoloader
        - mkdir -p config/jwt || true
        - bin/shopware system:generate-jwt-secret
        - COVERAGE_OPTIONS="--coverage-text --coverage-cobertura cobertura.xml"
        - PHP_OPTIONS="-d pcov.enabled=1 -d pcov.directory=$PWD/src -d pcov.exclude='~(vendor|Test|node_modules)~'"
        - php $PHP_OPTIONS vendor/bin/paratest
            --passthru-php="$PHP_OPTIONS"
            --configuration phpunit.xml.dist
            --log-junit phpunit.junit.xml
            --testsuite=paratest
            --exclude-group=skip-paratest,needsWebserver
            --processes $PARATEST_PROCESSES
            $COVERAGE_OPTIONS
    coverage: '/^\s*Lines:\s*(\d+(?:\.\d+)?%)/'
    artifacts:
        when: always
        paths:
            - cobertura.xml
        reports:
            junit: phpunit.junit.xml
            cobertura: cobertura.xml
    parallel:
        matrix:
            -   MYSQL_IMAGE: mariadb:10.4.18
                DEV_IMAGE: ["shopware/development:7.4-composer-2"]
                FEATURE_ALL: ["major"]

ESLint (Administration):
    stage: unit
    timeout: 1h 00m
    before_script: []
    script:
        - cd src/Administration/Resources/app/administration
        - npm clean-install
        - npm run lint -- --format junit --output-file eslint.junit.xml
    artifacts:
        reports:
            junit: src/Administration/Resources/app/administration/eslint.junit.xml

ESLint (Storefront):
    stage: unit
    timeout: 1h 00m
    before_script: []
    script:
        - cd src/Storefront/Resources/app/storefront
        - npm clean-install
        - npm run lint:js -- --format junit --output-file eslint.junit.xml
    artifacts:
        reports:
            junit: src/Storefront/Resources/app/storefront/eslint.junit.xml

Stylelint (Administration):
    stage: unit
    timeout: 1h 00m
    before_script: []
    script:
        - cd src/Administration/Resources/app/administration
        - npm clean-install
        - npm run lint:scss -- --custom-formatter 'node_modules/stylelint-junit-formatter' --output-file stylelint.junit.xml
    artifacts:
        reports:
            junit: src/Administration/Resources/app/administration/stylelint.junit.xml

Stylelint (Storefront):
    stage: unit
    timeout: 1h 00m
    before_script: []
    script:
        - cd src/Storefront/Resources/app/storefront
        - npm clean-install
        - npm run lint:scss -- --custom-formatter 'node_modules/stylelint-junit-formatter' --output-file stylelint.junit.xml
    artifacts:
        reports:
            junit: src/Storefront/Resources/app/storefront/stylelint.junit.xml

PHP analysis:
    image: shopware/development:7.4-composer-2
    stage: unit
    services:
        -   name: mysql:5.7
            alias: mysql
    retry:
        max: 2
        when: runner_system_failure
    timeout: 1h 00m
    script:
        - ./psh.phar init
        - if [[ ! -h vendor/shopware/platform ]]; then echo 'vendor/shopware/platform should be a symlink'; exit 1; fi
        - php dev-ops/analyze/generate-composer.php
        - php dev-ops/analyze/vendor/bin/ecs check platform/src --config platform/easy-coding-standard.php
        - php dev-ops/analyze/phpstan-config-generator.php
        - php dev-ops/analyze/vendor/bin/phpstan analyze --autoload-file=dev-ops/analyze/vendor/autoload.php --configuration platform/phpstan.neon --error-format gitlab | tee phpstan-report.json
        - php dev-ops/analyze/vendor/bin/psalm --config=platform/psalm.xml --threads=$(nproc) --show-info=false
        - php bin/console changelog:check
    artifacts:
        reports:
            codequality: development/phpstan-report.json

# jest
Jest (Administration):
    stage: unit
    timeout: 1h 00m
    services:
        -   name: mariadb:10.3.28
            alias: mysql
    script:
        - ./psh.phar init
        - ./psh.phar administration:install-dependencies
        - ./psh.phar administration:unit
    coverage: '/^\s?All files[^|]*\|[^|]*\s+([\d\.]+)/'
    artifacts:
        when: always
        paths:
            - development/build/artifacts/jest
        reports:
            junit: development/build/artifacts/jest/administration.junit.xml
            cobertura: development/build/artifacts/jest/cobertura-coverage.xml

Jest (Storefront):
    stage: unit
    timeout: 1h 00m
    variables:
        PROJECT_ROOT: $CI_PROJECT_DIR/development
    services:
        -   name: mariadb:10.3.28
            alias: mysql
    script:
        - ./psh.phar init
        - ./psh.phar storefront:install-dependencies
        - npm --prefix vendor/shopware/platform/src/Storefront/Resources/app/storefront/ run unit
    coverage: '/^\s?All files[^|]*\|[^|]*\s+([\d\.]+)/'
    artifacts:
        reports:
            junit: development/build/artifacts/storefront.junit.xml

# snippets

Validate snippets:
    only:
        changes:
            - src/**/snippet/**/*.json
    stage: unit
    timeout: 1h 00m
    services:
        -   name: mariadb:10.3.28
            alias: mysql
    script:
        - ./psh.phar init
        - php bin/console snippets:validate

# Stage: E2E

E2E:
    timeout: 2h 00m
    stage: E2E
    needs: [ESLint (Administration), ESLint (Storefront)]
    dependencies: []
    services:
        -   name: docker:18.09.7-dind
            alias: docker
        -   name: mariadb:10.3.28
            alias: mysql
    script:
        - mkdir -p $HOME/.docker
        - echo "$DOCKER_AUTH_CONFIG" > $HOME/.docker/config.json
        - docker login
        - rm $HOME/.docker/config.json
        - mkdir -p config/packages/
        - cp platform/src/Core/Framework/Resources/config/packages/e2e/e2e.yaml config/packages/shopware.yaml
        - ./psh.phar init --APP_ENV="prod"
        - ./psh.phar administration:init --APP_ENV="prod"
        - ./psh.phar storefront:init --APP_ENV="prod" --DB_NAME="shopware_e2e"
        - ./psh.phar e2e:dump-db --APP_ENV="prod"
        - E2E_BASE_PATH=vendor/shopware/platform/src/${SECTION}/Resources/app/$(echo ${SECTION} | tr '[:upper:]' '[:lower:]')/test/e2e
        - npm install -g npm@6.14.11
        - npm i @shopware-ag/e2e-testsuite-platform@2.0.0-beta.4 --prefix $E2E_BASE_PATH
        - forever start ${E2E_BASE_PATH}/node_modules/@shopware-ag/e2e-testsuite-platform/routes/cypress.js
        - chown -R 1000:1000 .
        - CYPRESS_CMD="cypress run"
        - if [[ $cypress_usePercy = "true" ]]; then export CYPRESS_CMD="npx percy exec -- cypress run"; npm install --save-dev @percy/cypress; fi
        - FULL_CYPRESS_CMD="npm install --production --prefix /e2e && export PERCY_TOKEN=$PERCY_TOKEN && $CYPRESS_CMD --browser chrome --project /e2e --config baseUrl=http://docker.vm:8000 $CYPRESS_PARAMS --spec $TEST_DIRECTORY"
        - echo $FULL_CYPRESS_CMD
        - docker run --shm-size=2g --name cypress --add-host="docker.vm:$(hostname -I)" -e cypress_grep -e cypress_usePercy -e CYPRESS_baseUrl=http://docker.vm:8000 -v $(pwd)/${E2E_BASE_PATH}:/e2e -v $(pwd):/app -w /e2e --entrypoint "sh" cypress/included:5.6.0 -c "$FULL_CYPRESS_CMD"
    after_script:
        - npx mochawesome-merge development/build/artifacts/e2e/mochawesome/single-reports/mochawesome*.json > development/build/artifacts/e2e/mochawesome/report-final.json
        - npx mochawesome-report-generator development/build/artifacts/e2e/mochawesome/report-final.json --cdn true --reportDir development/build/artifacts/e2e/mochawesome
        - docker rm -f cypress
    artifacts:
        when: always
        paths:
            - development/build/artifacts/e2e/
            - development/var/log/*
            - $CI_PROJECT_DIR/stdout.log
        reports:
            junit: development/build/artifacts/e2e/*.xml
    rules:
        -   if: '$CI_MERGE_REQUEST_LABELS =~ /.*E2E::skip.*/'
            when: never
        -   if: '$CI_MERGE_REQUEST_LABELS =~ /.*E2E::all.*/'
        -   if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "pipeline"'
        -   if: '$SKIP_ON_MR != "true" && ($CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH =~ /^(trunk|6\..+)$/)'
        -   if: '$SKIP_ON_MR == "true" && $CI_PIPELINE_SOURCE == "merge_request_event"'
            when: manual
            allow_failure: true
    parallel:
        matrix:
            # all test cases in chrome
            -   SECTION: 'Storefront'
                TEST_DIRECTORY: "cypress/integration/**/**/*"
                BROWSER: 'chrome'
                FEATURE_ALL: ["false", "minor", "major"]
                cypress_usePercy: 'false'
            -   SECTION: 'Administration'
                TEST_DIRECTORY:
                    - "cypress/integration/content/**/* cypress/integration/catalogue/**/* cypress/integration/customer/**/* cypress/integration/media-marketing/**/*"
                    - "cypress/integration/general/**/* cypress/integration/order/**/* cypress/integration/rule-product-stream/**/* cypress/integration/settings/**/*"
                BROWSER: 'chrome'
                FEATURE_ALL: ["false", "minor", "major"]
                cypress_usePercy: 'false'
            # firefox
            -   SECTION: 'Storefront'
                TEST_DIRECTORY: "cypress/integration/**/**/*"
                BROWSER: 'firefox'
                FEATURE_ALL: 'false'
                cypress_usePercy: 'false'
                SKIP_ON_MR: 'true'
            -   SECTION: 'Administration'
                TEST_DIRECTORY:
                    - "cypress/integration/content/**/* cypress/integration/catalogue/**/* cypress/integration/customer/**/* cypress/integration/media-marketing/**/*"
                    - "cypress/integration/general/**/* cypress/integration/order/**/* cypress/integration/rule-product-stream/**/* cypress/integration/settings/**/*"
                BROWSER: 'firefox'
                FEATURE_ALL: 'false'
                cypress_usePercy: 'false'
                SKIP_ON_MR: 'true'
            # Visual
            -   SECTION: 'Administration'
                TEST_DIRECTORY: "cypress/integration/visual/**/*"
                BROWSER: 'chrome'
                FEATURE_ALL: "false"
                cypress_usePercy: $CYPRESS_PERCY_USAGE
                SKIP_ON_MR: 'true'

# Stage: build

Component Library:
    only:
        changes:
            - src/Administration/**/*
            - src/Storefront/**/*
    stage: Build
    image: node:10.8
    before_script: []
    dependencies: []
    needs: [Jest (Administration), Jest (Storefront)]
    variables:
        PROJECT_ROOT: $CI_PROJECT_DIR
    environment:
        name: Component Library
        url: https://component-library.shopware.com
    script:
        - npm install --prefix src/Administration/Resources/app/administration
        - npm install --prefix src/Administration/Resources/app/administration/build/nuxt-component-library/
        - npm run --prefix src/Administration/Resources/app/administration/build/nuxt-component-library/ generate
        - "[[ -d build/artifacts/component-library/ ]] && (ls -1qA build/artifacts/component-library/ | grep -q .)"
    artifacts:
        paths:
            - build/artifacts/component-library/

# Stage: Generate docs

Symfony security check:
    stage: unit
    image: shopware/development:7.4-composer-2
    script:
        - composer install --no-interaction --no-scripts
        - curl --location --output local-php-security-checker https://github.com/fabpot/local-php-security-checker/releases/download/v1.0.0/local-php-security-checker_1.0.0_linux_amd64
        - echo 'e5b12488ca78bc07c149e9352278bf10667b88a8461caac10154f9a6f5476369  local-php-security-checker' > local-php-security-checker.sha256
        - sha256sum --check local-php-security-checker.sha256
        - chmod +x local-php-security-checker
        - ./local-php-security-checker
        - composer install --no-interaction --no-scripts -d vendor/shopware/platform/src/Recovery
        - ./local-php-security-checker --path=vendor/shopware/platform/src/Recovery

NPM security check:
    stage: Security
    image: shopware/development:7.4-composer-2
    before_script: []
    dependencies: []
    allow_failure: true
    script:
        - cd src/Administration/Resources/app/administration
        - npm i
        - npm install --save-dev audit-ci
        - node node_modules/.bin/audit-ci --moderate --allowlist http-proxy elliptic
        - cd ../../../../../src/Storefront/Resources/app/storefront
        - npm i
        - npm install --save-dev audit-ci
        - node node_modules/.bin/audit-ci --moderate --allowlist dot-prop http-proxy acorn jquery elliptic

# Stage: deploy

Upload Component Library:
    stage: Deploy
    image: python:latest
    before_script: []
    only:
        refs:
            - trunk
        variables:
            - $CI_PIPELINE_SOURCE == "schedule"
    dependencies:
        - Component Library
    script:
        - pip install awscli
        - cd build/artifacts/component-library
        - aws s3 sync --delete --acl public-read . s3://shopware-ui-component-library-docs/
        - aws cloudfront create-invalidation --distribution-id E18U17118IAC82 --paths "/*"
    interruptible: false

sonarqube-check:
    stage: Security
    image:
        name: sonarsource/sonar-scanner-cli:latest
        entrypoint: [""]
    before_script: []
    variables:
        SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
        GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
    cache:
        key: "${CI_JOB_NAME}"
        paths:
            - .sonar/cache
    artifacts:
        when: always
        paths:
            - development/build/artifacts/phpunit.clover.xml
            - development/build/artifacts/phpunit.junit.xml
    script:
        - sonar-scanner
    allow_failure: true
    only:
        - trunk
